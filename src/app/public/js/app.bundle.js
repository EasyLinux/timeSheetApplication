/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\n__webpack_require__(1);\n\n__webpack_require__(4);\n\nvar _app = __webpack_require__(6);\n\nvar models = __webpack_require__(7); // var req = require.context(\"../client-app\", true, /^(.*\\.(js$))[^.]*$/igm);\n// req.keys().forEach(function(key){\n//     req(key);\n// });\n\nmodels.keys().forEach(function (key) {\n    models(key);\n});\n\nvar collections = __webpack_require__(16);\ncollections.keys().forEach(function (key) {\n    collections(key);\n});\n\nvar views = __webpack_require__(19);\nviews.keys().forEach(function (key) {\n    views(key);\n});\n\nwindow.onload = function () {\n    _app.app.init();\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvZW50cnkuanM/ODJkZSJdLCJuYW1lcyI6WyJtb2RlbHMiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImNvbGxlY3Rpb25zIiwidmlld3MiLCJ3aW5kb3ciLCJvbmxvYWQiLCJpbml0Il0sIm1hcHBpbmdzIjoiOztBQUtBOztBQUNBOztBQUNBOztBQUVBLElBQUlBLFNBQVMsc0JBQWIsQyxDQVRBO0FBQ0E7QUFDQTtBQUNBOztBQU9BQSxPQUFPQyxJQUFQLEdBQWNDLE9BQWQsQ0FBc0IsVUFBU0MsR0FBVCxFQUFhO0FBQy9CSCxXQUFPRyxHQUFQO0FBQ0gsQ0FGRDs7QUFJQSxJQUFJQyxjQUFjLHVCQUFsQjtBQUNBQSxZQUFZSCxJQUFaLEdBQW1CQyxPQUFuQixDQUEyQixVQUFTQyxHQUFULEVBQWE7QUFDcENDLGdCQUFZRCxHQUFaO0FBQ0gsQ0FGRDs7QUFJQSxJQUFJRSxRQUFRLHVCQUFaO0FBQ0FBLE1BQU1KLElBQU4sR0FBYUMsT0FBYixDQUFxQixVQUFTQyxHQUFULEVBQWE7QUFDOUJFLFVBQU1GLEdBQU47QUFDSCxDQUZEOztBQUlBRyxPQUFPQyxNQUFQLEdBQWdCLFlBQVc7QUFDMUIsYUFBSUMsSUFBSjtBQUNBLENBRkQiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHZhciByZXEgPSByZXF1aXJlLmNvbnRleHQoXCIuLi9jbGllbnQtYXBwXCIsIHRydWUsIC9eKC4qXFwuKGpzJCkpW14uXSokL2lnbSk7XG4vLyByZXEua2V5cygpLmZvckVhY2goZnVuY3Rpb24oa2V5KXtcbi8vICAgICByZXEoa2V5KTtcbi8vIH0pO1xuXG5pbXBvcnQgJ3NjcmlwdCFqcXVlcnknO1xuaW1wb3J0ICdzY3JpcHQhZm91bmRhdGlvbi1zaXRlcyc7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9jbGllbnQtYXBwL2FwcC5qcyc7XG5cbnZhciBtb2RlbHMgPSByZXF1aXJlLmNvbnRleHQoXCIuLi9jbGllbnQtYXBwL21vZGVsc1wiLCB0cnVlLCAvXiguKlxcLihqcyQpKVteLl0qJC9pZ20pO1xubW9kZWxzLmtleXMoKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7XG4gICAgbW9kZWxzKGtleSk7XG59KTtcblxudmFyIGNvbGxlY3Rpb25zID0gcmVxdWlyZS5jb250ZXh0KFwiLi4vY2xpZW50LWFwcC9jb2xsZWN0aW9uc1wiLCB0cnVlLCAvXiguKlxcLihqcyQpKVteLl0qJC9pZ20pO1xuY29sbGVjdGlvbnMua2V5cygpLmZvckVhY2goZnVuY3Rpb24oa2V5KXtcbiAgICBjb2xsZWN0aW9ucyhrZXkpO1xufSk7XG5cbnZhciB2aWV3cyA9IHJlcXVpcmUuY29udGV4dChcIi4uL2NsaWVudC1hcHAvdmlld3NcIiwgdHJ1ZSwgL14oLipcXC4oanMkKSlbXi5dKiQvaWdtKTtcbnZpZXdzLmtleXMoKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7XG4gICAgdmlld3Moa2V5KTtcbn0pO1xuXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cdGFwcC5pbml0KCk7XG59XG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9jbGllbnQtYXBwL2VudHJ5LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("__webpack_require__(2)(__webpack_require__(3)+\"\\n\\n// SCRIPT-LOADER FOOTER\\n//# sourceURL=script:///Users/carterwooten/Sites/timeSheetApplication/node_modules/null-loader/index.js!/Users/carterwooten/Sites/timeSheetApplication/node_modules/jquery/dist/jquery.js\")\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2pxdWVyeS9kaXN0L2pxdWVyeS5qcz85YjliIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKFwiISEvVXNlcnMvY2FydGVyd29vdGVuL1NpdGVzL3RpbWVTaGVldEFwcGxpY2F0aW9uL25vZGVfbW9kdWxlcy9zY3JpcHQtbG9hZGVyL2FkZFNjcmlwdC5qc1wiKShyZXF1aXJlKFwiISEvVXNlcnMvY2FydGVyd29vdGVuL1NpdGVzL3RpbWVTaGVldEFwcGxpY2F0aW9uL25vZGVfbW9kdWxlcy9yYXctbG9hZGVyL2luZGV4LmpzIS9Vc2Vycy9jYXJ0ZXJ3b290ZW4vU2l0ZXMvdGltZVNoZWV0QXBwbGljYXRpb24vbm9kZV9tb2R1bGVzL251bGwtbG9hZGVyL2luZGV4LmpzIS9Vc2Vycy9jYXJ0ZXJ3b290ZW4vU2l0ZXMvdGltZVNoZWV0QXBwbGljYXRpb24vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qc1wiKStcIlxcblxcbi8vIFNDUklQVC1MT0FERVIgRk9PVEVSXFxuLy8jIHNvdXJjZVVSTD1zY3JpcHQ6Ly8vVXNlcnMvY2FydGVyd29vdGVuL1NpdGVzL3RpbWVTaGVldEFwcGxpY2F0aW9uL25vZGVfbW9kdWxlcy9udWxsLWxvYWRlci9pbmRleC5qcyEvVXNlcnMvY2FydGVyd29vdGVuL1NpdGVzL3RpbWVTaGVldEFwcGxpY2F0aW9uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanNcIilcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9zY3JpcHQtbG9hZGVyIS4vfi9qcXVlcnkvZGlzdC9qcXVlcnkuanNcbiAqKiBtb2R1bGUgaWQgPSAxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 2 */
/***/ function(module, exports) {

	eval("/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nmodule.exports = function(src) {\r\n\tif (typeof execScript !== \"undefined\")\r\n\t\texecScript(src);\r\n\telse\r\n\t\teval.call(null, src);\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NjcmlwdC1sb2FkZXIvYWRkU2NyaXB0LmpzPzgxMDciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXHJcbiovXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc3JjKSB7XHJcblx0aWYgKHR5cGVvZiBleGVjU2NyaXB0ICE9PSBcInVuZGVmaW5lZFwiKVxyXG5cdFx0ZXhlY1NjcmlwdChzcmMpO1xyXG5cdGVsc2VcclxuXHRcdGV2YWwuY2FsbChudWxsLCBzcmMpO1xyXG59XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3NjcmlwdC1sb2FkZXIvYWRkU2NyaXB0LmpzXG4gKiogbW9kdWxlIGlkID0gMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("module.exports = \"// empty (null-loader)\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2pxdWVyeS9kaXN0L2pxdWVyeS5qcz9lZTA5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiLy8gZW1wdHkgKG51bGwtbG9hZGVyKVwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmF3LWxvYWRlciEuL34vbnVsbC1sb2FkZXIhLi9+L2pxdWVyeS9kaXN0L2pxdWVyeS5qc1xuICoqIG1vZHVsZSBpZCA9IDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	eval("__webpack_require__(2)(__webpack_require__(5)+\"\\n\\n// SCRIPT-LOADER FOOTER\\n//# sourceURL=script:///Users/carterwooten/Sites/timeSheetApplication/node_modules/foundation-sites/dist/foundation.js\")\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2ZvdW5kYXRpb24tc2l0ZXMvZGlzdC9mb3VuZGF0aW9uLmpzP2QyOWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoXCIhIS9Vc2Vycy9jYXJ0ZXJ3b290ZW4vU2l0ZXMvdGltZVNoZWV0QXBwbGljYXRpb24vbm9kZV9tb2R1bGVzL3NjcmlwdC1sb2FkZXIvYWRkU2NyaXB0LmpzXCIpKHJlcXVpcmUoXCIhIS9Vc2Vycy9jYXJ0ZXJ3b290ZW4vU2l0ZXMvdGltZVNoZWV0QXBwbGljYXRpb24vbm9kZV9tb2R1bGVzL3Jhdy1sb2FkZXIvaW5kZXguanMhL1VzZXJzL2NhcnRlcndvb3Rlbi9TaXRlcy90aW1lU2hlZXRBcHBsaWNhdGlvbi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9kaXN0L2ZvdW5kYXRpb24uanNcIikrXCJcXG5cXG4vLyBTQ1JJUFQtTE9BREVSIEZPT1RFUlxcbi8vIyBzb3VyY2VVUkw9c2NyaXB0Oi8vL1VzZXJzL2NhcnRlcndvb3Rlbi9TaXRlcy90aW1lU2hlZXRBcHBsaWNhdGlvbi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9kaXN0L2ZvdW5kYXRpb24uanNcIilcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9zY3JpcHQtbG9hZGVyIS4vfi9mb3VuZGF0aW9uLXNpdGVzL2Rpc3QvZm91bmRhdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 5 */
/***/ function(module, exports) {

	eval("module.exports = \"!function ($) {\\n\\n  \\\"use strict\\\";\\n\\n  var FOUNDATION_VERSION = '6.2.3';\\n\\n  // Global Foundation object\\n  // This is attached to the window, or used as a module for AMD/Browserify\\n  var Foundation = {\\n    version: FOUNDATION_VERSION,\\n\\n    /**\\n     * Stores initialized plugins.\\n     */\\n    _plugins: {},\\n\\n    /**\\n     * Stores generated unique ids for plugin instances\\n     */\\n    _uuids: [],\\n\\n    /**\\n     * Returns a boolean for RTL support\\n     */\\n    rtl: function () {\\n      return $('html').attr('dir') === 'rtl';\\n    },\\n    /**\\n     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.\\n     * @param {Object} plugin - The constructor of the plugin.\\n     */\\n    plugin: function (plugin, name) {\\n      // Object key to use when adding to global Foundation object\\n      // Examples: Foundation.Reveal, Foundation.OffCanvas\\n      var className = name || functionName(plugin);\\n      // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin\\n      // Examples: data-reveal, data-off-canvas\\n      var attrName = hyphenate(className);\\n\\n      // Add to the Foundation object and the plugins list (for reflowing)\\n      this._plugins[attrName] = this[className] = plugin;\\n    },\\n    /**\\n     * @function\\n     * Populates the _uuids array with pointers to each individual plugin instance.\\n     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.\\n     * Also fires the initialization event for each plugin, consolidating repetitive code.\\n     * @param {Object} plugin - an instance of a plugin, usually `this` in context.\\n     * @param {String} name - the name of the plugin, passed as a camelCased string.\\n     * @fires Plugin#init\\n     */\\n    registerPlugin: function (plugin, name) {\\n      var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();\\n      plugin.uuid = this.GetYoDigits(6, pluginName);\\n\\n      if (!plugin.$element.attr('data-' + pluginName)) {\\n        plugin.$element.attr('data-' + pluginName, plugin.uuid);\\n      }\\n      if (!plugin.$element.data('zfPlugin')) {\\n        plugin.$element.data('zfPlugin', plugin);\\n      }\\n      /**\\n       * Fires when the plugin has initialized.\\n       * @event Plugin#init\\n       */\\n      plugin.$element.trigger('init.zf.' + pluginName);\\n\\n      this._uuids.push(plugin.uuid);\\n\\n      return;\\n    },\\n    /**\\n     * @function\\n     * Removes the plugins uuid from the _uuids array.\\n     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.\\n     * Also fires the destroyed event for the plugin, consolidating repetitive code.\\n     * @param {Object} plugin - an instance of a plugin, usually `this` in context.\\n     * @fires Plugin#destroyed\\n     */\\n    unregisterPlugin: function (plugin) {\\n      var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));\\n\\n      this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);\\n      plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')\\n      /**\\n       * Fires when the plugin has been destroyed.\\n       * @event Plugin#destroyed\\n       */\\n      .trigger('destroyed.zf.' + pluginName);\\n      for (var prop in plugin) {\\n        plugin[prop] = null; //clean up script to prep for garbage collection.\\n      }\\n      return;\\n    },\\n\\n    /**\\n     * @function\\n     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.\\n     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`\\n     * @default If no argument is passed, reflow all currently active plugins.\\n     */\\n    reInit: function (plugins) {\\n      var isJQ = plugins instanceof $;\\n      try {\\n        if (isJQ) {\\n          plugins.each(function () {\\n            $(this).data('zfPlugin')._init();\\n          });\\n        } else {\\n          var type = typeof plugins,\\n              _this = this,\\n              fns = {\\n            'object': function (plgs) {\\n              plgs.forEach(function (p) {\\n                p = hyphenate(p);\\n                $('[data-' + p + ']').foundation('_init');\\n              });\\n            },\\n            'string': function () {\\n              plugins = hyphenate(plugins);\\n              $('[data-' + plugins + ']').foundation('_init');\\n            },\\n            'undefined': function () {\\n              this['object'](Object.keys(_this._plugins));\\n            }\\n          };\\n          fns[type](plugins);\\n        }\\n      } catch (err) {\\n        console.error(err);\\n      } finally {\\n        return plugins;\\n      }\\n    },\\n\\n    /**\\n     * returns a random base-36 uid with namespacing\\n     * @function\\n     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.\\n     * @param {String} namespace - name of plugin to be incorporated in uid, optional.\\n     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.\\n     * @returns {String} - unique id\\n     */\\n    GetYoDigits: function (length, namespace) {\\n      length = length || 6;\\n      return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? '-' + namespace : '');\\n    },\\n    /**\\n     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.\\n     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.\\n     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.\\n     */\\n    reflow: function (elem, plugins) {\\n\\n      // If plugins is undefined, just grab everything\\n      if (typeof plugins === 'undefined') {\\n        plugins = Object.keys(this._plugins);\\n      }\\n      // If plugins is a string, convert it to an array with one item\\n      else if (typeof plugins === 'string') {\\n          plugins = [plugins];\\n        }\\n\\n      var _this = this;\\n\\n      // Iterate through each plugin\\n      $.each(plugins, function (i, name) {\\n        // Get the current plugin\\n        var plugin = _this._plugins[name];\\n\\n        // Localize the search to all elements inside elem, as well as elem itself, unless elem === document\\n        var $elem = $(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');\\n\\n        // For each plugin found, initialize it\\n        $elem.each(function () {\\n          var $el = $(this),\\n              opts = {};\\n          // Don't double-dip on plugins\\n          if ($el.data('zfPlugin')) {\\n            console.warn(\\\"Tried to initialize \\\" + name + \\\" on an element that already has a Foundation plugin.\\\");\\n            return;\\n          }\\n\\n          if ($el.attr('data-options')) {\\n            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {\\n              var opt = e.split(':').map(function (el) {\\n                return el.trim();\\n              });\\n              if (opt[0]) opts[opt[0]] = parseValue(opt[1]);\\n            });\\n          }\\n          try {\\n            $el.data('zfPlugin', new plugin($(this), opts));\\n          } catch (er) {\\n            console.error(er);\\n          } finally {\\n            return;\\n          }\\n        });\\n      });\\n    },\\n    getFnName: functionName,\\n    transitionend: function ($elem) {\\n      var transitions = {\\n        'transition': 'transitionend',\\n        'WebkitTransition': 'webkitTransitionEnd',\\n        'MozTransition': 'transitionend',\\n        'OTransition': 'otransitionend'\\n      };\\n      var elem = document.createElement('div'),\\n          end;\\n\\n      for (var t in transitions) {\\n        if (typeof elem.style[t] !== 'undefined') {\\n          end = transitions[t];\\n        }\\n      }\\n      if (end) {\\n        return end;\\n      } else {\\n        end = setTimeout(function () {\\n          $elem.triggerHandler('transitionend', [$elem]);\\n        }, 1);\\n        return 'transitionend';\\n      }\\n    }\\n  };\\n\\n  Foundation.util = {\\n    /**\\n     * Function for applying a debounce effect to a function call.\\n     * @function\\n     * @param {Function} func - Function to be called at end of timeout.\\n     * @param {Number} delay - Time in ms to delay the call of `func`.\\n     * @returns function\\n     */\\n    throttle: function (func, delay) {\\n      var timer = null;\\n\\n      return function () {\\n        var context = this,\\n            args = arguments;\\n\\n        if (timer === null) {\\n          timer = setTimeout(function () {\\n            func.apply(context, args);\\n            timer = null;\\n          }, delay);\\n        }\\n      };\\n    }\\n  };\\n\\n  // TODO: consider not making this a jQuery function\\n  // TODO: need way to reflow vs. re-initialize\\n  /**\\n   * The Foundation jQuery method.\\n   * @param {String|Array} method - An action to perform on the current jQuery object.\\n   */\\n  var foundation = function (method) {\\n    var type = typeof method,\\n        $meta = $('meta.foundation-mq'),\\n        $noJS = $('.no-js');\\n\\n    if (!$meta.length) {\\n      $('<meta class=\\\"foundation-mq\\\">').appendTo(document.head);\\n    }\\n    if ($noJS.length) {\\n      $noJS.removeClass('no-js');\\n    }\\n\\n    if (type === 'undefined') {\\n      //needs to initialize the Foundation object, or an individual plugin.\\n      Foundation.MediaQuery._init();\\n      Foundation.reflow(this);\\n    } else if (type === 'string') {\\n      //an individual method to invoke on a plugin or group of plugins\\n      var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary\\n      var plugClass = this.data('zfPlugin'); //determine the class of plugin\\n\\n      if (plugClass !== undefined && plugClass[method] !== undefined) {\\n        //make sure both the class and method exist\\n        if (this.length === 1) {\\n          //if there's only one, call it directly.\\n          plugClass[method].apply(plugClass, args);\\n        } else {\\n          this.each(function (i, el) {\\n            //otherwise loop through the jQuery collection and invoke the method on each\\n            plugClass[method].apply($(el).data('zfPlugin'), args);\\n          });\\n        }\\n      } else {\\n        //error for no class or no method\\n        throw new ReferenceError(\\\"We're sorry, '\\\" + method + \\\"' is not an available method for \\\" + (plugClass ? functionName(plugClass) : 'this element') + '.');\\n      }\\n    } else {\\n      //error for invalid argument type\\n      throw new TypeError('We\\\\'re sorry, ' + type + ' is not a valid parameter. You must use a string representing the method you wish to invoke.');\\n    }\\n    return this;\\n  };\\n\\n  window.Foundation = Foundation;\\n  $.fn.foundation = foundation;\\n\\n  // Polyfill for requestAnimationFrame\\n  (function () {\\n    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {\\n      return new Date().getTime();\\n    };\\n\\n    var vendors = ['webkit', 'moz'];\\n    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {\\n      var vp = vendors[i];\\n      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];\\n      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];\\n    }\\n    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {\\n      var lastTime = 0;\\n      window.requestAnimationFrame = function (callback) {\\n        var now = Date.now();\\n        var nextTime = Math.max(lastTime + 16, now);\\n        return setTimeout(function () {\\n          callback(lastTime = nextTime);\\n        }, nextTime - now);\\n      };\\n      window.cancelAnimationFrame = clearTimeout;\\n    }\\n    /**\\n     * Polyfill for performance.now, required by rAF\\n     */\\n    if (!window.performance || !window.performance.now) {\\n      window.performance = {\\n        start: Date.now(),\\n        now: function () {\\n          return Date.now() - this.start;\\n        }\\n      };\\n    }\\n  })();\\n  if (!Function.prototype.bind) {\\n    Function.prototype.bind = function (oThis) {\\n      if (typeof this !== 'function') {\\n        // closest thing possible to the ECMAScript 5\\n        // internal IsCallable function\\n        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\\n      }\\n\\n      var aArgs = Array.prototype.slice.call(arguments, 1),\\n          fToBind = this,\\n          fNOP = function () {},\\n          fBound = function () {\\n        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\\n      };\\n\\n      if (this.prototype) {\\n        // native functions don't have a prototype\\n        fNOP.prototype = this.prototype;\\n      }\\n      fBound.prototype = new fNOP();\\n\\n      return fBound;\\n    };\\n  }\\n  // Polyfill to get the name of a function in IE9\\n  function functionName(fn) {\\n    if (Function.prototype.name === undefined) {\\n      var funcNameRegex = /function\\\\s([^(]{1,})\\\\(/;\\n      var results = funcNameRegex.exec(fn.toString());\\n      return results && results.length > 1 ? results[1].trim() : \\\"\\\";\\n    } else if (fn.prototype === undefined) {\\n      return fn.constructor.name;\\n    } else {\\n      return fn.prototype.constructor.name;\\n    }\\n  }\\n  function parseValue(str) {\\n    if (/true/.test(str)) return true;else if (/false/.test(str)) return false;else if (!isNaN(str * 1)) return parseFloat(str);\\n    return str;\\n  }\\n  // Convert PascalCase to kebab-case\\n  // Thank you: http://stackoverflow.com/a/8955580\\n  function hyphenate(str) {\\n    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\\n  }\\n}(jQuery);\\n'use strict';\\n\\n!function ($) {\\n\\n  Foundation.Box = {\\n    ImNotTouchingYou: ImNotTouchingYou,\\n    GetDimensions: GetDimensions,\\n    GetOffsets: GetOffsets\\n  };\\n\\n  /**\\n   * Compares the dimensions of an element to a container and determines collision events with container.\\n   * @function\\n   * @param {jQuery} element - jQuery object to test for collisions.\\n   * @param {jQuery} parent - jQuery object to use as bounding container.\\n   * @param {Boolean} lrOnly - set to true to check left and right values only.\\n   * @param {Boolean} tbOnly - set to true to check top and bottom values only.\\n   * @default if no parent object passed, detects collisions with `window`.\\n   * @returns {Boolean} - true if collision free, false if a collision in any direction.\\n   */\\n  function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {\\n    var eleDims = GetDimensions(element),\\n        top,\\n        bottom,\\n        left,\\n        right;\\n\\n    if (parent) {\\n      var parDims = GetDimensions(parent);\\n\\n      bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;\\n      top = eleDims.offset.top >= parDims.offset.top;\\n      left = eleDims.offset.left >= parDims.offset.left;\\n      right = eleDims.offset.left + eleDims.width <= parDims.width + parDims.offset.left;\\n    } else {\\n      bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;\\n      top = eleDims.offset.top >= eleDims.windowDims.offset.top;\\n      left = eleDims.offset.left >= eleDims.windowDims.offset.left;\\n      right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;\\n    }\\n\\n    var allDirs = [bottom, top, left, right];\\n\\n    if (lrOnly) {\\n      return left === right === true;\\n    }\\n\\n    if (tbOnly) {\\n      return top === bottom === true;\\n    }\\n\\n    return allDirs.indexOf(false) === -1;\\n  };\\n\\n  /**\\n   * Uses native methods to return an object of dimension values.\\n   * @function\\n   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.\\n   * @returns {Object} - nested object of integer pixel values\\n   * TODO - if element is window, return only those values.\\n   */\\n  function GetDimensions(elem, test) {\\n    elem = elem.length ? elem[0] : elem;\\n\\n    if (elem === window || elem === document) {\\n      throw new Error(\\\"I'm sorry, Dave. I'm afraid I can't do that.\\\");\\n    }\\n\\n    var rect = elem.getBoundingClientRect(),\\n        parRect = elem.parentNode.getBoundingClientRect(),\\n        winRect = document.body.getBoundingClientRect(),\\n        winY = window.pageYOffset,\\n        winX = window.pageXOffset;\\n\\n    return {\\n      width: rect.width,\\n      height: rect.height,\\n      offset: {\\n        top: rect.top + winY,\\n        left: rect.left + winX\\n      },\\n      parentDims: {\\n        width: parRect.width,\\n        height: parRect.height,\\n        offset: {\\n          top: parRect.top + winY,\\n          left: parRect.left + winX\\n        }\\n      },\\n      windowDims: {\\n        width: winRect.width,\\n        height: winRect.height,\\n        offset: {\\n          top: winY,\\n          left: winX\\n        }\\n      }\\n    };\\n  }\\n\\n  /**\\n   * Returns an object of top and left integer pixel values for dynamically rendered elements,\\n   * such as: Tooltip, Reveal, and Dropdown\\n   * @function\\n   * @param {jQuery} element - jQuery object for the element being positioned.\\n   * @param {jQuery} anchor - jQuery object for the element's anchor point.\\n   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor\\n   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.\\n   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.\\n   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.\\n   * TODO alter/rewrite to work with `em` values as well/instead of pixels\\n   */\\n  function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {\\n    var $eleDims = GetDimensions(element),\\n        $anchorDims = anchor ? GetDimensions(anchor) : null;\\n\\n    switch (position) {\\n      case 'top':\\n        return {\\n          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,\\n          top: $anchorDims.offset.top - ($eleDims.height + vOffset)\\n        };\\n        break;\\n      case 'left':\\n        return {\\n          left: $anchorDims.offset.left - ($eleDims.width + hOffset),\\n          top: $anchorDims.offset.top\\n        };\\n        break;\\n      case 'right':\\n        return {\\n          left: $anchorDims.offset.left + $anchorDims.width + hOffset,\\n          top: $anchorDims.offset.top\\n        };\\n        break;\\n      case 'center top':\\n        return {\\n          left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,\\n          top: $anchorDims.offset.top - ($eleDims.height + vOffset)\\n        };\\n        break;\\n      case 'center bottom':\\n        return {\\n          left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,\\n          top: $anchorDims.offset.top + $anchorDims.height + vOffset\\n        };\\n        break;\\n      case 'center left':\\n        return {\\n          left: $anchorDims.offset.left - ($eleDims.width + hOffset),\\n          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2\\n        };\\n        break;\\n      case 'center right':\\n        return {\\n          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,\\n          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2\\n        };\\n        break;\\n      case 'center':\\n        return {\\n          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,\\n          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2\\n        };\\n        break;\\n      case 'reveal':\\n        return {\\n          left: ($eleDims.windowDims.width - $eleDims.width) / 2,\\n          top: $eleDims.windowDims.offset.top + vOffset\\n        };\\n      case 'reveal full':\\n        return {\\n          left: $eleDims.windowDims.offset.left,\\n          top: $eleDims.windowDims.offset.top\\n        };\\n        break;\\n      case 'left bottom':\\n        return {\\n          left: $anchorDims.offset.left - ($eleDims.width + hOffset),\\n          top: $anchorDims.offset.top + $anchorDims.height\\n        };\\n        break;\\n      case 'right bottom':\\n        return {\\n          left: $anchorDims.offset.left + $anchorDims.width + hOffset - $eleDims.width,\\n          top: $anchorDims.offset.top + $anchorDims.height\\n        };\\n        break;\\n      default:\\n        return {\\n          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,\\n          top: $anchorDims.offset.top + $anchorDims.height + vOffset\\n        };\\n    }\\n  }\\n}(jQuery);\\n/*******************************************\\n *                                         *\\n * This util was created by Marius Olbertz *\\n * Please thank Marius on GitHub /owlbertz *\\n * or the web http://www.mariusolbertz.de/ *\\n *                                         *\\n ******************************************/\\n\\n'use strict';\\n\\n!function ($) {\\n\\n  var keyCodes = {\\n    9: 'TAB',\\n    13: 'ENTER',\\n    27: 'ESCAPE',\\n    32: 'SPACE',\\n    37: 'ARROW_LEFT',\\n    38: 'ARROW_UP',\\n    39: 'ARROW_RIGHT',\\n    40: 'ARROW_DOWN'\\n  };\\n\\n  var commands = {};\\n\\n  var Keyboard = {\\n    keys: getKeyCodes(keyCodes),\\n\\n    /**\\n     * Parses the (keyboard) event and returns a String that represents its key\\n     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\\n     * @param {Event} event - the event generated by the event handler\\n     * @return String key - String that represents the key pressed\\n     */\\n    parseKey: function (event) {\\n      var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();\\n      if (event.shiftKey) key = 'SHIFT_' + key;\\n      if (event.ctrlKey) key = 'CTRL_' + key;\\n      if (event.altKey) key = 'ALT_' + key;\\n      return key;\\n    },\\n\\n\\n    /**\\n     * Handles the given (keyboard) event\\n     * @param {Event} event - the event generated by the event handler\\n     * @param {String} component - Foundation component's name, e.g. Slider or Reveal\\n     * @param {Objects} functions - collection of functions that are to be executed\\n     */\\n    handleKey: function (event, component, functions) {\\n      var commandList = commands[component],\\n          keyCode = this.parseKey(event),\\n          cmds,\\n          command,\\n          fn;\\n\\n      if (!commandList) return console.warn('Component not defined!');\\n\\n      if (typeof commandList.ltr === 'undefined') {\\n        // this component does not differentiate between ltr and rtl\\n        cmds = commandList; // use plain list\\n      } else {\\n          // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa\\n          if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);\\n        }\\n      command = cmds[keyCode];\\n\\n      fn = functions[command];\\n      if (fn && typeof fn === 'function') {\\n        // execute function  if exists\\n        var returnValue = fn.apply();\\n        if (functions.handled || typeof functions.handled === 'function') {\\n          // execute function when event was handled\\n          functions.handled(returnValue);\\n        }\\n      } else {\\n        if (functions.unhandled || typeof functions.unhandled === 'function') {\\n          // execute function when event was not handled\\n          functions.unhandled();\\n        }\\n      }\\n    },\\n\\n\\n    /**\\n     * Finds all focusable elements within the given `$element`\\n     * @param {jQuery} $element - jQuery object to search within\\n     * @return {jQuery} $focusable - all focusable elements within `$element`\\n     */\\n    findFocusable: function ($element) {\\n      return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {\\n        if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {\\n          return false;\\n        } //only have visible elements and those that have a tabindex greater or equal 0\\n        return true;\\n      });\\n    },\\n\\n\\n    /**\\n     * Returns the component name name\\n     * @param {Object} component - Foundation component, e.g. Slider or Reveal\\n     * @return String componentName\\n     */\\n\\n    register: function (componentName, cmds) {\\n      commands[componentName] = cmds;\\n    }\\n  };\\n\\n  /*\\n   * Constants for easier comparing.\\n   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\\n   */\\n  function getKeyCodes(kcs) {\\n    var k = {};\\n    for (var kc in kcs) {\\n      k[kcs[kc]] = kcs[kc];\\n    }return k;\\n  }\\n\\n  Foundation.Keyboard = Keyboard;\\n}(jQuery);\\n'use strict';\\n\\n!function ($) {\\n\\n  // Default set of media queries\\n  var defaultQueries = {\\n    'default': 'only screen',\\n    landscape: 'only screen and (orientation: landscape)',\\n    portrait: 'only screen and (orientation: portrait)',\\n    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'\\n  };\\n\\n  var MediaQuery = {\\n    queries: [],\\n\\n    current: '',\\n\\n    /**\\n     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.\\n     * @function\\n     * @private\\n     */\\n    _init: function () {\\n      var self = this;\\n      var extractedStyles = $('.foundation-mq').css('font-family');\\n      var namedQueries;\\n\\n      namedQueries = parseStyleToObject(extractedStyles);\\n\\n      for (var key in namedQueries) {\\n        if (namedQueries.hasOwnProperty(key)) {\\n          self.queries.push({\\n            name: key,\\n            value: 'only screen and (min-width: ' + namedQueries[key] + ')'\\n          });\\n        }\\n      }\\n\\n      this.current = this._getCurrentSize();\\n\\n      this._watcher();\\n    },\\n\\n\\n    /**\\n     * Checks if the screen is at least as wide as a breakpoint.\\n     * @function\\n     * @param {String} size - Name of the breakpoint to check.\\n     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.\\n     */\\n    atLeast: function (size) {\\n      var query = this.get(size);\\n\\n      if (query) {\\n        return window.matchMedia(query).matches;\\n      }\\n\\n      return false;\\n    },\\n\\n\\n    /**\\n     * Gets the media query of a breakpoint.\\n     * @function\\n     * @param {String} size - Name of the breakpoint to get.\\n     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.\\n     */\\n    get: function (size) {\\n      for (var i in this.queries) {\\n        if (this.queries.hasOwnProperty(i)) {\\n          var query = this.queries[i];\\n          if (size === query.name) return query.value;\\n        }\\n      }\\n\\n      return null;\\n    },\\n\\n\\n    /**\\n     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).\\n     * @function\\n     * @private\\n     * @returns {String} Name of the current breakpoint.\\n     */\\n    _getCurrentSize: function () {\\n      var matched;\\n\\n      for (var i = 0; i < this.queries.length; i++) {\\n        var query = this.queries[i];\\n\\n        if (window.matchMedia(query.value).matches) {\\n          matched = query;\\n        }\\n      }\\n\\n      if (typeof matched === 'object') {\\n        return matched.name;\\n      } else {\\n        return matched;\\n      }\\n    },\\n\\n\\n    /**\\n     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.\\n     * @function\\n     * @private\\n     */\\n    _watcher: function () {\\n      var _this = this;\\n\\n      $(window).on('resize.zf.mediaquery', function () {\\n        var newSize = _this._getCurrentSize(),\\n            currentSize = _this.current;\\n\\n        if (newSize !== currentSize) {\\n          // Change the current media query\\n          _this.current = newSize;\\n\\n          // Broadcast the media query change on the window\\n          $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);\\n        }\\n      });\\n    }\\n  };\\n\\n  Foundation.MediaQuery = MediaQuery;\\n\\n  // matchMedia() polyfill - Test a CSS media type/query in JS.\\n  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license\\n  window.matchMedia || (window.matchMedia = function () {\\n    'use strict';\\n\\n    // For browsers that support matchMedium api such as IE 9 and webkit\\n\\n    var styleMedia = window.styleMedia || window.media;\\n\\n    // For those that don't support matchMedium\\n    if (!styleMedia) {\\n      var style = document.createElement('style'),\\n          script = document.getElementsByTagName('script')[0],\\n          info = null;\\n\\n      style.type = 'text/css';\\n      style.id = 'matchmediajs-test';\\n\\n      script.parentNode.insertBefore(style, script);\\n\\n      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\\n      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;\\n\\n      styleMedia = {\\n        matchMedium: function (media) {\\n          var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';\\n\\n          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\\n          if (style.styleSheet) {\\n            style.styleSheet.cssText = text;\\n          } else {\\n            style.textContent = text;\\n          }\\n\\n          // Test if media query is true or false\\n          return info.width === '1px';\\n        }\\n      };\\n    }\\n\\n    return function (media) {\\n      return {\\n        matches: styleMedia.matchMedium(media || 'all'),\\n        media: media || 'all'\\n      };\\n    };\\n  }());\\n\\n  // Thank you: https://github.com/sindresorhus/query-string\\n  function parseStyleToObject(str) {\\n    var styleObject = {};\\n\\n    if (typeof str !== 'string') {\\n      return styleObject;\\n    }\\n\\n    str = str.trim().slice(1, -1); // browsers re-quote string style values\\n\\n    if (!str) {\\n      return styleObject;\\n    }\\n\\n    styleObject = str.split('&').reduce(function (ret, param) {\\n      var parts = param.replace(/\\\\+/g, ' ').split('=');\\n      var key = parts[0];\\n      var val = parts[1];\\n      key = decodeURIComponent(key);\\n\\n      // missing `=` should be `null`:\\n      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\\n      val = val === undefined ? null : decodeURIComponent(val);\\n\\n      if (!ret.hasOwnProperty(key)) {\\n        ret[key] = val;\\n      } else if (Array.isArray(ret[key])) {\\n        ret[key].push(val);\\n      } else {\\n        ret[key] = [ret[key], val];\\n      }\\n      return ret;\\n    }, {});\\n\\n    return styleObject;\\n  }\\n\\n  Foundation.MediaQuery = MediaQuery;\\n}(jQuery);\\n'use strict';\\n\\n!function ($) {\\n\\n  /**\\n   * Motion module.\\n   * @module foundation.motion\\n   */\\n\\n  var initClasses = ['mui-enter', 'mui-leave'];\\n  var activeClasses = ['mui-enter-active', 'mui-leave-active'];\\n\\n  var Motion = {\\n    animateIn: function (element, animation, cb) {\\n      animate(true, element, animation, cb);\\n    },\\n\\n    animateOut: function (element, animation, cb) {\\n      animate(false, element, animation, cb);\\n    }\\n  };\\n\\n  function Move(duration, elem, fn) {\\n    var anim,\\n        prog,\\n        start = null;\\n    // console.log('called');\\n\\n    function move(ts) {\\n      if (!start) start = window.performance.now();\\n      // console.log(start, ts);\\n      prog = ts - start;\\n      fn.apply(elem);\\n\\n      if (prog < duration) {\\n        anim = window.requestAnimationFrame(move, elem);\\n      } else {\\n        window.cancelAnimationFrame(anim);\\n        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);\\n      }\\n    }\\n    anim = window.requestAnimationFrame(move);\\n  }\\n\\n  /**\\n   * Animates an element in or out using a CSS transition class.\\n   * @function\\n   * @private\\n   * @param {Boolean} isIn - Defines if the animation is in or out.\\n   * @param {Object} element - jQuery or HTML object to animate.\\n   * @param {String} animation - CSS class to use.\\n   * @param {Function} cb - Callback to run when animation is finished.\\n   */\\n  function animate(isIn, element, animation, cb) {\\n    element = $(element).eq(0);\\n\\n    if (!element.length) return;\\n\\n    var initClass = isIn ? initClasses[0] : initClasses[1];\\n    var activeClass = isIn ? activeClasses[0] : activeClasses[1];\\n\\n    // Set up the animation\\n    reset();\\n\\n    element.addClass(animation).css('transition', 'none');\\n\\n    requestAnimationFrame(function () {\\n      element.addClass(initClass);\\n      if (isIn) element.show();\\n    });\\n\\n    // Start the animation\\n    requestAnimationFrame(function () {\\n      element[0].offsetWidth;\\n      element.css('transition', '').addClass(activeClass);\\n    });\\n\\n    // Clean up the animation when it finishes\\n    element.one(Foundation.transitionend(element), finish);\\n\\n    // Hides the element (for out animations), resets the element, and runs a callback\\n    function finish() {\\n      if (!isIn) element.hide();\\n      reset();\\n      if (cb) cb.apply(element);\\n    }\\n\\n    // Resets transitions and removes motion-specific classes\\n    function reset() {\\n      element[0].style.transitionDuration = 0;\\n      element.removeClass(initClass + ' ' + activeClass + ' ' + animation);\\n    }\\n  }\\n\\n  Foundation.Move = Move;\\n  Foundation.Motion = Motion;\\n}(jQuery);\\n'use strict';\\n\\n!function ($) {\\n\\n  var Nest = {\\n    Feather: function (menu) {\\n      var type = arguments.length <= 1 || arguments[1] === undefined ? 'zf' : arguments[1];\\n\\n      menu.attr('role', 'menubar');\\n\\n      var items = menu.find('li').attr({ 'role': 'menuitem' }),\\n          subMenuClass = 'is-' + type + '-submenu',\\n          subItemClass = subMenuClass + '-item',\\n          hasSubClass = 'is-' + type + '-submenu-parent';\\n\\n      menu.find('a:first').attr('tabindex', 0);\\n\\n      items.each(function () {\\n        var $item = $(this),\\n            $sub = $item.children('ul');\\n\\n        if ($sub.length) {\\n          $item.addClass(hasSubClass).attr({\\n            'aria-haspopup': true,\\n            'aria-expanded': false,\\n            'aria-label': $item.children('a:first').text()\\n          });\\n\\n          $sub.addClass('submenu ' + subMenuClass).attr({\\n            'data-submenu': '',\\n            'aria-hidden': true,\\n            'role': 'menu'\\n          });\\n        }\\n\\n        if ($item.parent('[data-submenu]').length) {\\n          $item.addClass('is-submenu-item ' + subItemClass);\\n        }\\n      });\\n\\n      return;\\n    },\\n    Burn: function (menu, type) {\\n      var items = menu.find('li').removeAttr('tabindex'),\\n          subMenuClass = 'is-' + type + '-submenu',\\n          subItemClass = subMenuClass + '-item',\\n          hasSubClass = 'is-' + type + '-submenu-parent';\\n\\n      menu.find('*').removeClass(subMenuClass + ' ' + subItemClass + ' ' + hasSubClass + ' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display', '');\\n\\n      // console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')\\n      //           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')\\n      //           .removeAttr('data-submenu'));\\n      // items.each(function(){\\n      //   var $item = $(this),\\n      //       $sub = $item.children('ul');\\n      //   if($item.parent('[data-submenu]').length){\\n      //     $item.removeClass('is-submenu-item ' + subItemClass);\\n      //   }\\n      //   if($sub.length){\\n      //     $item.removeClass('has-submenu');\\n      //     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');\\n      //   }\\n      // });\\n    }\\n  };\\n\\n  Foundation.Nest = Nest;\\n}(jQuery);\\n'use strict';\\n\\n!function ($) {\\n\\n  function Timer(elem, options, cb) {\\n    var _this = this,\\n        duration = options.duration,\\n        //options is an object for easily adding features later.\\n    nameSpace = Object.keys(elem.data())[0] || 'timer',\\n        remain = -1,\\n        start,\\n        timer;\\n\\n    this.isPaused = false;\\n\\n    this.restart = function () {\\n      remain = -1;\\n      clearTimeout(timer);\\n      this.start();\\n    };\\n\\n    this.start = function () {\\n      this.isPaused = false;\\n      // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.\\n      clearTimeout(timer);\\n      remain = remain <= 0 ? duration : remain;\\n      elem.data('paused', false);\\n      start = Date.now();\\n      timer = setTimeout(function () {\\n        if (options.infinite) {\\n          _this.restart(); //rerun the timer.\\n        }\\n        cb();\\n      }, remain);\\n      elem.trigger('timerstart.zf.' + nameSpace);\\n    };\\n\\n    this.pause = function () {\\n      this.isPaused = true;\\n      //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.\\n      clearTimeout(timer);\\n      elem.data('paused', true);\\n      var end = Date.now();\\n      remain = remain - (end - start);\\n      elem.trigger('timerpaused.zf.' + nameSpace);\\n    };\\n  }\\n\\n  /**\\n   * Runs a callback function when images are fully loaded.\\n   * @param {Object} images - Image(s) to check if loaded.\\n   * @param {Func} callback - Function to execute when image is fully loaded.\\n   */\\n  function onImagesLoaded(images, callback) {\\n    var self = this,\\n        unloaded = images.length;\\n\\n    if (unloaded === 0) {\\n      callback();\\n    }\\n\\n    images.each(function () {\\n      if (this.complete) {\\n        singleImageLoaded();\\n      } else if (typeof this.naturalWidth !== 'undefined' && this.naturalWidth > 0) {\\n        singleImageLoaded();\\n      } else {\\n        $(this).one('load', function () {\\n          singleImageLoaded();\\n        });\\n      }\\n    });\\n\\n    function singleImageLoaded() {\\n      unloaded--;\\n      if (unloaded === 0) {\\n        callback();\\n      }\\n    }\\n  }\\n\\n  Foundation.Timer = Timer;\\n  Foundation.onImagesLoaded = onImagesLoaded;\\n}(jQuery);\\n//**************************************************\\n//**Work inspired by multiple jquery swipe plugins**\\n//**Done by Yohai Ararat ***************************\\n//**************************************************\\n(function ($) {\\n\\n\\t$.spotSwipe = {\\n\\t\\tversion: '1.0.0',\\n\\t\\tenabled: 'ontouchstart' in document.documentElement,\\n\\t\\tpreventDefault: false,\\n\\t\\tmoveThreshold: 75,\\n\\t\\ttimeThreshold: 200\\n\\t};\\n\\n\\tvar startPosX,\\n\\t    startPosY,\\n\\t    startTime,\\n\\t    elapsedTime,\\n\\t    isMoving = false;\\n\\n\\tfunction onTouchEnd() {\\n\\t\\t//  alert(this);\\n\\t\\tthis.removeEventListener('touchmove', onTouchMove);\\n\\t\\tthis.removeEventListener('touchend', onTouchEnd);\\n\\t\\tisMoving = false;\\n\\t}\\n\\n\\tfunction onTouchMove(e) {\\n\\t\\tif ($.spotSwipe.preventDefault) {\\n\\t\\t\\te.preventDefault();\\n\\t\\t}\\n\\t\\tif (isMoving) {\\n\\t\\t\\tvar x = e.touches[0].pageX;\\n\\t\\t\\tvar y = e.touches[0].pageY;\\n\\t\\t\\tvar dx = startPosX - x;\\n\\t\\t\\tvar dy = startPosY - y;\\n\\t\\t\\tvar dir;\\n\\t\\t\\telapsedTime = new Date().getTime() - startTime;\\n\\t\\t\\tif (Math.abs(dx) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {\\n\\t\\t\\t\\tdir = dx > 0 ? 'left' : 'right';\\n\\t\\t\\t}\\n\\t\\t\\t// else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {\\n\\t\\t\\t//   dir = dy > 0 ? 'down' : 'up';\\n\\t\\t\\t// }\\n\\t\\t\\tif (dir) {\\n\\t\\t\\t\\te.preventDefault();\\n\\t\\t\\t\\tonTouchEnd.call(this);\\n\\t\\t\\t\\t$(this).trigger('swipe', dir).trigger('swipe' + dir);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction onTouchStart(e) {\\n\\t\\tif (e.touches.length == 1) {\\n\\t\\t\\tstartPosX = e.touches[0].pageX;\\n\\t\\t\\tstartPosY = e.touches[0].pageY;\\n\\t\\t\\tisMoving = true;\\n\\t\\t\\tstartTime = new Date().getTime();\\n\\t\\t\\tthis.addEventListener('touchmove', onTouchMove, false);\\n\\t\\t\\tthis.addEventListener('touchend', onTouchEnd, false);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction init() {\\n\\t\\tthis.addEventListener && this.addEventListener('touchstart', onTouchStart, false);\\n\\t}\\n\\n\\tfunction teardown() {\\n\\t\\tthis.removeEventListener('touchstart', onTouchStart);\\n\\t}\\n\\n\\t$.event.special.swipe = { setup: init };\\n\\n\\t$.each(['left', 'up', 'down', 'right'], function () {\\n\\t\\t$.event.special['swipe' + this] = { setup: function () {\\n\\t\\t\\t\\t$(this).on('swipe', $.noop);\\n\\t\\t\\t} };\\n\\t});\\n})(jQuery);\\n/****************************************************\\n * Method for adding psuedo drag events to elements *\\n ***************************************************/\\n!function ($) {\\n\\t$.fn.addTouch = function () {\\n\\t\\tthis.each(function (i, el) {\\n\\t\\t\\t$(el).bind('touchstart touchmove touchend touchcancel', function () {\\n\\t\\t\\t\\t//we pass the original event object because the jQuery event\\n\\t\\t\\t\\t//object is normalized to w3c specs and does not provide the TouchList\\n\\t\\t\\t\\thandleTouch(event);\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\tvar handleTouch = function (event) {\\n\\t\\t\\tvar touches = event.changedTouches,\\n\\t\\t\\t    first = touches[0],\\n\\t\\t\\t    eventTypes = {\\n\\t\\t\\t\\ttouchstart: 'mousedown',\\n\\t\\t\\t\\ttouchmove: 'mousemove',\\n\\t\\t\\t\\ttouchend: 'mouseup'\\n\\t\\t\\t},\\n\\t\\t\\t    type = eventTypes[event.type],\\n\\t\\t\\t    simulatedEvent;\\n\\n\\t\\t\\tif ('MouseEvent' in window && typeof window.MouseEvent === 'function') {\\n\\t\\t\\t\\tsimulatedEvent = new window.MouseEvent(type, {\\n\\t\\t\\t\\t\\t'bubbles': true,\\n\\t\\t\\t\\t\\t'cancelable': true,\\n\\t\\t\\t\\t\\t'screenX': first.screenX,\\n\\t\\t\\t\\t\\t'screenY': first.screenY,\\n\\t\\t\\t\\t\\t'clientX': first.clientX,\\n\\t\\t\\t\\t\\t'clientY': first.clientY\\n\\t\\t\\t\\t});\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tsimulatedEvent = document.createEvent('MouseEvent');\\n\\t\\t\\t\\tsimulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);\\n\\t\\t\\t}\\n\\t\\t\\tfirst.target.dispatchEvent(simulatedEvent);\\n\\t\\t};\\n\\t};\\n}(jQuery);\\n\\n//**********************************\\n//**From the jQuery Mobile Library**\\n//**need to recreate functionality**\\n//**and try to improve if possible**\\n//**********************************\\n\\n/* Removing the jQuery function ****\\n************************************\\n\\n(function( $, window, undefined ) {\\n\\n\\tvar $document = $( document ),\\n\\t\\t// supportTouch = $.mobile.support.touch,\\n\\t\\ttouchStartEvent = 'touchstart'//supportTouch ? \\\"touchstart\\\" : \\\"mousedown\\\",\\n\\t\\ttouchStopEvent = 'touchend'//supportTouch ? \\\"touchend\\\" : \\\"mouseup\\\",\\n\\t\\ttouchMoveEvent = 'touchmove'//supportTouch ? \\\"touchmove\\\" : \\\"mousemove\\\";\\n\\n\\t// setup new event shortcuts\\n\\t$.each( ( \\\"touchstart touchmove touchend \\\" +\\n\\t\\t\\\"swipe swipeleft swiperight\\\" ).split( \\\" \\\" ), function( i, name ) {\\n\\n\\t\\t$.fn[ name ] = function( fn ) {\\n\\t\\t\\treturn fn ? this.bind( name, fn ) : this.trigger( name );\\n\\t\\t};\\n\\n\\t\\t// jQuery < 1.8\\n\\t\\tif ( $.attrFn ) {\\n\\t\\t\\t$.attrFn[ name ] = true;\\n\\t\\t}\\n\\t});\\n\\n\\tfunction triggerCustomEvent( obj, eventType, event, bubble ) {\\n\\t\\tvar originalType = event.type;\\n\\t\\tevent.type = eventType;\\n\\t\\tif ( bubble ) {\\n\\t\\t\\t$.event.trigger( event, undefined, obj );\\n\\t\\t} else {\\n\\t\\t\\t$.event.dispatch.call( obj, event );\\n\\t\\t}\\n\\t\\tevent.type = originalType;\\n\\t}\\n\\n\\t// also handles taphold\\n\\n\\t// Also handles swipeleft, swiperight\\n\\t$.event.special.swipe = {\\n\\n\\t\\t// More than this horizontal displacement, and we will suppress scrolling.\\n\\t\\tscrollSupressionThreshold: 30,\\n\\n\\t\\t// More time than this, and it isn't a swipe.\\n\\t\\tdurationThreshold: 1000,\\n\\n\\t\\t// Swipe horizontal displacement must be more than this.\\n\\t\\thorizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,\\n\\n\\t\\t// Swipe vertical displacement must be less than this.\\n\\t\\tverticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,\\n\\n\\t\\tgetLocation: function ( event ) {\\n\\t\\t\\tvar winPageX = window.pageXOffset,\\n\\t\\t\\t\\twinPageY = window.pageYOffset,\\n\\t\\t\\t\\tx = event.clientX,\\n\\t\\t\\t\\ty = event.clientY;\\n\\n\\t\\t\\tif ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||\\n\\t\\t\\t\\tevent.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {\\n\\n\\t\\t\\t\\t// iOS4 clientX/clientY have the value that should have been\\n\\t\\t\\t\\t// in pageX/pageY. While pageX/page/ have the value 0\\n\\t\\t\\t\\tx = x - winPageX;\\n\\t\\t\\t\\ty = y - winPageY;\\n\\t\\t\\t} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {\\n\\n\\t\\t\\t\\t// Some Android browsers have totally bogus values for clientX/Y\\n\\t\\t\\t\\t// when scrolling/zooming a page. Detectable since clientX/clientY\\n\\t\\t\\t\\t// should never be smaller than pageX/pageY minus page scroll\\n\\t\\t\\t\\tx = event.pageX - winPageX;\\n\\t\\t\\t\\ty = event.pageY - winPageY;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tx: x,\\n\\t\\t\\t\\ty: y\\n\\t\\t\\t};\\n\\t\\t},\\n\\n\\t\\tstart: function( event ) {\\n\\t\\t\\tvar data = event.originalEvent.touches ?\\n\\t\\t\\t\\t\\tevent.originalEvent.touches[ 0 ] : event,\\n\\t\\t\\t\\tlocation = $.event.special.swipe.getLocation( data );\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t\\ttime: ( new Date() ).getTime(),\\n\\t\\t\\t\\t\\t\\tcoords: [ location.x, location.y ],\\n\\t\\t\\t\\t\\t\\torigin: $( event.target )\\n\\t\\t\\t\\t\\t};\\n\\t\\t},\\n\\n\\t\\tstop: function( event ) {\\n\\t\\t\\tvar data = event.originalEvent.touches ?\\n\\t\\t\\t\\t\\tevent.originalEvent.touches[ 0 ] : event,\\n\\t\\t\\t\\tlocation = $.event.special.swipe.getLocation( data );\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t\\ttime: ( new Date() ).getTime(),\\n\\t\\t\\t\\t\\t\\tcoords: [ location.x, location.y ]\\n\\t\\t\\t\\t\\t};\\n\\t\\t},\\n\\n\\t\\thandleSwipe: function( start, stop, thisObject, origTarget ) {\\n\\t\\t\\tif ( stop.time - start.time < $.event.special.swipe.durationThreshold &&\\n\\t\\t\\t\\tMath.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&\\n\\t\\t\\t\\tMath.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {\\n\\t\\t\\t\\tvar direction = start.coords[0] > stop.coords[ 0 ] ? \\\"swipeleft\\\" : \\\"swiperight\\\";\\n\\n\\t\\t\\t\\ttriggerCustomEvent( thisObject, \\\"swipe\\\", $.Event( \\\"swipe\\\", { target: origTarget, swipestart: start, swipestop: stop }), true );\\n\\t\\t\\t\\ttriggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\n\\t\\t},\\n\\n\\t\\t// This serves as a flag to ensure that at most one swipe event event is\\n\\t\\t// in work at any given time\\n\\t\\teventInProgress: false,\\n\\n\\t\\tsetup: function() {\\n\\t\\t\\tvar events,\\n\\t\\t\\t\\tthisObject = this,\\n\\t\\t\\t\\t$this = $( thisObject ),\\n\\t\\t\\t\\tcontext = {};\\n\\n\\t\\t\\t// Retrieve the events data for this element and add the swipe context\\n\\t\\t\\tevents = $.data( this, \\\"mobile-events\\\" );\\n\\t\\t\\tif ( !events ) {\\n\\t\\t\\t\\tevents = { length: 0 };\\n\\t\\t\\t\\t$.data( this, \\\"mobile-events\\\", events );\\n\\t\\t\\t}\\n\\t\\t\\tevents.length++;\\n\\t\\t\\tevents.swipe = context;\\n\\n\\t\\t\\tcontext.start = function( event ) {\\n\\n\\t\\t\\t\\t// Bail if we're already working on a swipe event\\n\\t\\t\\t\\tif ( $.event.special.swipe.eventInProgress ) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t$.event.special.swipe.eventInProgress = true;\\n\\n\\t\\t\\t\\tvar stop,\\n\\t\\t\\t\\t\\tstart = $.event.special.swipe.start( event ),\\n\\t\\t\\t\\t\\torigTarget = event.target,\\n\\t\\t\\t\\t\\temitted = false;\\n\\n\\t\\t\\t\\tcontext.move = function( event ) {\\n\\t\\t\\t\\t\\tif ( !start || event.isDefaultPrevented() ) {\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tstop = $.event.special.swipe.stop( event );\\n\\t\\t\\t\\t\\tif ( !emitted ) {\\n\\t\\t\\t\\t\\t\\temitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );\\n\\t\\t\\t\\t\\t\\tif ( emitted ) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Reset the context to make way for the next swipe event\\n\\t\\t\\t\\t\\t\\t\\t$.event.special.swipe.eventInProgress = false;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t// prevent scrolling\\n\\t\\t\\t\\t\\tif ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {\\n\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\tcontext.stop = function() {\\n\\t\\t\\t\\t\\t\\temitted = true;\\n\\n\\t\\t\\t\\t\\t\\t// Reset the context to make way for the next swipe event\\n\\t\\t\\t\\t\\t\\t$.event.special.swipe.eventInProgress = false;\\n\\t\\t\\t\\t\\t\\t$document.off( touchMoveEvent, context.move );\\n\\t\\t\\t\\t\\t\\tcontext.move = null;\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\t$document.on( touchMoveEvent, context.move )\\n\\t\\t\\t\\t\\t.one( touchStopEvent, context.stop );\\n\\t\\t\\t};\\n\\t\\t\\t$this.on( touchStartEvent, context.start );\\n\\t\\t},\\n\\n\\t\\tteardown: function() {\\n\\t\\t\\tvar events, context;\\n\\n\\t\\t\\tevents = $.data( this, \\\"mobile-events\\\" );\\n\\t\\t\\tif ( events ) {\\n\\t\\t\\t\\tcontext = events.swipe;\\n\\t\\t\\t\\tdelete events.swipe;\\n\\t\\t\\t\\tevents.length--;\\n\\t\\t\\t\\tif ( events.length === 0 ) {\\n\\t\\t\\t\\t\\t$.removeData( this, \\\"mobile-events\\\" );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( context ) {\\n\\t\\t\\t\\tif ( context.start ) {\\n\\t\\t\\t\\t\\t$( this ).off( touchStartEvent, context.start );\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ( context.move ) {\\n\\t\\t\\t\\t\\t$document.off( touchMoveEvent, context.move );\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ( context.stop ) {\\n\\t\\t\\t\\t\\t$document.off( touchStopEvent, context.stop );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\t$.each({\\n\\t\\tswipeleft: \\\"swipe.left\\\",\\n\\t\\tswiperight: \\\"swipe.right\\\"\\n\\t}, function( event, sourceEvent ) {\\n\\n\\t\\t$.event.special[ event ] = {\\n\\t\\t\\tsetup: function() {\\n\\t\\t\\t\\t$( this ).bind( sourceEvent, $.noop );\\n\\t\\t\\t},\\n\\t\\t\\tteardown: function() {\\n\\t\\t\\t\\t$( this ).unbind( sourceEvent );\\n\\t\\t\\t}\\n\\t\\t};\\n\\t});\\n})( jQuery, this );\\n*/\\n'use strict';\\n\\n!function ($) {\\n\\n  var MutationObserver = function () {\\n    var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];\\n    for (var i = 0; i < prefixes.length; i++) {\\n      if (prefixes[i] + 'MutationObserver' in window) {\\n        return window[prefixes[i] + 'MutationObserver'];\\n      }\\n    }\\n    return false;\\n  }();\\n\\n  var triggers = function (el, type) {\\n    el.data(type).split(' ').forEach(function (id) {\\n      $('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);\\n    });\\n  };\\n  // Elements with [data-open] will reveal a plugin that supports it when clicked.\\n  $(document).on('click.zf.trigger', '[data-open]', function () {\\n    triggers($(this), 'open');\\n  });\\n\\n  // Elements with [data-close] will close a plugin that supports it when clicked.\\n  // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.\\n  $(document).on('click.zf.trigger', '[data-close]', function () {\\n    var id = $(this).data('close');\\n    if (id) {\\n      triggers($(this), 'close');\\n    } else {\\n      $(this).trigger('close.zf.trigger');\\n    }\\n  });\\n\\n  // Elements with [data-toggle] will toggle a plugin that supports it when clicked.\\n  $(document).on('click.zf.trigger', '[data-toggle]', function () {\\n    triggers($(this), 'toggle');\\n  });\\n\\n  // Elements with [data-closable] will respond to close.zf.trigger events.\\n  $(document).on('close.zf.trigger', '[data-closable]', function (e) {\\n    e.stopPropagation();\\n    var animation = $(this).data('closable');\\n\\n    if (animation !== '') {\\n      Foundation.Motion.animateOut($(this), animation, function () {\\n        $(this).trigger('closed.zf');\\n      });\\n    } else {\\n      $(this).fadeOut().trigger('closed.zf');\\n    }\\n  });\\n\\n  $(document).on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', function () {\\n    var id = $(this).data('toggle-focus');\\n    $('#' + id).triggerHandler('toggle.zf.trigger', [$(this)]);\\n  });\\n\\n  /**\\n  * Fires once after all other scripts have loaded\\n  * @function\\n  * @private\\n  */\\n  $(window).load(function () {\\n    checkListeners();\\n  });\\n\\n  function checkListeners() {\\n    eventsListener();\\n    resizeListener();\\n    scrollListener();\\n    closemeListener();\\n  }\\n\\n  //******** only fires this function once on load, if there's something to watch ********\\n  function closemeListener(pluginName) {\\n    var yetiBoxes = $('[data-yeti-box]'),\\n        plugNames = ['dropdown', 'tooltip', 'reveal'];\\n\\n    if (pluginName) {\\n      if (typeof pluginName === 'string') {\\n        plugNames.push(pluginName);\\n      } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {\\n        plugNames.concat(pluginName);\\n      } else {\\n        console.error('Plugin names must be strings');\\n      }\\n    }\\n    if (yetiBoxes.length) {\\n      var listeners = plugNames.map(function (name) {\\n        return 'closeme.zf.' + name;\\n      }).join(' ');\\n\\n      $(window).off(listeners).on(listeners, function (e, pluginId) {\\n        var plugin = e.namespace.split('.')[0];\\n        var plugins = $('[data-' + plugin + ']').not('[data-yeti-box=\\\"' + pluginId + '\\\"]');\\n\\n        plugins.each(function () {\\n          var _this = $(this);\\n\\n          _this.triggerHandler('close.zf.trigger', [_this]);\\n        });\\n      });\\n    }\\n  }\\n\\n  function resizeListener(debounce) {\\n    var timer = void 0,\\n        $nodes = $('[data-resize]');\\n    if ($nodes.length) {\\n      $(window).off('resize.zf.trigger').on('resize.zf.trigger', function (e) {\\n        if (timer) {\\n          clearTimeout(timer);\\n        }\\n\\n        timer = setTimeout(function () {\\n\\n          if (!MutationObserver) {\\n            //fallback for IE 9\\n            $nodes.each(function () {\\n              $(this).triggerHandler('resizeme.zf.trigger');\\n            });\\n          }\\n          //trigger all listening elements and signal a resize event\\n          $nodes.attr('data-events', \\\"resize\\\");\\n        }, debounce || 10); //default time to emit resize event\\n      });\\n    }\\n  }\\n\\n  function scrollListener(debounce) {\\n    var timer = void 0,\\n        $nodes = $('[data-scroll]');\\n    if ($nodes.length) {\\n      $(window).off('scroll.zf.trigger').on('scroll.zf.trigger', function (e) {\\n        if (timer) {\\n          clearTimeout(timer);\\n        }\\n\\n        timer = setTimeout(function () {\\n\\n          if (!MutationObserver) {\\n            //fallback for IE 9\\n            $nodes.each(function () {\\n              $(this).triggerHandler('scrollme.zf.trigger');\\n            });\\n          }\\n          //trigger all listening elements and signal a scroll event\\n          $nodes.attr('data-events', \\\"scroll\\\");\\n        }, debounce || 10); //default time to emit scroll event\\n      });\\n    }\\n  }\\n\\n  function eventsListener() {\\n    if (!MutationObserver) {\\n      return false;\\n    }\\n    var nodes = document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');\\n\\n    //element callback\\n    var listeningElementsMutation = function (mutationRecordsList) {\\n      var $target = $(mutationRecordsList[0].target);\\n      //trigger the event handler for the element depending on type\\n      switch ($target.attr(\\\"data-events\\\")) {\\n\\n        case \\\"resize\\\":\\n          $target.triggerHandler('resizeme.zf.trigger', [$target]);\\n          break;\\n\\n        case \\\"scroll\\\":\\n          $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);\\n          break;\\n\\n        // case \\\"mutate\\\" :\\n        // console.log('mutate', $target);\\n        // $target.triggerHandler('mutate.zf.trigger');\\n        //\\n        // //make sure we don't get stuck in an infinite loop from sloppy codeing\\n        // if ($target.index('[data-mutate]') == $(\\\"[data-mutate]\\\").length-1) {\\n        //   domMutationObserver();\\n        // }\\n        // break;\\n\\n        default:\\n          return false;\\n        //nothing\\n      }\\n    };\\n\\n    if (nodes.length) {\\n      //for each element that needs to listen for resizing, scrolling, (or coming soon mutation) add a single observer\\n      for (var i = 0; i <= nodes.length - 1; i++) {\\n        var elementObserver = new MutationObserver(listeningElementsMutation);\\n        elementObserver.observe(nodes[i], { attributes: true, childList: false, characterData: false, subtree: false, attributeFilter: [\\\"data-events\\\"] });\\n      }\\n    }\\n  }\\n\\n  // ------------------------------------\\n\\n  // [PH]\\n  // Foundation.CheckWatchers = checkWatchers;\\n  Foundation.IHearYou = checkListeners;\\n  // Foundation.ISeeYou = scrollListener;\\n  // Foundation.IFeelYou = closemeListener;\\n}(jQuery);\\n\\n// function domMutationObserver(debounce) {\\n//   // !!! This is coming soon and needs more work; not active  !!! //\\n//   var timer,\\n//   nodes = document.querySelectorAll('[data-mutate]');\\n//   //\\n//   if (nodes.length) {\\n//     // var MutationObserver = (function () {\\n//     //   var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];\\n//     //   for (var i=0; i < prefixes.length; i++) {\\n//     //     if (prefixes[i] + 'MutationObserver' in window) {\\n//     //       return window[prefixes[i] + 'MutationObserver'];\\n//     //     }\\n//     //   }\\n//     //   return false;\\n//     // }());\\n//\\n//\\n//     //for the body, we need to listen for all changes effecting the style and class attributes\\n//     var bodyObserver = new MutationObserver(bodyMutation);\\n//     bodyObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree:true, attributeFilter:[\\\"style\\\", \\\"class\\\"]});\\n//\\n//\\n//     //body callback\\n//     function bodyMutation(mutate) {\\n//       //trigger all listening elements and signal a mutation event\\n//       if (timer) { clearTimeout(timer); }\\n//\\n//       timer = setTimeout(function() {\\n//         bodyObserver.disconnect();\\n//         $('[data-mutate]').attr('data-events',\\\"mutate\\\");\\n//       }, debounce || 150);\\n//     }\\n//   }\\n// }\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * Abide module.\\n   * @module foundation.abide\\n   */\\n\\n  var Abide = function () {\\n    /**\\n     * Creates a new instance of Abide.\\n     * @class\\n     * @fires Abide#init\\n     * @param {Object} element - jQuery object to add the trigger to.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n\\n    function Abide(element) {\\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\\n\\n      _classCallCheck(this, Abide);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, Abide.defaults, this.$element.data(), options);\\n\\n      this._init();\\n\\n      Foundation.registerPlugin(this, 'Abide');\\n    }\\n\\n    /**\\n     * Initializes the Abide plugin and calls functions to get Abide functioning on load.\\n     * @private\\n     */\\n\\n\\n    _createClass(Abide, [{\\n      key: '_init',\\n      value: function _init() {\\n        this.$inputs = this.$element.find('input, textarea, select');\\n\\n        this._events();\\n      }\\n\\n      /**\\n       * Initializes events for Abide.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events() {\\n        var _this2 = this;\\n\\n        this.$element.off('.abide').on('reset.zf.abide', function () {\\n          _this2.resetForm();\\n        }).on('submit.zf.abide', function () {\\n          return _this2.validateForm();\\n        });\\n\\n        if (this.options.validateOn === 'fieldChange') {\\n          this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {\\n            _this2.validateInput($(e.target));\\n          });\\n        }\\n\\n        if (this.options.liveValidate) {\\n          this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {\\n            _this2.validateInput($(e.target));\\n          });\\n        }\\n      }\\n\\n      /**\\n       * Calls necessary functions to update Abide upon DOM change\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_reflow',\\n      value: function _reflow() {\\n        this._init();\\n      }\\n\\n      /**\\n       * Checks whether or not a form element has the required attribute and if it's checked or not\\n       * @param {Object} element - jQuery object to check for required attribute\\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\\n       */\\n\\n    }, {\\n      key: 'requiredCheck',\\n      value: function requiredCheck($el) {\\n        if (!$el.attr('required')) return true;\\n\\n        var isGood = true;\\n\\n        switch ($el[0].type) {\\n          case 'checkbox':\\n            isGood = $el[0].checked;\\n            break;\\n\\n          case 'select':\\n          case 'select-one':\\n          case 'select-multiple':\\n            var opt = $el.find('option:selected');\\n            if (!opt.length || !opt.val()) isGood = false;\\n            break;\\n\\n          default:\\n            if (!$el.val() || !$el.val().length) isGood = false;\\n        }\\n\\n        return isGood;\\n      }\\n\\n      /**\\n       * Based on $el, get the first element with selector in this order:\\n       * 1. The element's direct sibling('s).\\n       * 3. The element's parent's children.\\n       *\\n       * This allows for multiple form errors per input, though if none are found, no form errors will be shown.\\n       *\\n       * @param {Object} $el - jQuery object to use as reference to find the form error selector.\\n       * @returns {Object} jQuery object with the selector.\\n       */\\n\\n    }, {\\n      key: 'findFormError',\\n      value: function findFormError($el) {\\n        var $error = $el.siblings(this.options.formErrorSelector);\\n\\n        if (!$error.length) {\\n          $error = $el.parent().find(this.options.formErrorSelector);\\n        }\\n\\n        return $error;\\n      }\\n\\n      /**\\n       * Get the first element in this order:\\n       * 2. The <label> with the attribute `[for=\\\"someInputId\\\"]`\\n       * 3. The `.closest()` <label>\\n       *\\n       * @param {Object} $el - jQuery object to check for required attribute\\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\\n       */\\n\\n    }, {\\n      key: 'findLabel',\\n      value: function findLabel($el) {\\n        var id = $el[0].id;\\n        var $label = this.$element.find('label[for=\\\"' + id + '\\\"]');\\n\\n        if (!$label.length) {\\n          return $el.closest('label');\\n        }\\n\\n        return $label;\\n      }\\n\\n      /**\\n       * Get the set of labels associated with a set of radio els in this order\\n       * 2. The <label> with the attribute `[for=\\\"someInputId\\\"]`\\n       * 3. The `.closest()` <label>\\n       *\\n       * @param {Object} $el - jQuery object to check for required attribute\\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\\n       */\\n\\n    }, {\\n      key: 'findRadioLabels',\\n      value: function findRadioLabels($els) {\\n        var _this3 = this;\\n\\n        var labels = $els.map(function (i, el) {\\n          var id = el.id;\\n          var $label = _this3.$element.find('label[for=\\\"' + id + '\\\"]');\\n\\n          if (!$label.length) {\\n            $label = $(el).closest('label');\\n          }\\n          return $label[0];\\n        });\\n\\n        return $(labels);\\n      }\\n\\n      /**\\n       * Adds the CSS error class as specified by the Abide settings to the label, input, and the form\\n       * @param {Object} $el - jQuery object to add the class to\\n       */\\n\\n    }, {\\n      key: 'addErrorClasses',\\n      value: function addErrorClasses($el) {\\n        var $label = this.findLabel($el);\\n        var $formError = this.findFormError($el);\\n\\n        if ($label.length) {\\n          $label.addClass(this.options.labelErrorClass);\\n        }\\n\\n        if ($formError.length) {\\n          $formError.addClass(this.options.formErrorClass);\\n        }\\n\\n        $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');\\n      }\\n\\n      /**\\n       * Remove CSS error classes etc from an entire radio button group\\n       * @param {String} groupName - A string that specifies the name of a radio button group\\n       *\\n       */\\n\\n    }, {\\n      key: 'removeRadioErrorClasses',\\n      value: function removeRadioErrorClasses(groupName) {\\n        var $els = this.$element.find(':radio[name=\\\"' + groupName + '\\\"]');\\n        var $labels = this.findRadioLabels($els);\\n        var $formErrors = this.findFormError($els);\\n\\n        if ($labels.length) {\\n          $labels.removeClass(this.options.labelErrorClass);\\n        }\\n\\n        if ($formErrors.length) {\\n          $formErrors.removeClass(this.options.formErrorClass);\\n        }\\n\\n        $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\\n      }\\n\\n      /**\\n       * Removes CSS error class as specified by the Abide settings from the label, input, and the form\\n       * @param {Object} $el - jQuery object to remove the class from\\n       */\\n\\n    }, {\\n      key: 'removeErrorClasses',\\n      value: function removeErrorClasses($el) {\\n        // radios need to clear all of the els\\n        if ($el[0].type == 'radio') {\\n          return this.removeRadioErrorClasses($el.attr('name'));\\n        }\\n\\n        var $label = this.findLabel($el);\\n        var $formError = this.findFormError($el);\\n\\n        if ($label.length) {\\n          $label.removeClass(this.options.labelErrorClass);\\n        }\\n\\n        if ($formError.length) {\\n          $formError.removeClass(this.options.formErrorClass);\\n        }\\n\\n        $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\\n      }\\n\\n      /**\\n       * Goes through a form to find inputs and proceeds to validate them in ways specific to their type\\n       * @fires Abide#invalid\\n       * @fires Abide#valid\\n       * @param {Object} element - jQuery object to validate, should be an HTML input\\n       * @returns {Boolean} goodToGo - If the input is valid or not.\\n       */\\n\\n    }, {\\n      key: 'validateInput',\\n      value: function validateInput($el) {\\n        var clearRequire = this.requiredCheck($el),\\n            validated = false,\\n            customValidator = true,\\n            validator = $el.attr('data-validator'),\\n            equalTo = true;\\n\\n        // don't validate ignored inputs or hidden inputs\\n        if ($el.is('[data-abide-ignore]') || $el.is('[type=\\\"hidden\\\"]')) {\\n          return true;\\n        }\\n\\n        switch ($el[0].type) {\\n          case 'radio':\\n            validated = this.validateRadio($el.attr('name'));\\n            break;\\n\\n          case 'checkbox':\\n            validated = clearRequire;\\n            break;\\n\\n          case 'select':\\n          case 'select-one':\\n          case 'select-multiple':\\n            validated = clearRequire;\\n            break;\\n\\n          default:\\n            validated = this.validateText($el);\\n        }\\n\\n        if (validator) {\\n          customValidator = this.matchValidation($el, validator, $el.attr('required'));\\n        }\\n\\n        if ($el.attr('data-equalto')) {\\n          equalTo = this.options.validators.equalTo($el);\\n        }\\n\\n        var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;\\n        var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';\\n\\n        this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);\\n\\n        /**\\n         * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`\\n         * Trigger includes the DOM element of the input.\\n         * @event Abide#valid\\n         * @event Abide#invalid\\n         */\\n        $el.trigger(message, [$el]);\\n\\n        return goodToGo;\\n      }\\n\\n      /**\\n       * Goes through a form and if there are any invalid inputs, it will display the form error element\\n       * @returns {Boolean} noError - true if no errors were detected...\\n       * @fires Abide#formvalid\\n       * @fires Abide#forminvalid\\n       */\\n\\n    }, {\\n      key: 'validateForm',\\n      value: function validateForm() {\\n        var acc = [];\\n        var _this = this;\\n\\n        this.$inputs.each(function () {\\n          acc.push(_this.validateInput($(this)));\\n        });\\n\\n        var noError = acc.indexOf(false) === -1;\\n\\n        this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');\\n\\n        /**\\n         * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.\\n         * Trigger includes the element of the form.\\n         * @event Abide#formvalid\\n         * @event Abide#forminvalid\\n         */\\n        this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);\\n\\n        return noError;\\n      }\\n\\n      /**\\n       * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.\\n       * @param {Object} $el - jQuery object to validate, should be a text input HTML element\\n       * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns\\n       * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified\\n       */\\n\\n    }, {\\n      key: 'validateText',\\n      value: function validateText($el, pattern) {\\n        // A pattern can be passed to this function, or it will be infered from the input's \\\"pattern\\\" attribute, or it's \\\"type\\\" attribute\\n        pattern = pattern || $el.attr('pattern') || $el.attr('type');\\n        var inputText = $el.val();\\n        var valid = false;\\n\\n        if (inputText.length) {\\n          // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp\\n          if (this.options.patterns.hasOwnProperty(pattern)) {\\n            valid = this.options.patterns[pattern].test(inputText);\\n          }\\n          // If the pattern name isn't also the type attribute of the field, then test it as a regexp\\n          else if (pattern !== $el.attr('type')) {\\n              valid = new RegExp(pattern).test(inputText);\\n            } else {\\n              valid = true;\\n            }\\n        }\\n        // An empty field is valid if it's not required\\n        else if (!$el.prop('required')) {\\n            valid = true;\\n          }\\n\\n        return valid;\\n      }\\n\\n      /**\\n       * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.\\n       * @param {String} groupName - A string that specifies the name of a radio button group\\n       * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)\\n       */\\n\\n    }, {\\n      key: 'validateRadio',\\n      value: function validateRadio(groupName) {\\n        // If at least one radio in the group has the `required` attribute, the group is considered required\\n        // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice\\n        var $group = this.$element.find(':radio[name=\\\"' + groupName + '\\\"]');\\n        var valid = false,\\n            required = false;\\n\\n        // For the group to be required, at least one radio needs to be required\\n        $group.each(function (i, e) {\\n          if ($(e).attr('required')) {\\n            required = true;\\n          }\\n        });\\n        if (!required) valid = true;\\n\\n        if (!valid) {\\n          // For the group to be valid, at least one radio needs to be checked\\n          $group.each(function (i, e) {\\n            if ($(e).prop('checked')) {\\n              valid = true;\\n            }\\n          });\\n        };\\n\\n        return valid;\\n      }\\n\\n      /**\\n       * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator=\\\"foo bar baz\\\"` in a space separated listed.\\n       * @param {Object} $el - jQuery input element.\\n       * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.\\n       * @param {Boolean} required - self explanatory?\\n       * @returns {Boolean} - true if validations passed.\\n       */\\n\\n    }, {\\n      key: 'matchValidation',\\n      value: function matchValidation($el, validators, required) {\\n        var _this4 = this;\\n\\n        required = required ? true : false;\\n\\n        var clear = validators.split(' ').map(function (v) {\\n          return _this4.options.validators[v]($el, required, $el.parent());\\n        });\\n        return clear.indexOf(false) === -1;\\n      }\\n\\n      /**\\n       * Resets form inputs and styles\\n       * @fires Abide#formreset\\n       */\\n\\n    }, {\\n      key: 'resetForm',\\n      value: function resetForm() {\\n        var $form = this.$element,\\n            opts = this.options;\\n\\n        $('.' + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);\\n        $('.' + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);\\n        $(opts.formErrorSelector + '.' + opts.formErrorClass).removeClass(opts.formErrorClass);\\n        $form.find('[data-abide-error]').css('display', 'none');\\n        $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');\\n        $(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');\\n        $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');\\n        /**\\n         * Fires when the form has been reset.\\n         * @event Abide#formreset\\n         */\\n        $form.trigger('formreset.zf.abide', [$form]);\\n      }\\n\\n      /**\\n       * Destroys an instance of Abide.\\n       * Removes error styles and classes from elements, without resetting their values.\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        var _this = this;\\n        this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');\\n\\n        this.$inputs.off('.abide').each(function () {\\n          _this.removeErrorClasses($(this));\\n        });\\n\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return Abide;\\n  }();\\n\\n  /**\\n   * Default settings for plugin\\n   */\\n\\n\\n  Abide.defaults = {\\n    /**\\n     * The default event to validate inputs. Checkboxes and radios validate immediately.\\n     * Remove or change this value for manual validation.\\n     * @option\\n     * @example 'fieldChange'\\n     */\\n    validateOn: 'fieldChange',\\n\\n    /**\\n     * Class to be applied to input labels on failed validation.\\n     * @option\\n     * @example 'is-invalid-label'\\n     */\\n    labelErrorClass: 'is-invalid-label',\\n\\n    /**\\n     * Class to be applied to inputs on failed validation.\\n     * @option\\n     * @example 'is-invalid-input'\\n     */\\n    inputErrorClass: 'is-invalid-input',\\n\\n    /**\\n     * Class selector to use to target Form Errors for show/hide.\\n     * @option\\n     * @example '.form-error'\\n     */\\n    formErrorSelector: '.form-error',\\n\\n    /**\\n     * Class added to Form Errors on failed validation.\\n     * @option\\n     * @example 'is-visible'\\n     */\\n    formErrorClass: 'is-visible',\\n\\n    /**\\n     * Set to true to validate text inputs on any value change.\\n     * @option\\n     * @example false\\n     */\\n    liveValidate: false,\\n\\n    patterns: {\\n      alpha: /^[a-zA-Z]+$/,\\n      alpha_numeric: /^[a-zA-Z0-9]+$/,\\n      integer: /^[-+]?\\\\d+$/,\\n      number: /^[-+]?\\\\d*(?:[\\\\.\\\\,]\\\\d+)?$/,\\n\\n      // amex, visa, diners\\n      card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\\\d{3})\\\\d{11})$/,\\n      cvv: /^([0-9]){3,4}$/,\\n\\n      // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address\\n      email: /^[a-zA-Z0-9.!#$%&'*+\\\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,\\n\\n      url: /^(https?|ftp|file|ssh):\\\\/\\\\/(((([a-zA-Z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(%[\\\\da-f]{2})|[!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]|:)*@)?(((\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5]))|((([a-zA-Z]|\\\\d|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(([a-zA-Z]|\\\\d|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])([a-zA-Z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])*([a-zA-Z]|\\\\d|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])))\\\\.)+(([a-zA-Z]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(([a-zA-Z]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])([a-zA-Z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])*([a-zA-Z]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])))\\\\.?)(:\\\\d*)?)(\\\\/((([a-zA-Z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(%[\\\\da-f]{2})|[!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]|:|@)+(\\\\/(([a-zA-Z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(%[\\\\da-f]{2})|[!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]|:|@)*)*)?)?(\\\\?((([a-zA-Z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(%[\\\\da-f]{2})|[!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]|:|@)|[\\\\uE000-\\\\uF8FF]|\\\\/|\\\\?)*)?(\\\\#((([a-zA-Z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(%[\\\\da-f]{2})|[!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]|:|@)|\\\\/|\\\\?)*)?$/,\\n      // abc.de\\n      domain: /^([a-zA-Z0-9]([a-zA-Z0-9\\\\-]{0,61}[a-zA-Z0-9])?\\\\.)+[a-zA-Z]{2,8}$/,\\n\\n      datetime: /^([0-2][0-9]{3})\\\\-([0-1][0-9])\\\\-([0-3][0-9])T([0-5][0-9])\\\\:([0-5][0-9])\\\\:([0-5][0-9])(Z|([\\\\-\\\\+]([0-1][0-9])\\\\:00))$/,\\n      // YYYY-MM-DD\\n      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,\\n      // HH:MM:SS\\n      time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,\\n      dateISO: /^\\\\d{4}[\\\\/\\\\-]\\\\d{1,2}[\\\\/\\\\-]\\\\d{1,2}$/,\\n      // MM/DD/YYYY\\n      month_day_year: /^(0[1-9]|1[012])[- \\\\/.](0[1-9]|[12][0-9]|3[01])[- \\\\/.]\\\\d{4}$/,\\n      // DD/MM/YYYY\\n      day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \\\\/.](0[1-9]|1[012])[- \\\\/.]\\\\d{4}$/,\\n\\n      // #FFF or #FFFFFF\\n      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/\\n    },\\n\\n    /**\\n     * Optional validation functions to be used. `equalTo` being the only default included function.\\n     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:\\n     * el : The jQuery element to validate.\\n     * required : Boolean value of the required attribute be present or not.\\n     * parent : The direct parent of the input.\\n     * @option\\n     */\\n    validators: {\\n      equalTo: function (el, required, parent) {\\n        return $('#' + el.attr('data-equalto')).val() === el.val();\\n      }\\n    }\\n  };\\n\\n  // Window exports\\n  Foundation.plugin(Abide, 'Abide');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * Accordion module.\\n   * @module foundation.accordion\\n   * @requires foundation.util.keyboard\\n   * @requires foundation.util.motion\\n   */\\n\\n  var Accordion = function () {\\n    /**\\n     * Creates a new instance of an accordion.\\n     * @class\\n     * @fires Accordion#init\\n     * @param {jQuery} element - jQuery object to make into an accordion.\\n     * @param {Object} options - a plain object with settings to override the default options.\\n     */\\n\\n    function Accordion(element, options) {\\n      _classCallCheck(this, Accordion);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, Accordion.defaults, this.$element.data(), options);\\n\\n      this._init();\\n\\n      Foundation.registerPlugin(this, 'Accordion');\\n      Foundation.Keyboard.register('Accordion', {\\n        'ENTER': 'toggle',\\n        'SPACE': 'toggle',\\n        'ARROW_DOWN': 'next',\\n        'ARROW_UP': 'previous'\\n      });\\n    }\\n\\n    /**\\n     * Initializes the accordion by animating the preset active pane(s).\\n     * @private\\n     */\\n\\n\\n    _createClass(Accordion, [{\\n      key: '_init',\\n      value: function _init() {\\n        this.$element.attr('role', 'tablist');\\n        this.$tabs = this.$element.children('li, [data-accordion-item]');\\n\\n        this.$tabs.each(function (idx, el) {\\n          var $el = $(el),\\n              $content = $el.children('[data-tab-content]'),\\n              id = $content[0].id || Foundation.GetYoDigits(6, 'accordion'),\\n              linkId = el.id || id + '-label';\\n\\n          $el.find('a:first').attr({\\n            'aria-controls': id,\\n            'role': 'tab',\\n            'id': linkId,\\n            'aria-expanded': false,\\n            'aria-selected': false\\n          });\\n\\n          $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });\\n        });\\n        var $initActive = this.$element.find('.is-active').children('[data-tab-content]');\\n        if ($initActive.length) {\\n          this.down($initActive, true);\\n        }\\n        this._events();\\n      }\\n\\n      /**\\n       * Adds event handlers for items within the accordion.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events() {\\n        var _this = this;\\n\\n        this.$tabs.each(function () {\\n          var $elem = $(this);\\n          var $tabContent = $elem.children('[data-tab-content]');\\n          if ($tabContent.length) {\\n            $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {\\n              // $(this).children('a').on('click.zf.accordion', function(e) {\\n              e.preventDefault();\\n              if ($elem.hasClass('is-active')) {\\n                if (_this.options.allowAllClosed || $elem.siblings().hasClass('is-active')) {\\n                  _this.up($tabContent);\\n                }\\n              } else {\\n                _this.down($tabContent);\\n              }\\n            }).on('keydown.zf.accordion', function (e) {\\n              Foundation.Keyboard.handleKey(e, 'Accordion', {\\n                toggle: function () {\\n                  _this.toggle($tabContent);\\n                },\\n                next: function () {\\n                  var $a = $elem.next().find('a').focus();\\n                  if (!_this.options.multiExpand) {\\n                    $a.trigger('click.zf.accordion');\\n                  }\\n                },\\n                previous: function () {\\n                  var $a = $elem.prev().find('a').focus();\\n                  if (!_this.options.multiExpand) {\\n                    $a.trigger('click.zf.accordion');\\n                  }\\n                },\\n                handled: function () {\\n                  e.preventDefault();\\n                  e.stopPropagation();\\n                }\\n              });\\n            });\\n          }\\n        });\\n      }\\n\\n      /**\\n       * Toggles the selected content pane's open/close state.\\n       * @param {jQuery} $target - jQuery object of the pane to toggle.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'toggle',\\n      value: function toggle($target) {\\n        if ($target.parent().hasClass('is-active')) {\\n          if (this.options.allowAllClosed || $target.parent().siblings().hasClass('is-active')) {\\n            this.up($target);\\n          } else {\\n            return;\\n          }\\n        } else {\\n          this.down($target);\\n        }\\n      }\\n\\n      /**\\n       * Opens the accordion tab defined by `$target`.\\n       * @param {jQuery} $target - Accordion pane to open.\\n       * @param {Boolean} firstTime - flag to determine if reflow should happen.\\n       * @fires Accordion#down\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'down',\\n      value: function down($target, firstTime) {\\n        var _this2 = this;\\n\\n        if (!this.options.multiExpand && !firstTime) {\\n          var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');\\n          if ($currentActive.length) {\\n            this.up($currentActive);\\n          }\\n        }\\n\\n        $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');\\n\\n        $target.slideDown(this.options.slideSpeed, function () {\\n          /**\\n           * Fires when the tab is done opening.\\n           * @event Accordion#down\\n           */\\n          _this2.$element.trigger('down.zf.accordion', [$target]);\\n        });\\n\\n        $('#' + $target.attr('aria-labelledby')).attr({\\n          'aria-expanded': true,\\n          'aria-selected': true\\n        });\\n      }\\n\\n      /**\\n       * Closes the tab defined by `$target`.\\n       * @param {jQuery} $target - Accordion tab to close.\\n       * @fires Accordion#up\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'up',\\n      value: function up($target) {\\n        var $aunts = $target.parent().siblings(),\\n            _this = this;\\n        var canClose = this.options.multiExpand ? $aunts.hasClass('is-active') : $target.parent().hasClass('is-active');\\n\\n        if (!this.options.allowAllClosed && !canClose) {\\n          return;\\n        }\\n\\n        // Foundation.Move(this.options.slideSpeed, $target, function(){\\n        $target.slideUp(_this.options.slideSpeed, function () {\\n          /**\\n           * Fires when the tab is done collapsing up.\\n           * @event Accordion#up\\n           */\\n          _this.$element.trigger('up.zf.accordion', [$target]);\\n        });\\n        // });\\n\\n        $target.attr('aria-hidden', true).parent().removeClass('is-active');\\n\\n        $('#' + $target.attr('aria-labelledby')).attr({\\n          'aria-expanded': false,\\n          'aria-selected': false\\n        });\\n      }\\n\\n      /**\\n       * Destroys an instance of an accordion.\\n       * @fires Accordion#destroyed\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');\\n        this.$element.find('a').off('.zf.accordion');\\n\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return Accordion;\\n  }();\\n\\n  Accordion.defaults = {\\n    /**\\n     * Amount of time to animate the opening of an accordion pane.\\n     * @option\\n     * @example 250\\n     */\\n    slideSpeed: 250,\\n    /**\\n     * Allow the accordion to have multiple open panes.\\n     * @option\\n     * @example false\\n     */\\n    multiExpand: false,\\n    /**\\n     * Allow the accordion to close all panes.\\n     * @option\\n     * @example false\\n     */\\n    allowAllClosed: false\\n  };\\n\\n  // Window exports\\n  Foundation.plugin(Accordion, 'Accordion');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * AccordionMenu module.\\n   * @module foundation.accordionMenu\\n   * @requires foundation.util.keyboard\\n   * @requires foundation.util.motion\\n   * @requires foundation.util.nest\\n   */\\n\\n  var AccordionMenu = function () {\\n    /**\\n     * Creates a new instance of an accordion menu.\\n     * @class\\n     * @fires AccordionMenu#init\\n     * @param {jQuery} element - jQuery object to make into an accordion menu.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n\\n    function AccordionMenu(element, options) {\\n      _classCallCheck(this, AccordionMenu);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, AccordionMenu.defaults, this.$element.data(), options);\\n\\n      Foundation.Nest.Feather(this.$element, 'accordion');\\n\\n      this._init();\\n\\n      Foundation.registerPlugin(this, 'AccordionMenu');\\n      Foundation.Keyboard.register('AccordionMenu', {\\n        'ENTER': 'toggle',\\n        'SPACE': 'toggle',\\n        'ARROW_RIGHT': 'open',\\n        'ARROW_UP': 'up',\\n        'ARROW_DOWN': 'down',\\n        'ARROW_LEFT': 'close',\\n        'ESCAPE': 'closeAll',\\n        'TAB': 'down',\\n        'SHIFT_TAB': 'up'\\n      });\\n    }\\n\\n    /**\\n     * Initializes the accordion menu by hiding all nested menus.\\n     * @private\\n     */\\n\\n\\n    _createClass(AccordionMenu, [{\\n      key: '_init',\\n      value: function _init() {\\n        this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');\\n        this.$element.attr({\\n          'role': 'tablist',\\n          'aria-multiselectable': this.options.multiOpen\\n        });\\n\\n        this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');\\n        this.$menuLinks.each(function () {\\n          var linkId = this.id || Foundation.GetYoDigits(6, 'acc-menu-link'),\\n              $elem = $(this),\\n              $sub = $elem.children('[data-submenu]'),\\n              subId = $sub[0].id || Foundation.GetYoDigits(6, 'acc-menu'),\\n              isActive = $sub.hasClass('is-active');\\n          $elem.attr({\\n            'aria-controls': subId,\\n            'aria-expanded': isActive,\\n            'role': 'tab',\\n            'id': linkId\\n          });\\n          $sub.attr({\\n            'aria-labelledby': linkId,\\n            'aria-hidden': !isActive,\\n            'role': 'tabpanel',\\n            'id': subId\\n          });\\n        });\\n        var initPanes = this.$element.find('.is-active');\\n        if (initPanes.length) {\\n          var _this = this;\\n          initPanes.each(function () {\\n            _this.down($(this));\\n          });\\n        }\\n        this._events();\\n      }\\n\\n      /**\\n       * Adds event handlers for items within the menu.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events() {\\n        var _this = this;\\n\\n        this.$element.find('li').each(function () {\\n          var $submenu = $(this).children('[data-submenu]');\\n\\n          if ($submenu.length) {\\n            $(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {\\n              e.preventDefault();\\n\\n              _this.toggle($submenu);\\n            });\\n          }\\n        }).on('keydown.zf.accordionmenu', function (e) {\\n          var $element = $(this),\\n              $elements = $element.parent('ul').children('li'),\\n              $prevElement,\\n              $nextElement,\\n              $target = $element.children('[data-submenu]');\\n\\n          $elements.each(function (i) {\\n            if ($(this).is($element)) {\\n              $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();\\n              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();\\n\\n              if ($(this).children('[data-submenu]:visible').length) {\\n                // has open sub menu\\n                $nextElement = $element.find('li:first-child').find('a').first();\\n              }\\n              if ($(this).is(':first-child')) {\\n                // is first element of sub menu\\n                $prevElement = $element.parents('li').first().find('a').first();\\n              } else if ($prevElement.children('[data-submenu]:visible').length) {\\n                // if previous element has open sub menu\\n                $prevElement = $prevElement.find('li:last-child').find('a').first();\\n              }\\n              if ($(this).is(':last-child')) {\\n                // is last element of sub menu\\n                $nextElement = $element.parents('li').first().next('li').find('a').first();\\n              }\\n\\n              return;\\n            }\\n          });\\n          Foundation.Keyboard.handleKey(e, 'AccordionMenu', {\\n            open: function () {\\n              if ($target.is(':hidden')) {\\n                _this.down($target);\\n                $target.find('li').first().find('a').first().focus();\\n              }\\n            },\\n            close: function () {\\n              if ($target.length && !$target.is(':hidden')) {\\n                // close active sub of this item\\n                _this.up($target);\\n              } else if ($element.parent('[data-submenu]').length) {\\n                // close currently open sub\\n                _this.up($element.parent('[data-submenu]'));\\n                $element.parents('li').first().find('a').first().focus();\\n              }\\n            },\\n            up: function () {\\n              $prevElement.attr('tabindex', -1).focus();\\n              return true;\\n            },\\n            down: function () {\\n              $nextElement.attr('tabindex', -1).focus();\\n              return true;\\n            },\\n            toggle: function () {\\n              if ($element.children('[data-submenu]').length) {\\n                _this.toggle($element.children('[data-submenu]'));\\n              }\\n            },\\n            closeAll: function () {\\n              _this.hideAll();\\n            },\\n            handled: function (preventDefault) {\\n              if (preventDefault) {\\n                e.preventDefault();\\n              }\\n              e.stopImmediatePropagation();\\n            }\\n          });\\n        }); //.attr('tabindex', 0);\\n      }\\n\\n      /**\\n       * Closes all panes of the menu.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'hideAll',\\n      value: function hideAll() {\\n        this.$element.find('[data-submenu]').slideUp(this.options.slideSpeed);\\n      }\\n\\n      /**\\n       * Toggles the open/close state of a submenu.\\n       * @function\\n       * @param {jQuery} $target - the submenu to toggle\\n       */\\n\\n    }, {\\n      key: 'toggle',\\n      value: function toggle($target) {\\n        if (!$target.is(':animated')) {\\n          if (!$target.is(':hidden')) {\\n            this.up($target);\\n          } else {\\n            this.down($target);\\n          }\\n        }\\n      }\\n\\n      /**\\n       * Opens the sub-menu defined by `$target`.\\n       * @param {jQuery} $target - Sub-menu to open.\\n       * @fires AccordionMenu#down\\n       */\\n\\n    }, {\\n      key: 'down',\\n      value: function down($target) {\\n        var _this = this;\\n\\n        if (!this.options.multiOpen) {\\n          this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));\\n        }\\n\\n        $target.addClass('is-active').attr({ 'aria-hidden': false }).parent('.is-accordion-submenu-parent').attr({ 'aria-expanded': true });\\n\\n        //Foundation.Move(this.options.slideSpeed, $target, function() {\\n        $target.slideDown(_this.options.slideSpeed, function () {\\n          /**\\n           * Fires when the menu is done opening.\\n           * @event AccordionMenu#down\\n           */\\n          _this.$element.trigger('down.zf.accordionMenu', [$target]);\\n        });\\n        //});\\n      }\\n\\n      /**\\n       * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.\\n       * @param {jQuery} $target - Sub-menu to close.\\n       * @fires AccordionMenu#up\\n       */\\n\\n    }, {\\n      key: 'up',\\n      value: function up($target) {\\n        var _this = this;\\n        //Foundation.Move(this.options.slideSpeed, $target, function(){\\n        $target.slideUp(_this.options.slideSpeed, function () {\\n          /**\\n           * Fires when the menu is done collapsing up.\\n           * @event AccordionMenu#up\\n           */\\n          _this.$element.trigger('up.zf.accordionMenu', [$target]);\\n        });\\n        //});\\n\\n        var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);\\n\\n        $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);\\n      }\\n\\n      /**\\n       * Destroys an instance of accordion menu.\\n       * @fires AccordionMenu#destroyed\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this.$element.find('[data-submenu]').slideDown(0).css('display', '');\\n        this.$element.find('a').off('click.zf.accordionMenu');\\n\\n        Foundation.Nest.Burn(this.$element, 'accordion');\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return AccordionMenu;\\n  }();\\n\\n  AccordionMenu.defaults = {\\n    /**\\n     * Amount of time to animate the opening of a submenu in ms.\\n     * @option\\n     * @example 250\\n     */\\n    slideSpeed: 250,\\n    /**\\n     * Allow the menu to have multiple open panes.\\n     * @option\\n     * @example true\\n     */\\n    multiOpen: true\\n  };\\n\\n  // Window exports\\n  Foundation.plugin(AccordionMenu, 'AccordionMenu');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * Drilldown module.\\n   * @module foundation.drilldown\\n   * @requires foundation.util.keyboard\\n   * @requires foundation.util.motion\\n   * @requires foundation.util.nest\\n   */\\n\\n  var Drilldown = function () {\\n    /**\\n     * Creates a new instance of a drilldown menu.\\n     * @class\\n     * @param {jQuery} element - jQuery object to make into an accordion menu.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n\\n    function Drilldown(element, options) {\\n      _classCallCheck(this, Drilldown);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, Drilldown.defaults, this.$element.data(), options);\\n\\n      Foundation.Nest.Feather(this.$element, 'drilldown');\\n\\n      this._init();\\n\\n      Foundation.registerPlugin(this, 'Drilldown');\\n      Foundation.Keyboard.register('Drilldown', {\\n        'ENTER': 'open',\\n        'SPACE': 'open',\\n        'ARROW_RIGHT': 'next',\\n        'ARROW_UP': 'up',\\n        'ARROW_DOWN': 'down',\\n        'ARROW_LEFT': 'previous',\\n        'ESCAPE': 'close',\\n        'TAB': 'down',\\n        'SHIFT_TAB': 'up'\\n      });\\n    }\\n\\n    /**\\n     * Initializes the drilldown by creating jQuery collections of elements\\n     * @private\\n     */\\n\\n\\n    _createClass(Drilldown, [{\\n      key: '_init',\\n      value: function _init() {\\n        this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');\\n        this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]');\\n        this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'menuitem').find('a');\\n\\n        this._prepareMenu();\\n\\n        this._keyboardEvents();\\n      }\\n\\n      /**\\n       * prepares drilldown menu by setting attributes to links and elements\\n       * sets a min height to prevent content jumping\\n       * wraps the element if not already wrapped\\n       * @private\\n       * @function\\n       */\\n\\n    }, {\\n      key: '_prepareMenu',\\n      value: function _prepareMenu() {\\n        var _this = this;\\n        // if(!this.options.holdOpen){\\n        //   this._menuLinkEvents();\\n        // }\\n        this.$submenuAnchors.each(function () {\\n          var $link = $(this);\\n          var $sub = $link.parent();\\n          if (_this.options.parentLink) {\\n            $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class=\\\"is-submenu-parent-item is-submenu-item is-drilldown-submenu-item\\\" role=\\\"menu-item\\\"></li>');\\n          }\\n          $link.data('savedHref', $link.attr('href')).removeAttr('href');\\n          $link.children('[data-submenu]').attr({\\n            'aria-hidden': true,\\n            'tabindex': 0,\\n            'role': 'menu'\\n          });\\n          _this._events($link);\\n        });\\n        this.$submenus.each(function () {\\n          var $menu = $(this),\\n              $back = $menu.find('.js-drilldown-back');\\n          if (!$back.length) {\\n            $menu.prepend(_this.options.backButton);\\n          }\\n          _this._back($menu);\\n        });\\n        if (!this.$element.parent().hasClass('is-drilldown')) {\\n          this.$wrapper = $(this.options.wrapper).addClass('is-drilldown');\\n          this.$wrapper = this.$element.wrap(this.$wrapper).parent().css(this._getMaxDims());\\n        }\\n      }\\n\\n      /**\\n       * Adds event handlers to elements in the menu.\\n       * @function\\n       * @private\\n       * @param {jQuery} $elem - the current menu item to add handlers to.\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events($elem) {\\n        var _this = this;\\n\\n        $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {\\n          if ($(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {\\n            e.stopImmediatePropagation();\\n            e.preventDefault();\\n          }\\n\\n          // if(e.target !== e.currentTarget.firstElementChild){\\n          //   return false;\\n          // }\\n          _this._show($elem.parent('li'));\\n\\n          if (_this.options.closeOnClick) {\\n            var $body = $('body');\\n            $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {\\n              if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {\\n                return;\\n              }\\n              e.preventDefault();\\n              _this._hideAll();\\n              $body.off('.zf.drilldown');\\n            });\\n          }\\n        });\\n      }\\n\\n      /**\\n       * Adds keydown event listener to `li`'s in the menu.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_keyboardEvents',\\n      value: function _keyboardEvents() {\\n        var _this = this;\\n\\n        this.$menuItems.add(this.$element.find('.js-drilldown-back > a')).on('keydown.zf.drilldown', function (e) {\\n\\n          var $element = $(this),\\n              $elements = $element.parent('li').parent('ul').children('li').children('a'),\\n              $prevElement,\\n              $nextElement;\\n\\n          $elements.each(function (i) {\\n            if ($(this).is($element)) {\\n              $prevElement = $elements.eq(Math.max(0, i - 1));\\n              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));\\n              return;\\n            }\\n          });\\n\\n          Foundation.Keyboard.handleKey(e, 'Drilldown', {\\n            next: function () {\\n              if ($element.is(_this.$submenuAnchors)) {\\n                _this._show($element.parent('li'));\\n                $element.parent('li').one(Foundation.transitionend($element), function () {\\n                  $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();\\n                });\\n                return true;\\n              }\\n            },\\n            previous: function () {\\n              _this._hide($element.parent('li').parent('ul'));\\n              $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {\\n                setTimeout(function () {\\n                  $element.parent('li').parent('ul').parent('li').children('a').first().focus();\\n                }, 1);\\n              });\\n              return true;\\n            },\\n            up: function () {\\n              $prevElement.focus();\\n              return true;\\n            },\\n            down: function () {\\n              $nextElement.focus();\\n              return true;\\n            },\\n            close: function () {\\n              _this._back();\\n              //_this.$menuItems.first().focus(); // focus to first element\\n            },\\n            open: function () {\\n              if (!$element.is(_this.$menuItems)) {\\n                // not menu item means back button\\n                _this._hide($element.parent('li').parent('ul'));\\n                $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {\\n                  setTimeout(function () {\\n                    $element.parent('li').parent('ul').parent('li').children('a').first().focus();\\n                  }, 1);\\n                });\\n              } else if ($element.is(_this.$submenuAnchors)) {\\n                _this._show($element.parent('li'));\\n                $element.parent('li').one(Foundation.transitionend($element), function () {\\n                  $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();\\n                });\\n              }\\n              return true;\\n            },\\n            handled: function (preventDefault) {\\n              if (preventDefault) {\\n                e.preventDefault();\\n              }\\n              e.stopImmediatePropagation();\\n            }\\n          });\\n        }); // end keyboardAccess\\n      }\\n\\n      /**\\n       * Closes all open elements, and returns to root menu.\\n       * @function\\n       * @fires Drilldown#closed\\n       */\\n\\n    }, {\\n      key: '_hideAll',\\n      value: function _hideAll() {\\n        var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');\\n        $elem.one(Foundation.transitionend($elem), function (e) {\\n          $elem.removeClass('is-active is-closing');\\n        });\\n        /**\\n         * Fires when the menu is fully closed.\\n         * @event Drilldown#closed\\n         */\\n        this.$element.trigger('closed.zf.drilldown');\\n      }\\n\\n      /**\\n       * Adds event listener for each `back` button, and closes open menus.\\n       * @function\\n       * @fires Drilldown#back\\n       * @param {jQuery} $elem - the current sub-menu to add `back` event.\\n       */\\n\\n    }, {\\n      key: '_back',\\n      value: function _back($elem) {\\n        var _this = this;\\n        $elem.off('click.zf.drilldown');\\n        $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {\\n          e.stopImmediatePropagation();\\n          // console.log('mouseup on back');\\n          _this._hide($elem);\\n        });\\n      }\\n\\n      /**\\n       * Adds event listener to menu items w/o submenus to close open menus on click.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_menuLinkEvents',\\n      value: function _menuLinkEvents() {\\n        var _this = this;\\n        this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {\\n          // e.stopImmediatePropagation();\\n          setTimeout(function () {\\n            _this._hideAll();\\n          }, 0);\\n        });\\n      }\\n\\n      /**\\n       * Opens a submenu.\\n       * @function\\n       * @fires Drilldown#open\\n       * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.\\n       */\\n\\n    }, {\\n      key: '_show',\\n      value: function _show($elem) {\\n        $elem.children('[data-submenu]').addClass('is-active');\\n        /**\\n         * Fires when the submenu has opened.\\n         * @event Drilldown#open\\n         */\\n        this.$element.trigger('open.zf.drilldown', [$elem]);\\n      }\\n    }, {\\n      key: '_hide',\\n\\n\\n      /**\\n       * Hides a submenu\\n       * @function\\n       * @fires Drilldown#hide\\n       * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.\\n       */\\n      value: function _hide($elem) {\\n        var _this = this;\\n        $elem.addClass('is-closing').one(Foundation.transitionend($elem), function () {\\n          $elem.removeClass('is-active is-closing');\\n          $elem.blur();\\n        });\\n        /**\\n         * Fires when the submenu has closed.\\n         * @event Drilldown#hide\\n         */\\n        $elem.trigger('hide.zf.drilldown', [$elem]);\\n      }\\n\\n      /**\\n       * Iterates through the nested menus to calculate the min-height, and max-width for the menu.\\n       * Prevents content jumping.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_getMaxDims',\\n      value: function _getMaxDims() {\\n        var max = 0,\\n            result = {};\\n        this.$submenus.add(this.$element).each(function () {\\n          var numOfElems = $(this).children('li').length;\\n          max = numOfElems > max ? numOfElems : max;\\n        });\\n\\n        result['min-height'] = max * this.$menuItems[0].getBoundingClientRect().height + 'px';\\n        result['max-width'] = this.$element[0].getBoundingClientRect().width + 'px';\\n\\n        return result;\\n      }\\n\\n      /**\\n       * Destroys the Drilldown Menu\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this._hideAll();\\n        Foundation.Nest.Burn(this.$element, 'drilldown');\\n        this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');\\n        this.$submenuAnchors.each(function () {\\n          $(this).off('.zf.drilldown');\\n        });\\n        this.$element.find('a').each(function () {\\n          var $link = $(this);\\n          if ($link.data('savedHref')) {\\n            $link.attr('href', $link.data('savedHref')).removeData('savedHref');\\n          } else {\\n            return;\\n          }\\n        });\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return Drilldown;\\n  }();\\n\\n  Drilldown.defaults = {\\n    /**\\n     * Markup used for JS generated back button. Prepended to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\\\\`) if copy and pasting.\\n     * @option\\n     * @example '<\\\\li><\\\\a>Back<\\\\/a><\\\\/li>'\\n     */\\n    backButton: '<li class=\\\"js-drilldown-back\\\"><a tabindex=\\\"0\\\">Back</a></li>',\\n    /**\\n     * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\\\\`) if copy and pasting.\\n     * @option\\n     * @example '<\\\\div class=\\\"is-drilldown\\\"><\\\\/div>'\\n     */\\n    wrapper: '<div></div>',\\n    /**\\n     * Adds the parent link to the submenu.\\n     * @option\\n     * @example false\\n     */\\n    parentLink: false,\\n    /**\\n     * Allow the menu to return to root list on body click.\\n     * @option\\n     * @example false\\n     */\\n    closeOnClick: false\\n    // holdOpen: false\\n  };\\n\\n  // Window exports\\n  Foundation.plugin(Drilldown, 'Drilldown');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * Dropdown module.\\n   * @module foundation.dropdown\\n   * @requires foundation.util.keyboard\\n   * @requires foundation.util.box\\n   * @requires foundation.util.triggers\\n   */\\n\\n  var Dropdown = function () {\\n    /**\\n     * Creates a new instance of a dropdown.\\n     * @class\\n     * @param {jQuery} element - jQuery object to make into a dropdown.\\n     *        Object should be of the dropdown panel, rather than its anchor.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n\\n    function Dropdown(element, options) {\\n      _classCallCheck(this, Dropdown);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, Dropdown.defaults, this.$element.data(), options);\\n      this._init();\\n\\n      Foundation.registerPlugin(this, 'Dropdown');\\n      Foundation.Keyboard.register('Dropdown', {\\n        'ENTER': 'open',\\n        'SPACE': 'open',\\n        'ESCAPE': 'close',\\n        'TAB': 'tab_forward',\\n        'SHIFT_TAB': 'tab_backward'\\n      });\\n    }\\n\\n    /**\\n     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.\\n     * @function\\n     * @private\\n     */\\n\\n\\n    _createClass(Dropdown, [{\\n      key: '_init',\\n      value: function _init() {\\n        var $id = this.$element.attr('id');\\n\\n        this.$anchor = $('[data-toggle=\\\"' + $id + '\\\"]') || $('[data-open=\\\"' + $id + '\\\"]');\\n        this.$anchor.attr({\\n          'aria-controls': $id,\\n          'data-is-focus': false,\\n          'data-yeti-box': $id,\\n          'aria-haspopup': true,\\n          'aria-expanded': false\\n\\n        });\\n\\n        this.options.positionClass = this.getPositionClass();\\n        this.counter = 4;\\n        this.usedPositions = [];\\n        this.$element.attr({\\n          'aria-hidden': 'true',\\n          'data-yeti-box': $id,\\n          'data-resize': $id,\\n          'aria-labelledby': this.$anchor[0].id || Foundation.GetYoDigits(6, 'dd-anchor')\\n        });\\n        this._events();\\n      }\\n\\n      /**\\n       * Helper function to determine current orientation of dropdown pane.\\n       * @function\\n       * @returns {String} position - string value of a position class.\\n       */\\n\\n    }, {\\n      key: 'getPositionClass',\\n      value: function getPositionClass() {\\n        var verticalPosition = this.$element[0].className.match(/(top|left|right|bottom)/g);\\n        verticalPosition = verticalPosition ? verticalPosition[0] : '';\\n        var horizontalPosition = /float-(\\\\S+)\\\\s/.exec(this.$anchor[0].className);\\n        horizontalPosition = horizontalPosition ? horizontalPosition[1] : '';\\n        var position = horizontalPosition ? horizontalPosition + ' ' + verticalPosition : verticalPosition;\\n        return position;\\n      }\\n\\n      /**\\n       * Adjusts the dropdown panes orientation by adding/removing positioning classes.\\n       * @function\\n       * @private\\n       * @param {String} position - position class to remove.\\n       */\\n\\n    }, {\\n      key: '_reposition',\\n      value: function _reposition(position) {\\n        this.usedPositions.push(position ? position : 'bottom');\\n        //default, try switching to opposite side\\n        if (!position && this.usedPositions.indexOf('top') < 0) {\\n          this.$element.addClass('top');\\n        } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {\\n          this.$element.removeClass(position);\\n        } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {\\n          this.$element.removeClass(position).addClass('right');\\n        } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {\\n          this.$element.removeClass(position).addClass('left');\\n        }\\n\\n        //if default change didn't work, try bottom or left first\\n        else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {\\n            this.$element.addClass('left');\\n          } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {\\n            this.$element.removeClass(position).addClass('left');\\n          } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {\\n            this.$element.removeClass(position);\\n          } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {\\n            this.$element.removeClass(position);\\n          }\\n          //if nothing cleared, set to bottom\\n          else {\\n              this.$element.removeClass(position);\\n            }\\n        this.classChanged = true;\\n        this.counter--;\\n      }\\n\\n      /**\\n       * Sets the position and orientation of the dropdown pane, checks for collisions.\\n       * Recursively calls itself if a collision is detected, with a new position class.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_setPosition',\\n      value: function _setPosition() {\\n        if (this.$anchor.attr('aria-expanded') === 'false') {\\n          return false;\\n        }\\n        var position = this.getPositionClass(),\\n            $eleDims = Foundation.Box.GetDimensions(this.$element),\\n            $anchorDims = Foundation.Box.GetDimensions(this.$anchor),\\n            _this = this,\\n            direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',\\n            param = direction === 'top' ? 'height' : 'width',\\n            offset = param === 'height' ? this.options.vOffset : this.options.hOffset;\\n\\n        if ($eleDims.width >= $eleDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.$element)) {\\n          this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({\\n            'width': $eleDims.windowDims.width - this.options.hOffset * 2,\\n            'height': 'auto'\\n          });\\n          this.classChanged = true;\\n          return false;\\n        }\\n\\n        this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, position, this.options.vOffset, this.options.hOffset));\\n\\n        while (!Foundation.Box.ImNotTouchingYou(this.$element, false, true) && this.counter) {\\n          this._reposition(position);\\n          this._setPosition();\\n        }\\n      }\\n\\n      /**\\n       * Adds event listeners to the element utilizing the triggers utility library.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events() {\\n        var _this = this;\\n        this.$element.on({\\n          'open.zf.trigger': this.open.bind(this),\\n          'close.zf.trigger': this.close.bind(this),\\n          'toggle.zf.trigger': this.toggle.bind(this),\\n          'resizeme.zf.trigger': this._setPosition.bind(this)\\n        });\\n\\n        if (this.options.hover) {\\n          this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {\\n            clearTimeout(_this.timeout);\\n            _this.timeout = setTimeout(function () {\\n              _this.open();\\n              _this.$anchor.data('hover', true);\\n            }, _this.options.hoverDelay);\\n          }).on('mouseleave.zf.dropdown', function () {\\n            clearTimeout(_this.timeout);\\n            _this.timeout = setTimeout(function () {\\n              _this.close();\\n              _this.$anchor.data('hover', false);\\n            }, _this.options.hoverDelay);\\n          });\\n          if (this.options.hoverPane) {\\n            this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {\\n              clearTimeout(_this.timeout);\\n            }).on('mouseleave.zf.dropdown', function () {\\n              clearTimeout(_this.timeout);\\n              _this.timeout = setTimeout(function () {\\n                _this.close();\\n                _this.$anchor.data('hover', false);\\n              }, _this.options.hoverDelay);\\n            });\\n          }\\n        }\\n        this.$anchor.add(this.$element).on('keydown.zf.dropdown', function (e) {\\n\\n          var $target = $(this),\\n              visibleFocusableElements = Foundation.Keyboard.findFocusable(_this.$element);\\n\\n          Foundation.Keyboard.handleKey(e, 'Dropdown', {\\n            tab_forward: function () {\\n              if (_this.$element.find(':focus').is(visibleFocusableElements.eq(-1))) {\\n                // left modal downwards, setting focus to first element\\n                if (_this.options.trapFocus) {\\n                  // if focus shall be trapped\\n                  visibleFocusableElements.eq(0).focus();\\n                  e.preventDefault();\\n                } else {\\n                  // if focus is not trapped, close dropdown on focus out\\n                  _this.close();\\n                }\\n              }\\n            },\\n            tab_backward: function () {\\n              if (_this.$element.find(':focus').is(visibleFocusableElements.eq(0)) || _this.$element.is(':focus')) {\\n                // left modal upwards, setting focus to last element\\n                if (_this.options.trapFocus) {\\n                  // if focus shall be trapped\\n                  visibleFocusableElements.eq(-1).focus();\\n                  e.preventDefault();\\n                } else {\\n                  // if focus is not trapped, close dropdown on focus out\\n                  _this.close();\\n                }\\n              }\\n            },\\n            open: function () {\\n              if ($target.is(_this.$anchor)) {\\n                _this.open();\\n                _this.$element.attr('tabindex', -1).focus();\\n                e.preventDefault();\\n              }\\n            },\\n            close: function () {\\n              _this.close();\\n              _this.$anchor.focus();\\n            }\\n          });\\n        });\\n      }\\n\\n      /**\\n       * Adds an event handler to the body to close any dropdowns on a click.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_addBodyHandler',\\n      value: function _addBodyHandler() {\\n        var $body = $(document.body).not(this.$element),\\n            _this = this;\\n        $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {\\n          if (_this.$anchor.is(e.target) || _this.$anchor.find(e.target).length) {\\n            return;\\n          }\\n          if (_this.$element.find(e.target).length) {\\n            return;\\n          }\\n          _this.close();\\n          $body.off('click.zf.dropdown');\\n        });\\n      }\\n\\n      /**\\n       * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.\\n       * @function\\n       * @fires Dropdown#closeme\\n       * @fires Dropdown#show\\n       */\\n\\n    }, {\\n      key: 'open',\\n      value: function open() {\\n        // var _this = this;\\n        /**\\n         * Fires to close other open dropdowns\\n         * @event Dropdown#closeme\\n         */\\n        this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));\\n        this.$anchor.addClass('hover').attr({ 'aria-expanded': true });\\n        // this.$element/*.show()*/;\\n        this._setPosition();\\n        this.$element.addClass('is-open').attr({ 'aria-hidden': false });\\n\\n        if (this.options.autoFocus) {\\n          var $focusable = Foundation.Keyboard.findFocusable(this.$element);\\n          if ($focusable.length) {\\n            $focusable.eq(0).focus();\\n          }\\n        }\\n\\n        if (this.options.closeOnClick) {\\n          this._addBodyHandler();\\n        }\\n\\n        /**\\n         * Fires once the dropdown is visible.\\n         * @event Dropdown#show\\n         */\\n        this.$element.trigger('show.zf.dropdown', [this.$element]);\\n      }\\n\\n      /**\\n       * Closes the open dropdown pane.\\n       * @function\\n       * @fires Dropdown#hide\\n       */\\n\\n    }, {\\n      key: 'close',\\n      value: function close() {\\n        if (!this.$element.hasClass('is-open')) {\\n          return false;\\n        }\\n        this.$element.removeClass('is-open').attr({ 'aria-hidden': true });\\n\\n        this.$anchor.removeClass('hover').attr('aria-expanded', false);\\n\\n        if (this.classChanged) {\\n          var curPositionClass = this.getPositionClass();\\n          if (curPositionClass) {\\n            this.$element.removeClass(curPositionClass);\\n          }\\n          this.$element.addClass(this.options.positionClass)\\n          /*.hide()*/.css({ height: '', width: '' });\\n          this.classChanged = false;\\n          this.counter = 4;\\n          this.usedPositions.length = 0;\\n        }\\n        this.$element.trigger('hide.zf.dropdown', [this.$element]);\\n      }\\n\\n      /**\\n       * Toggles the dropdown pane's visibility.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'toggle',\\n      value: function toggle() {\\n        if (this.$element.hasClass('is-open')) {\\n          if (this.$anchor.data('hover')) return;\\n          this.close();\\n        } else {\\n          this.open();\\n        }\\n      }\\n\\n      /**\\n       * Destroys the dropdown.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this.$element.off('.zf.trigger').hide();\\n        this.$anchor.off('.zf.dropdown');\\n\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return Dropdown;\\n  }();\\n\\n  Dropdown.defaults = {\\n    /**\\n     * Amount of time to delay opening a submenu on hover event.\\n     * @option\\n     * @example 250\\n     */\\n    hoverDelay: 250,\\n    /**\\n     * Allow submenus to open on hover events\\n     * @option\\n     * @example false\\n     */\\n    hover: false,\\n    /**\\n     * Don't close dropdown when hovering over dropdown pane\\n     * @option\\n     * @example true\\n     */\\n    hoverPane: false,\\n    /**\\n     * Number of pixels between the dropdown pane and the triggering element on open.\\n     * @option\\n     * @example 1\\n     */\\n    vOffset: 1,\\n    /**\\n     * Number of pixels between the dropdown pane and the triggering element on open.\\n     * @option\\n     * @example 1\\n     */\\n    hOffset: 1,\\n    /**\\n     * Class applied to adjust open position. JS will test and fill this in.\\n     * @option\\n     * @example 'top'\\n     */\\n    positionClass: '',\\n    /**\\n     * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.\\n     * @option\\n     * @example false\\n     */\\n    trapFocus: false,\\n    /**\\n     * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.\\n     * @option\\n     * @example true\\n     */\\n    autoFocus: false,\\n    /**\\n     * Allows a click on the body to close the dropdown.\\n     * @option\\n     * @example false\\n     */\\n    closeOnClick: false\\n  };\\n\\n  // Window exports\\n  Foundation.plugin(Dropdown, 'Dropdown');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * DropdownMenu module.\\n   * @module foundation.dropdown-menu\\n   * @requires foundation.util.keyboard\\n   * @requires foundation.util.box\\n   * @requires foundation.util.nest\\n   */\\n\\n  var DropdownMenu = function () {\\n    /**\\n     * Creates a new instance of DropdownMenu.\\n     * @class\\n     * @fires DropdownMenu#init\\n     * @param {jQuery} element - jQuery object to make into a dropdown menu.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n\\n    function DropdownMenu(element, options) {\\n      _classCallCheck(this, DropdownMenu);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, DropdownMenu.defaults, this.$element.data(), options);\\n\\n      Foundation.Nest.Feather(this.$element, 'dropdown');\\n      this._init();\\n\\n      Foundation.registerPlugin(this, 'DropdownMenu');\\n      Foundation.Keyboard.register('DropdownMenu', {\\n        'ENTER': 'open',\\n        'SPACE': 'open',\\n        'ARROW_RIGHT': 'next',\\n        'ARROW_UP': 'up',\\n        'ARROW_DOWN': 'down',\\n        'ARROW_LEFT': 'previous',\\n        'ESCAPE': 'close'\\n      });\\n    }\\n\\n    /**\\n     * Initializes the plugin, and calls _prepareMenu\\n     * @private\\n     * @function\\n     */\\n\\n\\n    _createClass(DropdownMenu, [{\\n      key: '_init',\\n      value: function _init() {\\n        var subs = this.$element.find('li.is-dropdown-submenu-parent');\\n        this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');\\n\\n        this.$menuItems = this.$element.find('[role=\\\"menuitem\\\"]');\\n        this.$tabs = this.$element.children('[role=\\\"menuitem\\\"]');\\n        this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);\\n\\n        if (this.$element.hasClass(this.options.rightClass) || this.options.alignment === 'right' || Foundation.rtl() || this.$element.parents('.top-bar-right').is('*')) {\\n          this.options.alignment = 'right';\\n          subs.addClass('opens-left');\\n        } else {\\n          subs.addClass('opens-right');\\n        }\\n        this.changed = false;\\n        this._events();\\n      }\\n    }, {\\n      key: '_events',\\n\\n      /**\\n       * Adds event listeners to elements within the menu\\n       * @private\\n       * @function\\n       */\\n      value: function _events() {\\n        var _this = this,\\n            hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',\\n            parClass = 'is-dropdown-submenu-parent';\\n\\n        // used for onClick and in the keyboard handlers\\n        var handleClickFn = function (e) {\\n          var $elem = $(e.target).parentsUntil('ul', '.' + parClass),\\n              hasSub = $elem.hasClass(parClass),\\n              hasClicked = $elem.attr('data-is-click') === 'true',\\n              $sub = $elem.children('.is-dropdown-submenu');\\n\\n          if (hasSub) {\\n            if (hasClicked) {\\n              if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {\\n                return;\\n              } else {\\n                e.stopImmediatePropagation();\\n                e.preventDefault();\\n                _this._hide($elem);\\n              }\\n            } else {\\n              e.preventDefault();\\n              e.stopImmediatePropagation();\\n              _this._show($elem.children('.is-dropdown-submenu'));\\n              $elem.add($elem.parentsUntil(_this.$element, '.' + parClass)).attr('data-is-click', true);\\n            }\\n          } else {\\n            return;\\n          }\\n        };\\n\\n        if (this.options.clickOpen || hasTouch) {\\n          this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);\\n        }\\n\\n        if (!this.options.disableHover) {\\n          this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {\\n            var $elem = $(this),\\n                hasSub = $elem.hasClass(parClass);\\n\\n            if (hasSub) {\\n              clearTimeout(_this.delay);\\n              _this.delay = setTimeout(function () {\\n                _this._show($elem.children('.is-dropdown-submenu'));\\n              }, _this.options.hoverDelay);\\n            }\\n          }).on('mouseleave.zf.dropdownmenu', function (e) {\\n            var $elem = $(this),\\n                hasSub = $elem.hasClass(parClass);\\n            if (hasSub && _this.options.autoclose) {\\n              if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {\\n                return false;\\n              }\\n\\n              clearTimeout(_this.delay);\\n              _this.delay = setTimeout(function () {\\n                _this._hide($elem);\\n              }, _this.options.closingTime);\\n            }\\n          });\\n        }\\n        this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {\\n          var $element = $(e.target).parentsUntil('ul', '[role=\\\"menuitem\\\"]'),\\n              isTab = _this.$tabs.index($element) > -1,\\n              $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),\\n              $prevElement,\\n              $nextElement;\\n\\n          $elements.each(function (i) {\\n            if ($(this).is($element)) {\\n              $prevElement = $elements.eq(i - 1);\\n              $nextElement = $elements.eq(i + 1);\\n              return;\\n            }\\n          });\\n\\n          var nextSibling = function () {\\n            if (!$element.is(':last-child')) {\\n              $nextElement.children('a:first').focus();\\n              e.preventDefault();\\n            }\\n          },\\n              prevSibling = function () {\\n            $prevElement.children('a:first').focus();\\n            e.preventDefault();\\n          },\\n              openSub = function () {\\n            var $sub = $element.children('ul.is-dropdown-submenu');\\n            if ($sub.length) {\\n              _this._show($sub);\\n              $element.find('li > a:first').focus();\\n              e.preventDefault();\\n            } else {\\n              return;\\n            }\\n          },\\n              closeSub = function () {\\n            //if ($element.is(':first-child')) {\\n            var close = $element.parent('ul').parent('li');\\n            close.children('a:first').focus();\\n            _this._hide(close);\\n            e.preventDefault();\\n            //}\\n          };\\n          var functions = {\\n            open: openSub,\\n            close: function () {\\n              _this._hide(_this.$element);\\n              _this.$menuItems.find('a:first').focus(); // focus to first element\\n              e.preventDefault();\\n            },\\n            handled: function () {\\n              e.stopImmediatePropagation();\\n            }\\n          };\\n\\n          if (isTab) {\\n            if (_this.$element.hasClass(_this.options.verticalClass)) {\\n              // vertical menu\\n              if (_this.options.alignment === 'left') {\\n                // left aligned\\n                $.extend(functions, {\\n                  down: nextSibling,\\n                  up: prevSibling,\\n                  next: openSub,\\n                  previous: closeSub\\n                });\\n              } else {\\n                // right aligned\\n                $.extend(functions, {\\n                  down: nextSibling,\\n                  up: prevSibling,\\n                  next: closeSub,\\n                  previous: openSub\\n                });\\n              }\\n            } else {\\n              // horizontal menu\\n              $.extend(functions, {\\n                next: nextSibling,\\n                previous: prevSibling,\\n                down: openSub,\\n                up: closeSub\\n              });\\n            }\\n          } else {\\n            // not tabs -> one sub\\n            if (_this.options.alignment === 'left') {\\n              // left aligned\\n              $.extend(functions, {\\n                next: openSub,\\n                previous: closeSub,\\n                down: nextSibling,\\n                up: prevSibling\\n              });\\n            } else {\\n              // right aligned\\n              $.extend(functions, {\\n                next: closeSub,\\n                previous: openSub,\\n                down: nextSibling,\\n                up: prevSibling\\n              });\\n            }\\n          }\\n          Foundation.Keyboard.handleKey(e, 'DropdownMenu', functions);\\n        });\\n      }\\n\\n      /**\\n       * Adds an event handler to the body to close any dropdowns on a click.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_addBodyHandler',\\n      value: function _addBodyHandler() {\\n        var $body = $(document.body),\\n            _this = this;\\n        $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {\\n          var $link = _this.$element.find(e.target);\\n          if ($link.length) {\\n            return;\\n          }\\n\\n          _this._hide();\\n          $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');\\n        });\\n      }\\n\\n      /**\\n       * Opens a dropdown pane, and checks for collisions first.\\n       * @param {jQuery} $sub - ul element that is a submenu to show\\n       * @function\\n       * @private\\n       * @fires DropdownMenu#show\\n       */\\n\\n    }, {\\n      key: '_show',\\n      value: function _show($sub) {\\n        var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {\\n          return $(el).find($sub).length > 0;\\n        }));\\n        var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');\\n        this._hide($sibs, idx);\\n        $sub.css('visibility', 'hidden').addClass('js-dropdown-active').attr({ 'aria-hidden': false }).parent('li.is-dropdown-submenu-parent').addClass('is-active').attr({ 'aria-expanded': true });\\n        var clear = Foundation.Box.ImNotTouchingYou($sub, null, true);\\n        if (!clear) {\\n          var oldClass = this.options.alignment === 'left' ? '-right' : '-left',\\n              $parentLi = $sub.parent('.is-dropdown-submenu-parent');\\n          $parentLi.removeClass('opens' + oldClass).addClass('opens-' + this.options.alignment);\\n          clear = Foundation.Box.ImNotTouchingYou($sub, null, true);\\n          if (!clear) {\\n            $parentLi.removeClass('opens-' + this.options.alignment).addClass('opens-inner');\\n          }\\n          this.changed = true;\\n        }\\n        $sub.css('visibility', '');\\n        if (this.options.closeOnClick) {\\n          this._addBodyHandler();\\n        }\\n        /**\\n         * Fires when the new dropdown pane is visible.\\n         * @event DropdownMenu#show\\n         */\\n        this.$element.trigger('show.zf.dropdownmenu', [$sub]);\\n      }\\n\\n      /**\\n       * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.\\n       * @function\\n       * @param {jQuery} $elem - element with a submenu to hide\\n       * @param {Number} idx - index of the $tabs collection to hide\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_hide',\\n      value: function _hide($elem, idx) {\\n        var $toClose;\\n        if ($elem && $elem.length) {\\n          $toClose = $elem;\\n        } else if (idx !== undefined) {\\n          $toClose = this.$tabs.not(function (i, el) {\\n            return i === idx;\\n          });\\n        } else {\\n          $toClose = this.$element;\\n        }\\n        var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;\\n\\n        if (somethingToClose) {\\n          $toClose.find('li.is-active').add($toClose).attr({\\n            'aria-expanded': false,\\n            'data-is-click': false\\n          }).removeClass('is-active');\\n\\n          $toClose.find('ul.js-dropdown-active').attr({\\n            'aria-hidden': true\\n          }).removeClass('js-dropdown-active');\\n\\n          if (this.changed || $toClose.find('opens-inner').length) {\\n            var oldClass = this.options.alignment === 'left' ? 'right' : 'left';\\n            $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass('opens-inner opens-' + this.options.alignment).addClass('opens-' + oldClass);\\n            this.changed = false;\\n          }\\n          /**\\n           * Fires when the open menus are closed.\\n           * @event DropdownMenu#hide\\n           */\\n          this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);\\n        }\\n      }\\n\\n      /**\\n       * Destroys the plugin.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');\\n        $(document.body).off('.zf.dropdownmenu');\\n        Foundation.Nest.Burn(this.$element, 'dropdown');\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return DropdownMenu;\\n  }();\\n\\n  /**\\n   * Default settings for plugin\\n   */\\n\\n\\n  DropdownMenu.defaults = {\\n    /**\\n     * Disallows hover events from opening submenus\\n     * @option\\n     * @example false\\n     */\\n    disableHover: false,\\n    /**\\n     * Allow a submenu to automatically close on a mouseleave event, if not clicked open.\\n     * @option\\n     * @example true\\n     */\\n    autoclose: true,\\n    /**\\n     * Amount of time to delay opening a submenu on hover event.\\n     * @option\\n     * @example 50\\n     */\\n    hoverDelay: 50,\\n    /**\\n     * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.\\n     * @option\\n     * @example true\\n     */\\n    clickOpen: false,\\n    /**\\n     * Amount of time to delay closing a submenu on a mouseleave event.\\n     * @option\\n     * @example 500\\n     */\\n\\n    closingTime: 500,\\n    /**\\n     * Position of the menu relative to what direction the submenus should open. Handled by JS.\\n     * @option\\n     * @example 'left'\\n     */\\n    alignment: 'left',\\n    /**\\n     * Allow clicks on the body to close any open submenus.\\n     * @option\\n     * @example true\\n     */\\n    closeOnClick: true,\\n    /**\\n     * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.\\n     * @option\\n     * @example 'vertical'\\n     */\\n    verticalClass: 'vertical',\\n    /**\\n     * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.\\n     * @option\\n     * @example 'align-right'\\n     */\\n    rightClass: 'align-right',\\n    /**\\n     * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.\\n     * @option\\n     * @example false\\n     */\\n    forceFollow: true\\n  };\\n\\n  // Window exports\\n  Foundation.plugin(DropdownMenu, 'DropdownMenu');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * Equalizer module.\\n   * @module foundation.equalizer\\n   */\\n\\n  var Equalizer = function () {\\n    /**\\n     * Creates a new instance of Equalizer.\\n     * @class\\n     * @fires Equalizer#init\\n     * @param {Object} element - jQuery object to add the trigger to.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n\\n    function Equalizer(element, options) {\\n      _classCallCheck(this, Equalizer);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);\\n\\n      this._init();\\n\\n      Foundation.registerPlugin(this, 'Equalizer');\\n    }\\n\\n    /**\\n     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.\\n     * @private\\n     */\\n\\n\\n    _createClass(Equalizer, [{\\n      key: '_init',\\n      value: function _init() {\\n        var eqId = this.$element.attr('data-equalizer') || '';\\n        var $watched = this.$element.find('[data-equalizer-watch=\\\"' + eqId + '\\\"]');\\n\\n        this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');\\n        this.$element.attr('data-resize', eqId || Foundation.GetYoDigits(6, 'eq'));\\n\\n        this.hasNested = this.$element.find('[data-equalizer]').length > 0;\\n        this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;\\n        this.isOn = false;\\n        this._bindHandler = {\\n          onResizeMeBound: this._onResizeMe.bind(this),\\n          onPostEqualizedBound: this._onPostEqualized.bind(this)\\n        };\\n\\n        var imgs = this.$element.find('img');\\n        var tooSmall;\\n        if (this.options.equalizeOn) {\\n          tooSmall = this._checkMQ();\\n          $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));\\n        } else {\\n          this._events();\\n        }\\n        if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {\\n          if (imgs.length) {\\n            Foundation.onImagesLoaded(imgs, this._reflow.bind(this));\\n          } else {\\n            this._reflow();\\n          }\\n        }\\n      }\\n\\n      /**\\n       * Removes event listeners if the breakpoint is too small.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_pauseEvents',\\n      value: function _pauseEvents() {\\n        this.isOn = false;\\n        this.$element.off({\\n          '.zf.equalizer': this._bindHandler.onPostEqualizedBound,\\n          'resizeme.zf.trigger': this._bindHandler.onResizeMeBound\\n        });\\n      }\\n\\n      /**\\n       * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_onResizeMe',\\n      value: function _onResizeMe(e) {\\n        this._reflow();\\n      }\\n\\n      /**\\n       * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_onPostEqualized',\\n      value: function _onPostEqualized(e) {\\n        if (e.target !== this.$element[0]) {\\n          this._reflow();\\n        }\\n      }\\n\\n      /**\\n       * Initializes events for Equalizer.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events() {\\n        var _this = this;\\n        this._pauseEvents();\\n        if (this.hasNested) {\\n          this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);\\n        } else {\\n          this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);\\n        }\\n        this.isOn = true;\\n      }\\n\\n      /**\\n       * Checks the current breakpoint to the minimum required size.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_checkMQ',\\n      value: function _checkMQ() {\\n        var tooSmall = !Foundation.MediaQuery.atLeast(this.options.equalizeOn);\\n        if (tooSmall) {\\n          if (this.isOn) {\\n            this._pauseEvents();\\n            this.$watched.css('height', 'auto');\\n          }\\n        } else {\\n          if (!this.isOn) {\\n            this._events();\\n          }\\n        }\\n        return tooSmall;\\n      }\\n\\n      /**\\n       * A noop version for the plugin\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_killswitch',\\n      value: function _killswitch() {\\n        return;\\n      }\\n\\n      /**\\n       * Calls necessary functions to update Equalizer upon DOM change\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_reflow',\\n      value: function _reflow() {\\n        if (!this.options.equalizeOnStack) {\\n          if (this._isStacked()) {\\n            this.$watched.css('height', 'auto');\\n            return false;\\n          }\\n        }\\n        if (this.options.equalizeByRow) {\\n          this.getHeightsByRow(this.applyHeightByRow.bind(this));\\n        } else {\\n          this.getHeights(this.applyHeight.bind(this));\\n        }\\n      }\\n\\n      /**\\n       * Manually determines if the first 2 elements are *NOT* stacked.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_isStacked',\\n      value: function _isStacked() {\\n        return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;\\n      }\\n\\n      /**\\n       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\\n       * @param {Function} cb - A non-optional callback to return the heights array to.\\n       * @returns {Array} heights - An array of heights of children within Equalizer container\\n       */\\n\\n    }, {\\n      key: 'getHeights',\\n      value: function getHeights(cb) {\\n        var heights = [];\\n        for (var i = 0, len = this.$watched.length; i < len; i++) {\\n          this.$watched[i].style.height = 'auto';\\n          heights.push(this.$watched[i].offsetHeight);\\n        }\\n        cb(heights);\\n      }\\n\\n      /**\\n       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\\n       * @param {Function} cb - A non-optional callback to return the heights array to.\\n       * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\\n       */\\n\\n    }, {\\n      key: 'getHeightsByRow',\\n      value: function getHeightsByRow(cb) {\\n        var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,\\n            groups = [],\\n            group = 0;\\n        //group by Row\\n        groups[group] = [];\\n        for (var i = 0, len = this.$watched.length; i < len; i++) {\\n          this.$watched[i].style.height = 'auto';\\n          //maybe could use this.$watched[i].offsetTop\\n          var elOffsetTop = $(this.$watched[i]).offset().top;\\n          if (elOffsetTop != lastElTopOffset) {\\n            group++;\\n            groups[group] = [];\\n            lastElTopOffset = elOffsetTop;\\n          }\\n          groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);\\n        }\\n\\n        for (var j = 0, ln = groups.length; j < ln; j++) {\\n          var heights = $(groups[j]).map(function () {\\n            return this[1];\\n          }).get();\\n          var max = Math.max.apply(null, heights);\\n          groups[j].push(max);\\n        }\\n        cb(groups);\\n      }\\n\\n      /**\\n       * Changes the CSS height property of each child in an Equalizer parent to match the tallest\\n       * @param {array} heights - An array of heights of children within Equalizer container\\n       * @fires Equalizer#preequalized\\n       * @fires Equalizer#postequalized\\n       */\\n\\n    }, {\\n      key: 'applyHeight',\\n      value: function applyHeight(heights) {\\n        var max = Math.max.apply(null, heights);\\n        /**\\n         * Fires before the heights are applied\\n         * @event Equalizer#preequalized\\n         */\\n        this.$element.trigger('preequalized.zf.equalizer');\\n\\n        this.$watched.css('height', max);\\n\\n        /**\\n         * Fires when the heights have been applied\\n         * @event Equalizer#postequalized\\n         */\\n        this.$element.trigger('postequalized.zf.equalizer');\\n      }\\n\\n      /**\\n       * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row\\n       * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\\n       * @fires Equalizer#preequalized\\n       * @fires Equalizer#preequalizedRow\\n       * @fires Equalizer#postequalizedRow\\n       * @fires Equalizer#postequalized\\n       */\\n\\n    }, {\\n      key: 'applyHeightByRow',\\n      value: function applyHeightByRow(groups) {\\n        /**\\n         * Fires before the heights are applied\\n         */\\n        this.$element.trigger('preequalized.zf.equalizer');\\n        for (var i = 0, len = groups.length; i < len; i++) {\\n          var groupsILength = groups[i].length,\\n              max = groups[i][groupsILength - 1];\\n          if (groupsILength <= 2) {\\n            $(groups[i][0][0]).css({ 'height': 'auto' });\\n            continue;\\n          }\\n          /**\\n            * Fires before the heights per row are applied\\n            * @event Equalizer#preequalizedRow\\n            */\\n          this.$element.trigger('preequalizedrow.zf.equalizer');\\n          for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {\\n            $(groups[i][j][0]).css({ 'height': max });\\n          }\\n          /**\\n            * Fires when the heights per row have been applied\\n            * @event Equalizer#postequalizedRow\\n            */\\n          this.$element.trigger('postequalizedrow.zf.equalizer');\\n        }\\n        /**\\n         * Fires when the heights have been applied\\n         */\\n        this.$element.trigger('postequalized.zf.equalizer');\\n      }\\n\\n      /**\\n       * Destroys an instance of Equalizer.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this._pauseEvents();\\n        this.$watched.css('height', 'auto');\\n\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return Equalizer;\\n  }();\\n\\n  /**\\n   * Default settings for plugin\\n   */\\n\\n\\n  Equalizer.defaults = {\\n    /**\\n     * Enable height equalization when stacked on smaller screens.\\n     * @option\\n     * @example true\\n     */\\n    equalizeOnStack: true,\\n    /**\\n     * Enable height equalization row by row.\\n     * @option\\n     * @example false\\n     */\\n    equalizeByRow: false,\\n    /**\\n     * String representing the minimum breakpoint size the plugin should equalize heights on.\\n     * @option\\n     * @example 'medium'\\n     */\\n    equalizeOn: ''\\n  };\\n\\n  // Window exports\\n  Foundation.plugin(Equalizer, 'Equalizer');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * Interchange module.\\n   * @module foundation.interchange\\n   * @requires foundation.util.mediaQuery\\n   * @requires foundation.util.timerAndImageLoader\\n   */\\n\\n  var Interchange = function () {\\n    /**\\n     * Creates a new instance of Interchange.\\n     * @class\\n     * @fires Interchange#init\\n     * @param {Object} element - jQuery object to add the trigger to.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n\\n    function Interchange(element, options) {\\n      _classCallCheck(this, Interchange);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, Interchange.defaults, options);\\n      this.rules = [];\\n      this.currentPath = '';\\n\\n      this._init();\\n      this._events();\\n\\n      Foundation.registerPlugin(this, 'Interchange');\\n    }\\n\\n    /**\\n     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.\\n     * @function\\n     * @private\\n     */\\n\\n\\n    _createClass(Interchange, [{\\n      key: '_init',\\n      value: function _init() {\\n        this._addBreakpoints();\\n        this._generateRules();\\n        this._reflow();\\n      }\\n\\n      /**\\n       * Initializes events for Interchange.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events() {\\n        $(window).on('resize.zf.interchange', Foundation.util.throttle(this._reflow.bind(this), 50));\\n      }\\n\\n      /**\\n       * Calls necessary functions to update Interchange upon DOM change\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_reflow',\\n      value: function _reflow() {\\n        var match;\\n\\n        // Iterate through each rule, but only save the last match\\n        for (var i in this.rules) {\\n          if (this.rules.hasOwnProperty(i)) {\\n            var rule = this.rules[i];\\n\\n            if (window.matchMedia(rule.query).matches) {\\n              match = rule;\\n            }\\n          }\\n        }\\n\\n        if (match) {\\n          this.replace(match.path);\\n        }\\n      }\\n\\n      /**\\n       * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_addBreakpoints',\\n      value: function _addBreakpoints() {\\n        for (var i in Foundation.MediaQuery.queries) {\\n          if (Foundation.MediaQuery.queries.hasOwnProperty(i)) {\\n            var query = Foundation.MediaQuery.queries[i];\\n            Interchange.SPECIAL_QUERIES[query.name] = query.value;\\n          }\\n        }\\n      }\\n\\n      /**\\n       * Checks the Interchange element for the provided media query + content pairings\\n       * @function\\n       * @private\\n       * @param {Object} element - jQuery object that is an Interchange instance\\n       * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys\\n       */\\n\\n    }, {\\n      key: '_generateRules',\\n      value: function _generateRules(element) {\\n        var rulesList = [];\\n        var rules;\\n\\n        if (this.options.rules) {\\n          rules = this.options.rules;\\n        } else {\\n          rules = this.$element.data('interchange').match(/\\\\[.*?\\\\]/g);\\n        }\\n\\n        for (var i in rules) {\\n          if (rules.hasOwnProperty(i)) {\\n            var rule = rules[i].slice(1, -1).split(', ');\\n            var path = rule.slice(0, -1).join('');\\n            var query = rule[rule.length - 1];\\n\\n            if (Interchange.SPECIAL_QUERIES[query]) {\\n              query = Interchange.SPECIAL_QUERIES[query];\\n            }\\n\\n            rulesList.push({\\n              path: path,\\n              query: query\\n            });\\n          }\\n        }\\n\\n        this.rules = rulesList;\\n      }\\n\\n      /**\\n       * Update the `src` property of an image, or change the HTML of a container, to the specified path.\\n       * @function\\n       * @param {String} path - Path to the image or HTML partial.\\n       * @fires Interchange#replaced\\n       */\\n\\n    }, {\\n      key: 'replace',\\n      value: function replace(path) {\\n        if (this.currentPath === path) return;\\n\\n        var _this = this,\\n            trigger = 'replaced.zf.interchange';\\n\\n        // Replacing images\\n        if (this.$element[0].nodeName === 'IMG') {\\n          this.$element.attr('src', path).load(function () {\\n            _this.currentPath = path;\\n          }).trigger(trigger);\\n        }\\n        // Replacing background images\\n        else if (path.match(/\\\\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {\\n            this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);\\n          }\\n          // Replacing HTML\\n          else {\\n              $.get(path, function (response) {\\n                _this.$element.html(response).trigger(trigger);\\n                $(response).foundation();\\n                _this.currentPath = path;\\n              });\\n            }\\n\\n        /**\\n         * Fires when content in an Interchange element is done being loaded.\\n         * @event Interchange#replaced\\n         */\\n        // this.$element.trigger('replaced.zf.interchange');\\n      }\\n\\n      /**\\n       * Destroys an instance of interchange.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        //TODO this.\\n      }\\n    }]);\\n\\n    return Interchange;\\n  }();\\n\\n  /**\\n   * Default settings for plugin\\n   */\\n\\n\\n  Interchange.defaults = {\\n    /**\\n     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.\\n     * @option\\n     */\\n    rules: null\\n  };\\n\\n  Interchange.SPECIAL_QUERIES = {\\n    'landscape': 'screen and (orientation: landscape)',\\n    'portrait': 'screen and (orientation: portrait)',\\n    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'\\n  };\\n\\n  // Window exports\\n  Foundation.plugin(Interchange, 'Interchange');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * Magellan module.\\n   * @module foundation.magellan\\n   */\\n\\n  var Magellan = function () {\\n    /**\\n     * Creates a new instance of Magellan.\\n     * @class\\n     * @fires Magellan#init\\n     * @param {Object} element - jQuery object to add the trigger to.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n\\n    function Magellan(element, options) {\\n      _classCallCheck(this, Magellan);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, Magellan.defaults, this.$element.data(), options);\\n\\n      this._init();\\n\\n      Foundation.registerPlugin(this, 'Magellan');\\n    }\\n\\n    /**\\n     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.\\n     * @private\\n     */\\n\\n\\n    _createClass(Magellan, [{\\n      key: '_init',\\n      value: function _init() {\\n        var id = this.$element[0].id || Foundation.GetYoDigits(6, 'magellan');\\n        var _this = this;\\n        this.$targets = $('[data-magellan-target]');\\n        this.$links = this.$element.find('a');\\n        this.$element.attr({\\n          'data-resize': id,\\n          'data-scroll': id,\\n          'id': id\\n        });\\n        this.$active = $();\\n        this.scrollPos = parseInt(window.pageYOffset, 10);\\n\\n        this._events();\\n      }\\n\\n      /**\\n       * Calculates an array of pixel values that are the demarcation lines between locations on the page.\\n       * Can be invoked if new elements are added or the size of a location changes.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'calcPoints',\\n      value: function calcPoints() {\\n        var _this = this,\\n            body = document.body,\\n            html = document.documentElement;\\n\\n        this.points = [];\\n        this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));\\n        this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));\\n\\n        this.$targets.each(function () {\\n          var $tar = $(this),\\n              pt = Math.round($tar.offset().top - _this.options.threshold);\\n          $tar.targetPoint = pt;\\n          _this.points.push(pt);\\n        });\\n      }\\n\\n      /**\\n       * Initializes events for Magellan.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events() {\\n        var _this = this,\\n            $body = $('html, body'),\\n            opts = {\\n          duration: _this.options.animationDuration,\\n          easing: _this.options.animationEasing\\n        };\\n        $(window).one('load', function () {\\n          if (_this.options.deepLinking) {\\n            if (location.hash) {\\n              _this.scrollToLoc(location.hash);\\n            }\\n          }\\n          _this.calcPoints();\\n          _this._updateActive();\\n        });\\n\\n        this.$element.on({\\n          'resizeme.zf.trigger': this.reflow.bind(this),\\n          'scrollme.zf.trigger': this._updateActive.bind(this)\\n        }).on('click.zf.magellan', 'a[href^=\\\"#\\\"]', function (e) {\\n          e.preventDefault();\\n          var arrival = this.getAttribute('href');\\n          _this.scrollToLoc(arrival);\\n        });\\n      }\\n\\n      /**\\n       * Function to scroll to a given location on the page.\\n       * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'scrollToLoc',\\n      value: function scrollToLoc(loc) {\\n        var scrollPos = Math.round($(loc).offset().top - this.options.threshold / 2 - this.options.barOffset);\\n\\n        $('html, body').stop(true).animate({ scrollTop: scrollPos }, this.options.animationDuration, this.options.animationEasing);\\n      }\\n\\n      /**\\n       * Calls necessary functions to update Magellan upon DOM change\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'reflow',\\n      value: function reflow() {\\n        this.calcPoints();\\n        this._updateActive();\\n      }\\n\\n      /**\\n       * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.\\n       * @private\\n       * @function\\n       * @fires Magellan#update\\n       */\\n\\n    }, {\\n      key: '_updateActive',\\n      value: function _updateActive() /*evt, elem, scrollPos*/{\\n        var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),\\n            curIdx;\\n\\n        if (winPos + this.winHeight === this.docHeight) {\\n          curIdx = this.points.length - 1;\\n        } else if (winPos < this.points[0]) {\\n          curIdx = 0;\\n        } else {\\n          var isDown = this.scrollPos < winPos,\\n              _this = this,\\n              curVisible = this.points.filter(function (p, i) {\\n            return isDown ? p - _this.options.barOffset <= winPos : p - _this.options.barOffset - _this.options.threshold <= winPos;\\n          });\\n          curIdx = curVisible.length ? curVisible.length - 1 : 0;\\n        }\\n\\n        this.$active.removeClass(this.options.activeClass);\\n        this.$active = this.$links.eq(curIdx).addClass(this.options.activeClass);\\n\\n        if (this.options.deepLinking) {\\n          var hash = this.$active[0].getAttribute('href');\\n          if (window.history.pushState) {\\n            window.history.pushState(null, null, hash);\\n          } else {\\n            window.location.hash = hash;\\n          }\\n        }\\n\\n        this.scrollPos = winPos;\\n        /**\\n         * Fires when magellan is finished updating to the new active element.\\n         * @event Magellan#update\\n         */\\n        this.$element.trigger('update.zf.magellan', [this.$active]);\\n      }\\n\\n      /**\\n       * Destroys an instance of Magellan and resets the url of the window.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this.$element.off('.zf.trigger .zf.magellan').find('.' + this.options.activeClass).removeClass(this.options.activeClass);\\n\\n        if (this.options.deepLinking) {\\n          var hash = this.$active[0].getAttribute('href');\\n          window.location.hash.replace(hash, '');\\n        }\\n\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return Magellan;\\n  }();\\n\\n  /**\\n   * Default settings for plugin\\n   */\\n\\n\\n  Magellan.defaults = {\\n    /**\\n     * Amount of time, in ms, the animated scrolling should take between locations.\\n     * @option\\n     * @example 500\\n     */\\n    animationDuration: 500,\\n    /**\\n     * Animation style to use when scrolling between locations.\\n     * @option\\n     * @example 'ease-in-out'\\n     */\\n    animationEasing: 'linear',\\n    /**\\n     * Number of pixels to use as a marker for location changes.\\n     * @option\\n     * @example 50\\n     */\\n    threshold: 50,\\n    /**\\n     * Class applied to the active locations link on the magellan container.\\n     * @option\\n     * @example 'active'\\n     */\\n    activeClass: 'active',\\n    /**\\n     * Allows the script to manipulate the url of the current page, and if supported, alter the history.\\n     * @option\\n     * @example true\\n     */\\n    deepLinking: false,\\n    /**\\n     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.\\n     * @option\\n     * @example 25\\n     */\\n    barOffset: 0\\n  };\\n\\n  // Window exports\\n  Foundation.plugin(Magellan, 'Magellan');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * OffCanvas module.\\n   * @module foundation.offcanvas\\n   * @requires foundation.util.mediaQuery\\n   * @requires foundation.util.triggers\\n   * @requires foundation.util.motion\\n   */\\n\\n  var OffCanvas = function () {\\n    /**\\n     * Creates a new instance of an off-canvas wrapper.\\n     * @class\\n     * @fires OffCanvas#init\\n     * @param {Object} element - jQuery object to initialize.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n\\n    function OffCanvas(element, options) {\\n      _classCallCheck(this, OffCanvas);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);\\n      this.$lastTrigger = $();\\n      this.$triggers = $();\\n\\n      this._init();\\n      this._events();\\n\\n      Foundation.registerPlugin(this, 'OffCanvas');\\n    }\\n\\n    /**\\n     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).\\n     * @function\\n     * @private\\n     */\\n\\n\\n    _createClass(OffCanvas, [{\\n      key: '_init',\\n      value: function _init() {\\n        var id = this.$element.attr('id');\\n\\n        this.$element.attr('aria-hidden', 'true');\\n\\n        // Find triggers that affect this element and add aria-expanded to them\\n        this.$triggers = $(document).find('[data-open=\\\"' + id + '\\\"], [data-close=\\\"' + id + '\\\"], [data-toggle=\\\"' + id + '\\\"]').attr('aria-expanded', 'false').attr('aria-controls', id);\\n\\n        // Add a close trigger over the body if necessary\\n        if (this.options.closeOnClick) {\\n          if ($('.js-off-canvas-exit').length) {\\n            this.$exiter = $('.js-off-canvas-exit');\\n          } else {\\n            var exiter = document.createElement('div');\\n            exiter.setAttribute('class', 'js-off-canvas-exit');\\n            $('[data-off-canvas-content]').append(exiter);\\n\\n            this.$exiter = $(exiter);\\n          }\\n        }\\n\\n        this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);\\n\\n        if (this.options.isRevealed) {\\n          this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];\\n          this._setMQChecker();\\n        }\\n        if (!this.options.transitionTime) {\\n          this.options.transitionTime = parseFloat(window.getComputedStyle($('[data-off-canvas-wrapper]')[0]).transitionDuration) * 1000;\\n        }\\n      }\\n\\n      /**\\n       * Adds event handlers to the off-canvas wrapper and the exit overlay.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events() {\\n        this.$element.off('.zf.trigger .zf.offcanvas').on({\\n          'open.zf.trigger': this.open.bind(this),\\n          'close.zf.trigger': this.close.bind(this),\\n          'toggle.zf.trigger': this.toggle.bind(this),\\n          'keydown.zf.offcanvas': this._handleKeyboard.bind(this)\\n        });\\n\\n        if (this.options.closeOnClick && this.$exiter.length) {\\n          this.$exiter.on({ 'click.zf.offcanvas': this.close.bind(this) });\\n        }\\n      }\\n\\n      /**\\n       * Applies event listener for elements that will reveal at certain breakpoints.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_setMQChecker',\\n      value: function _setMQChecker() {\\n        var _this = this;\\n\\n        $(window).on('changed.zf.mediaquery', function () {\\n          if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {\\n            _this.reveal(true);\\n          } else {\\n            _this.reveal(false);\\n          }\\n        }).one('load.zf.offcanvas', function () {\\n          if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {\\n            _this.reveal(true);\\n          }\\n        });\\n      }\\n\\n      /**\\n       * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.\\n       * @param {Boolean} isRevealed - true if element should be revealed.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'reveal',\\n      value: function reveal(isRevealed) {\\n        var $closer = this.$element.find('[data-close]');\\n        if (isRevealed) {\\n          this.close();\\n          this.isRevealed = true;\\n          // if (!this.options.forceTop) {\\n          //   var scrollPos = parseInt(window.pageYOffset);\\n          //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';\\n          // }\\n          // if (this.options.isSticky) { this._stick(); }\\n          this.$element.off('open.zf.trigger toggle.zf.trigger');\\n          if ($closer.length) {\\n            $closer.hide();\\n          }\\n        } else {\\n          this.isRevealed = false;\\n          // if (this.options.isSticky || !this.options.forceTop) {\\n          //   this.$element[0].style.transform = '';\\n          //   $(window).off('scroll.zf.offcanvas');\\n          // }\\n          this.$element.on({\\n            'open.zf.trigger': this.open.bind(this),\\n            'toggle.zf.trigger': this.toggle.bind(this)\\n          });\\n          if ($closer.length) {\\n            $closer.show();\\n          }\\n        }\\n      }\\n\\n      /**\\n       * Opens the off-canvas menu.\\n       * @function\\n       * @param {Object} event - Event object passed from listener.\\n       * @param {jQuery} trigger - element that triggered the off-canvas to open.\\n       * @fires OffCanvas#opened\\n       */\\n\\n    }, {\\n      key: 'open',\\n      value: function open(event, trigger) {\\n        if (this.$element.hasClass('is-open') || this.isRevealed) {\\n          return;\\n        }\\n        var _this = this,\\n            $body = $(document.body);\\n\\n        if (this.options.forceTop) {\\n          $('body').scrollTop(0);\\n        }\\n        // window.pageYOffset = 0;\\n\\n        // if (!this.options.forceTop) {\\n        //   var scrollPos = parseInt(window.pageYOffset);\\n        //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';\\n        //   if (this.$exiter.length) {\\n        //     this.$exiter[0].style.transform = 'translate(0,' + scrollPos + 'px)';\\n        //   }\\n        // }\\n        /**\\n         * Fires when the off-canvas menu opens.\\n         * @event OffCanvas#opened\\n         */\\n        Foundation.Move(this.options.transitionTime, this.$element, function () {\\n          $('[data-off-canvas-wrapper]').addClass('is-off-canvas-open is-open-' + _this.options.position);\\n\\n          _this.$element.addClass('is-open');\\n\\n          // if (_this.options.isSticky) {\\n          //   _this._stick();\\n          // }\\n        });\\n\\n        this.$triggers.attr('aria-expanded', 'true');\\n        this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');\\n\\n        if (this.options.closeOnClick) {\\n          this.$exiter.addClass('is-visible');\\n        }\\n\\n        if (trigger) {\\n          this.$lastTrigger = trigger;\\n        }\\n\\n        if (this.options.autoFocus) {\\n          this.$element.one(Foundation.transitionend(this.$element), function () {\\n            _this.$element.find('a, button').eq(0).focus();\\n          });\\n        }\\n\\n        if (this.options.trapFocus) {\\n          $('[data-off-canvas-content]').attr('tabindex', '-1');\\n          this._trapFocus();\\n        }\\n      }\\n\\n      /**\\n       * Traps focus within the offcanvas on open.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_trapFocus',\\n      value: function _trapFocus() {\\n        var focusable = Foundation.Keyboard.findFocusable(this.$element),\\n            first = focusable.eq(0),\\n            last = focusable.eq(-1);\\n\\n        focusable.off('.zf.offcanvas').on('keydown.zf.offcanvas', function (e) {\\n          if (e.which === 9 || e.keycode === 9) {\\n            if (e.target === last[0] && !e.shiftKey) {\\n              e.preventDefault();\\n              first.focus();\\n            }\\n            if (e.target === first[0] && e.shiftKey) {\\n              e.preventDefault();\\n              last.focus();\\n            }\\n          }\\n        });\\n      }\\n\\n      /**\\n       * Allows the offcanvas to appear sticky utilizing translate properties.\\n       * @private\\n       */\\n      // OffCanvas.prototype._stick = function() {\\n      //   var elStyle = this.$element[0].style;\\n      //\\n      //   if (this.options.closeOnClick) {\\n      //     var exitStyle = this.$exiter[0].style;\\n      //   }\\n      //\\n      //   $(window).on('scroll.zf.offcanvas', function(e) {\\n      //     console.log(e);\\n      //     var pageY = window.pageYOffset;\\n      //     elStyle.transform = 'translate(0,' + pageY + 'px)';\\n      //     if (exitStyle !== undefined) { exitStyle.transform = 'translate(0,' + pageY + 'px)'; }\\n      //   });\\n      //   // this.$element.trigger('stuck.zf.offcanvas');\\n      // };\\n      /**\\n       * Closes the off-canvas menu.\\n       * @function\\n       * @param {Function} cb - optional cb to fire after closure.\\n       * @fires OffCanvas#closed\\n       */\\n\\n    }, {\\n      key: 'close',\\n      value: function close(cb) {\\n        if (!this.$element.hasClass('is-open') || this.isRevealed) {\\n          return;\\n        }\\n\\n        var _this = this;\\n\\n        //  Foundation.Move(this.options.transitionTime, this.$element, function() {\\n        $('[data-off-canvas-wrapper]').removeClass('is-off-canvas-open is-open-' + _this.options.position);\\n        _this.$element.removeClass('is-open');\\n        // Foundation._reflow();\\n        // });\\n        this.$element.attr('aria-hidden', 'true')\\n        /**\\n         * Fires when the off-canvas menu opens.\\n         * @event OffCanvas#closed\\n         */\\n        .trigger('closed.zf.offcanvas');\\n        // if (_this.options.isSticky || !_this.options.forceTop) {\\n        //   setTimeout(function() {\\n        //     _this.$element[0].style.transform = '';\\n        //     $(window).off('scroll.zf.offcanvas');\\n        //   }, this.options.transitionTime);\\n        // }\\n        if (this.options.closeOnClick) {\\n          this.$exiter.removeClass('is-visible');\\n        }\\n\\n        this.$triggers.attr('aria-expanded', 'false');\\n        if (this.options.trapFocus) {\\n          $('[data-off-canvas-content]').removeAttr('tabindex');\\n        }\\n      }\\n\\n      /**\\n       * Toggles the off-canvas menu open or closed.\\n       * @function\\n       * @param {Object} event - Event object passed from listener.\\n       * @param {jQuery} trigger - element that triggered the off-canvas to open.\\n       */\\n\\n    }, {\\n      key: 'toggle',\\n      value: function toggle(event, trigger) {\\n        if (this.$element.hasClass('is-open')) {\\n          this.close(event, trigger);\\n        } else {\\n          this.open(event, trigger);\\n        }\\n      }\\n\\n      /**\\n       * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_handleKeyboard',\\n      value: function _handleKeyboard(event) {\\n        if (event.which !== 27) return;\\n\\n        event.stopPropagation();\\n        event.preventDefault();\\n        this.close();\\n        this.$lastTrigger.focus();\\n      }\\n\\n      /**\\n       * Destroys the offcanvas plugin.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this.close();\\n        this.$element.off('.zf.trigger .zf.offcanvas');\\n        this.$exiter.off('.zf.offcanvas');\\n\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return OffCanvas;\\n  }();\\n\\n  OffCanvas.defaults = {\\n    /**\\n     * Allow the user to click outside of the menu to close it.\\n     * @option\\n     * @example true\\n     */\\n    closeOnClick: true,\\n\\n    /**\\n     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.\\n     * @option\\n     * @example 500\\n     */\\n    transitionTime: 0,\\n\\n    /**\\n     * Direction the offcanvas opens from. Determines class applied to body.\\n     * @option\\n     * @example left\\n     */\\n    position: 'left',\\n\\n    /**\\n     * Force the page to scroll to top on open.\\n     * @option\\n     * @example true\\n     */\\n    forceTop: true,\\n\\n    /**\\n     * Allow the offcanvas to remain open for certain breakpoints.\\n     * @option\\n     * @example false\\n     */\\n    isRevealed: false,\\n\\n    /**\\n     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.\\n     * @option\\n     * @example reveal-for-large\\n     */\\n    revealOn: null,\\n\\n    /**\\n     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.\\n     * @option\\n     * @example true\\n     */\\n    autoFocus: true,\\n\\n    /**\\n     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.\\n     * @option\\n     * TODO improve the regex testing for this.\\n     * @example reveal-for-large\\n     */\\n    revealClass: 'reveal-for-',\\n\\n    /**\\n     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.\\n     * @option\\n     * @example true\\n     */\\n    trapFocus: false\\n  };\\n\\n  // Window exports\\n  Foundation.plugin(OffCanvas, 'OffCanvas');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * Orbit module.\\n   * @module foundation.orbit\\n   * @requires foundation.util.keyboard\\n   * @requires foundation.util.motion\\n   * @requires foundation.util.timerAndImageLoader\\n   * @requires foundation.util.touch\\n   */\\n\\n  var Orbit = function () {\\n    /**\\n    * Creates a new instance of an orbit carousel.\\n    * @class\\n    * @param {jQuery} element - jQuery object to make into an Orbit Carousel.\\n    * @param {Object} options - Overrides to the default plugin settings.\\n    */\\n\\n    function Orbit(element, options) {\\n      _classCallCheck(this, Orbit);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, Orbit.defaults, this.$element.data(), options);\\n\\n      this._init();\\n\\n      Foundation.registerPlugin(this, 'Orbit');\\n      Foundation.Keyboard.register('Orbit', {\\n        'ltr': {\\n          'ARROW_RIGHT': 'next',\\n          'ARROW_LEFT': 'previous'\\n        },\\n        'rtl': {\\n          'ARROW_LEFT': 'next',\\n          'ARROW_RIGHT': 'previous'\\n        }\\n      });\\n    }\\n\\n    /**\\n    * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.\\n    * @function\\n    * @private\\n    */\\n\\n\\n    _createClass(Orbit, [{\\n      key: '_init',\\n      value: function _init() {\\n        this.$wrapper = this.$element.find('.' + this.options.containerClass);\\n        this.$slides = this.$element.find('.' + this.options.slideClass);\\n        var $images = this.$element.find('img'),\\n            initActive = this.$slides.filter('.is-active');\\n\\n        if (!initActive.length) {\\n          this.$slides.eq(0).addClass('is-active');\\n        }\\n\\n        if (!this.options.useMUI) {\\n          this.$slides.addClass('no-motionui');\\n        }\\n\\n        if ($images.length) {\\n          Foundation.onImagesLoaded($images, this._prepareForOrbit.bind(this));\\n        } else {\\n          this._prepareForOrbit(); //hehe\\n        }\\n\\n        if (this.options.bullets) {\\n          this._loadBullets();\\n        }\\n\\n        this._events();\\n\\n        if (this.options.autoPlay && this.$slides.length > 1) {\\n          this.geoSync();\\n        }\\n\\n        if (this.options.accessible) {\\n          // allow wrapper to be focusable to enable arrow navigation\\n          this.$wrapper.attr('tabindex', 0);\\n        }\\n      }\\n\\n      /**\\n      * Creates a jQuery collection of bullets, if they are being used.\\n      * @function\\n      * @private\\n      */\\n\\n    }, {\\n      key: '_loadBullets',\\n      value: function _loadBullets() {\\n        this.$bullets = this.$element.find('.' + this.options.boxOfBullets).find('button');\\n      }\\n\\n      /**\\n      * Sets a `timer` object on the orbit, and starts the counter for the next slide.\\n      * @function\\n      */\\n\\n    }, {\\n      key: 'geoSync',\\n      value: function geoSync() {\\n        var _this = this;\\n        this.timer = new Foundation.Timer(this.$element, {\\n          duration: this.options.timerDelay,\\n          infinite: false\\n        }, function () {\\n          _this.changeSlide(true);\\n        });\\n        this.timer.start();\\n      }\\n\\n      /**\\n      * Sets wrapper and slide heights for the orbit.\\n      * @function\\n      * @private\\n      */\\n\\n    }, {\\n      key: '_prepareForOrbit',\\n      value: function _prepareForOrbit() {\\n        var _this = this;\\n        this._setWrapperHeight(function (max) {\\n          _this._setSlideHeight(max);\\n        });\\n      }\\n\\n      /**\\n      * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.\\n      * @function\\n      * @private\\n      * @param {Function} cb - a callback function to fire when complete.\\n      */\\n\\n    }, {\\n      key: '_setWrapperHeight',\\n      value: function _setWrapperHeight(cb) {\\n        //rewrite this to `for` loop\\n        var max = 0,\\n            temp,\\n            counter = 0;\\n\\n        this.$slides.each(function () {\\n          temp = this.getBoundingClientRect().height;\\n          $(this).attr('data-slide', counter);\\n\\n          if (counter) {\\n            //if not the first slide, set css position and display property\\n            $(this).css({ 'position': 'relative', 'display': 'none' });\\n          }\\n          max = temp > max ? temp : max;\\n          counter++;\\n        });\\n\\n        if (counter === this.$slides.length) {\\n          this.$wrapper.css({ 'height': max }); //only change the wrapper height property once.\\n          cb(max); //fire callback with max height dimension.\\n        }\\n      }\\n\\n      /**\\n      * Sets the max-height of each slide.\\n      * @function\\n      * @private\\n      */\\n\\n    }, {\\n      key: '_setSlideHeight',\\n      value: function _setSlideHeight(height) {\\n        this.$slides.each(function () {\\n          $(this).css('max-height', height);\\n        });\\n      }\\n\\n      /**\\n      * Adds event listeners to basically everything within the element.\\n      * @function\\n      * @private\\n      */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events() {\\n        var _this = this;\\n\\n        //***************************************\\n        //**Now using custom event - thanks to:**\\n        //**      Yohai Ararat of Toronto      **\\n        //***************************************\\n        if (this.$slides.length > 1) {\\n\\n          if (this.options.swipe) {\\n            this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {\\n              e.preventDefault();\\n              _this.changeSlide(true);\\n            }).on('swiperight.zf.orbit', function (e) {\\n              e.preventDefault();\\n              _this.changeSlide(false);\\n            });\\n          }\\n          //***************************************\\n\\n          if (this.options.autoPlay) {\\n            this.$slides.on('click.zf.orbit', function () {\\n              _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);\\n              _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();\\n            });\\n\\n            if (this.options.pauseOnHover) {\\n              this.$element.on('mouseenter.zf.orbit', function () {\\n                _this.timer.pause();\\n              }).on('mouseleave.zf.orbit', function () {\\n                if (!_this.$element.data('clickedOn')) {\\n                  _this.timer.start();\\n                }\\n              });\\n            }\\n          }\\n\\n          if (this.options.navButtons) {\\n            var $controls = this.$element.find('.' + this.options.nextClass + ', .' + this.options.prevClass);\\n            $controls.attr('tabindex', 0)\\n            //also need to handle enter/return and spacebar key presses\\n            .on('click.zf.orbit touchend.zf.orbit', function (e) {\\n              e.preventDefault();\\n              _this.changeSlide($(this).hasClass(_this.options.nextClass));\\n            });\\n          }\\n\\n          if (this.options.bullets) {\\n            this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {\\n              if (/is-active/g.test(this.className)) {\\n                return false;\\n              } //if this is active, kick out of function.\\n              var idx = $(this).data('slide'),\\n                  ltr = idx > _this.$slides.filter('.is-active').data('slide'),\\n                  $slide = _this.$slides.eq(idx);\\n\\n              _this.changeSlide(ltr, $slide, idx);\\n            });\\n          }\\n\\n          this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {\\n            // handle keyboard event with keyboard util\\n            Foundation.Keyboard.handleKey(e, 'Orbit', {\\n              next: function () {\\n                _this.changeSlide(true);\\n              },\\n              previous: function () {\\n                _this.changeSlide(false);\\n              },\\n              handled: function () {\\n                // if bullet is focused, make sure focus moves\\n                if ($(e.target).is(_this.$bullets)) {\\n                  _this.$bullets.filter('.is-active').focus();\\n                }\\n              }\\n            });\\n          });\\n        }\\n      }\\n\\n      /**\\n      * Changes the current slide to a new one.\\n      * @function\\n      * @param {Boolean} isLTR - flag if the slide should move left to right.\\n      * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.\\n      * @param {Number} idx - the index of the new slide in its collection, if one chosen.\\n      * @fires Orbit#slidechange\\n      */\\n\\n    }, {\\n      key: 'changeSlide',\\n      value: function changeSlide(isLTR, chosenSlide, idx) {\\n        var $curSlide = this.$slides.filter('.is-active').eq(0);\\n\\n        if (/mui/g.test($curSlide[0].className)) {\\n          return false;\\n        } //if the slide is currently animating, kick out of the function\\n\\n        var $firstSlide = this.$slides.first(),\\n            $lastSlide = this.$slides.last(),\\n            dirIn = isLTR ? 'Right' : 'Left',\\n            dirOut = isLTR ? 'Left' : 'Right',\\n            _this = this,\\n            $newSlide;\\n\\n        if (!chosenSlide) {\\n          //most of the time, this will be auto played or clicked from the navButtons.\\n          $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!\\n          this.options.infiniteWrap ? $curSlide.next('.' + this.options.slideClass).length ? $curSlide.next('.' + this.options.slideClass) : $firstSlide : $curSlide.next('.' + this.options.slideClass) : //pick next slide if moving left to right\\n          this.options.infiniteWrap ? $curSlide.prev('.' + this.options.slideClass).length ? $curSlide.prev('.' + this.options.slideClass) : $lastSlide : $curSlide.prev('.' + this.options.slideClass); //pick prev slide if moving right to left\\n        } else {\\n            $newSlide = chosenSlide;\\n          }\\n\\n        if ($newSlide.length) {\\n          if (this.options.bullets) {\\n            idx = idx || this.$slides.index($newSlide); //grab index to update bullets\\n            this._updateBullets(idx);\\n          }\\n\\n          if (this.options.useMUI) {\\n            Foundation.Motion.animateIn($newSlide.addClass('is-active').css({ 'position': 'absolute', 'top': 0 }), this.options['animInFrom' + dirIn], function () {\\n              $newSlide.css({ 'position': 'relative', 'display': 'block' }).attr('aria-live', 'polite');\\n            });\\n\\n            Foundation.Motion.animateOut($curSlide.removeClass('is-active'), this.options['animOutTo' + dirOut], function () {\\n              $curSlide.removeAttr('aria-live');\\n              if (_this.options.autoPlay && !_this.timer.isPaused) {\\n                _this.timer.restart();\\n              }\\n              //do stuff?\\n            });\\n          } else {\\n              $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();\\n              $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();\\n              if (this.options.autoPlay && !this.timer.isPaused) {\\n                this.timer.restart();\\n              }\\n            }\\n          /**\\n          * Triggers when the slide has finished animating in.\\n          * @event Orbit#slidechange\\n          */\\n          this.$element.trigger('slidechange.zf.orbit', [$newSlide]);\\n        }\\n      }\\n\\n      /**\\n      * Updates the active state of the bullets, if displayed.\\n      * @function\\n      * @private\\n      * @param {Number} idx - the index of the current slide.\\n      */\\n\\n    }, {\\n      key: '_updateBullets',\\n      value: function _updateBullets(idx) {\\n        var $oldBullet = this.$element.find('.' + this.options.boxOfBullets).find('.is-active').removeClass('is-active').blur(),\\n            span = $oldBullet.find('span:last').detach(),\\n            $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);\\n      }\\n\\n      /**\\n      * Destroys the carousel and hides the element.\\n      * @function\\n      */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return Orbit;\\n  }();\\n\\n  Orbit.defaults = {\\n    /**\\n    * Tells the JS to look for and loadBullets.\\n    * @option\\n    * @example true\\n    */\\n    bullets: true,\\n    /**\\n    * Tells the JS to apply event listeners to nav buttons\\n    * @option\\n    * @example true\\n    */\\n    navButtons: true,\\n    /**\\n    * motion-ui animation class to apply\\n    * @option\\n    * @example 'slide-in-right'\\n    */\\n    animInFromRight: 'slide-in-right',\\n    /**\\n    * motion-ui animation class to apply\\n    * @option\\n    * @example 'slide-out-right'\\n    */\\n    animOutToRight: 'slide-out-right',\\n    /**\\n    * motion-ui animation class to apply\\n    * @option\\n    * @example 'slide-in-left'\\n    *\\n    */\\n    animInFromLeft: 'slide-in-left',\\n    /**\\n    * motion-ui animation class to apply\\n    * @option\\n    * @example 'slide-out-left'\\n    */\\n    animOutToLeft: 'slide-out-left',\\n    /**\\n    * Allows Orbit to automatically animate on page load.\\n    * @option\\n    * @example true\\n    */\\n    autoPlay: true,\\n    /**\\n    * Amount of time, in ms, between slide transitions\\n    * @option\\n    * @example 5000\\n    */\\n    timerDelay: 5000,\\n    /**\\n    * Allows Orbit to infinitely loop through the slides\\n    * @option\\n    * @example true\\n    */\\n    infiniteWrap: true,\\n    /**\\n    * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library\\n    * @option\\n    * @example true\\n    */\\n    swipe: true,\\n    /**\\n    * Allows the timing function to pause animation on hover.\\n    * @option\\n    * @example true\\n    */\\n    pauseOnHover: true,\\n    /**\\n    * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys\\n    * @option\\n    * @example true\\n    */\\n    accessible: true,\\n    /**\\n    * Class applied to the container of Orbit\\n    * @option\\n    * @example 'orbit-container'\\n    */\\n    containerClass: 'orbit-container',\\n    /**\\n    * Class applied to individual slides.\\n    * @option\\n    * @example 'orbit-slide'\\n    */\\n    slideClass: 'orbit-slide',\\n    /**\\n    * Class applied to the bullet container. You're welcome.\\n    * @option\\n    * @example 'orbit-bullets'\\n    */\\n    boxOfBullets: 'orbit-bullets',\\n    /**\\n    * Class applied to the `next` navigation button.\\n    * @option\\n    * @example 'orbit-next'\\n    */\\n    nextClass: 'orbit-next',\\n    /**\\n    * Class applied to the `previous` navigation button.\\n    * @option\\n    * @example 'orbit-previous'\\n    */\\n    prevClass: 'orbit-previous',\\n    /**\\n    * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.\\n    * @option\\n    * @example true\\n    */\\n    useMUI: true\\n  };\\n\\n  // Window exports\\n  Foundation.plugin(Orbit, 'Orbit');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * ResponsiveMenu module.\\n   * @module foundation.responsiveMenu\\n   * @requires foundation.util.triggers\\n   * @requires foundation.util.mediaQuery\\n   * @requires foundation.util.accordionMenu\\n   * @requires foundation.util.drilldown\\n   * @requires foundation.util.dropdown-menu\\n   */\\n\\n  var ResponsiveMenu = function () {\\n    /**\\n     * Creates a new instance of a responsive menu.\\n     * @class\\n     * @fires ResponsiveMenu#init\\n     * @param {jQuery} element - jQuery object to make into a dropdown menu.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n\\n    function ResponsiveMenu(element, options) {\\n      _classCallCheck(this, ResponsiveMenu);\\n\\n      this.$element = $(element);\\n      this.rules = this.$element.data('responsive-menu');\\n      this.currentMq = null;\\n      this.currentPlugin = null;\\n\\n      this._init();\\n      this._events();\\n\\n      Foundation.registerPlugin(this, 'ResponsiveMenu');\\n    }\\n\\n    /**\\n     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.\\n     * @function\\n     * @private\\n     */\\n\\n\\n    _createClass(ResponsiveMenu, [{\\n      key: '_init',\\n      value: function _init() {\\n        // The first time an Interchange plugin is initialized, this.rules is converted from a string of \\\"classes\\\" to an object of rules\\n        if (typeof this.rules === 'string') {\\n          var rulesTree = {};\\n\\n          // Parse rules from \\\"classes\\\" pulled from data attribute\\n          var rules = this.rules.split(' ');\\n\\n          // Iterate through every rule found\\n          for (var i = 0; i < rules.length; i++) {\\n            var rule = rules[i].split('-');\\n            var ruleSize = rule.length > 1 ? rule[0] : 'small';\\n            var rulePlugin = rule.length > 1 ? rule[1] : rule[0];\\n\\n            if (MenuPlugins[rulePlugin] !== null) {\\n              rulesTree[ruleSize] = MenuPlugins[rulePlugin];\\n            }\\n          }\\n\\n          this.rules = rulesTree;\\n        }\\n\\n        if (!$.isEmptyObject(this.rules)) {\\n          this._checkMediaQueries();\\n        }\\n      }\\n\\n      /**\\n       * Initializes events for the Menu.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events() {\\n        var _this = this;\\n\\n        $(window).on('changed.zf.mediaquery', function () {\\n          _this._checkMediaQueries();\\n        });\\n        // $(window).on('resize.zf.ResponsiveMenu', function() {\\n        //   _this._checkMediaQueries();\\n        // });\\n      }\\n\\n      /**\\n       * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_checkMediaQueries',\\n      value: function _checkMediaQueries() {\\n        var matchedMq,\\n            _this = this;\\n        // Iterate through each rule and find the last matching rule\\n        $.each(this.rules, function (key) {\\n          if (Foundation.MediaQuery.atLeast(key)) {\\n            matchedMq = key;\\n          }\\n        });\\n\\n        // No match? No dice\\n        if (!matchedMq) return;\\n\\n        // Plugin already initialized? We good\\n        if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;\\n\\n        // Remove existing plugin-specific CSS classes\\n        $.each(MenuPlugins, function (key, value) {\\n          _this.$element.removeClass(value.cssClass);\\n        });\\n\\n        // Add the CSS class for the new plugin\\n        this.$element.addClass(this.rules[matchedMq].cssClass);\\n\\n        // Create an instance of the new plugin\\n        if (this.currentPlugin) this.currentPlugin.destroy();\\n        this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});\\n      }\\n\\n      /**\\n       * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this.currentPlugin.destroy();\\n        $(window).off('.zf.ResponsiveMenu');\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return ResponsiveMenu;\\n  }();\\n\\n  ResponsiveMenu.defaults = {};\\n\\n  // The plugin matches the plugin classes with these plugin instances.\\n  var MenuPlugins = {\\n    dropdown: {\\n      cssClass: 'dropdown',\\n      plugin: Foundation._plugins['dropdown-menu'] || null\\n    },\\n    drilldown: {\\n      cssClass: 'drilldown',\\n      plugin: Foundation._plugins['drilldown'] || null\\n    },\\n    accordion: {\\n      cssClass: 'accordion-menu',\\n      plugin: Foundation._plugins['accordion-menu'] || null\\n    }\\n  };\\n\\n  // Window exports\\n  Foundation.plugin(ResponsiveMenu, 'ResponsiveMenu');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * ResponsiveToggle module.\\n   * @module foundation.responsiveToggle\\n   * @requires foundation.util.mediaQuery\\n   */\\n\\n  var ResponsiveToggle = function () {\\n    /**\\n     * Creates a new instance of Tab Bar.\\n     * @class\\n     * @fires ResponsiveToggle#init\\n     * @param {jQuery} element - jQuery object to attach tab bar functionality to.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n\\n    function ResponsiveToggle(element, options) {\\n      _classCallCheck(this, ResponsiveToggle);\\n\\n      this.$element = $(element);\\n      this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);\\n\\n      this._init();\\n      this._events();\\n\\n      Foundation.registerPlugin(this, 'ResponsiveToggle');\\n    }\\n\\n    /**\\n     * Initializes the tab bar by finding the target element, toggling element, and running update().\\n     * @function\\n     * @private\\n     */\\n\\n\\n    _createClass(ResponsiveToggle, [{\\n      key: '_init',\\n      value: function _init() {\\n        var targetID = this.$element.data('responsive-toggle');\\n        if (!targetID) {\\n          console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');\\n        }\\n\\n        this.$targetMenu = $('#' + targetID);\\n        this.$toggler = this.$element.find('[data-toggle]');\\n\\n        this._update();\\n      }\\n\\n      /**\\n       * Adds necessary event handlers for the tab bar to work.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events() {\\n        var _this = this;\\n\\n        this._updateMqHandler = this._update.bind(this);\\n\\n        $(window).on('changed.zf.mediaquery', this._updateMqHandler);\\n\\n        this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));\\n      }\\n\\n      /**\\n       * Checks the current media query to determine if the tab bar should be visible or hidden.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_update',\\n      value: function _update() {\\n        // Mobile\\n        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {\\n          this.$element.show();\\n          this.$targetMenu.hide();\\n        }\\n\\n        // Desktop\\n        else {\\n            this.$element.hide();\\n            this.$targetMenu.show();\\n          }\\n      }\\n\\n      /**\\n       * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.\\n       * @function\\n       * @fires ResponsiveToggle#toggled\\n       */\\n\\n    }, {\\n      key: 'toggleMenu',\\n      value: function toggleMenu() {\\n        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {\\n          this.$targetMenu.toggle(0);\\n\\n          /**\\n           * Fires when the element attached to the tab bar toggles.\\n           * @event ResponsiveToggle#toggled\\n           */\\n          this.$element.trigger('toggled.zf.responsiveToggle');\\n        }\\n      }\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this.$element.off('.zf.responsiveToggle');\\n        this.$toggler.off('.zf.responsiveToggle');\\n\\n        $(window).off('changed.zf.mediaquery', this._updateMqHandler);\\n\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return ResponsiveToggle;\\n  }();\\n\\n  ResponsiveToggle.defaults = {\\n    /**\\n     * The breakpoint after which the menu is always shown, and the tab bar is hidden.\\n     * @option\\n     * @example 'medium'\\n     */\\n    hideFor: 'medium'\\n  };\\n\\n  // Window exports\\n  Foundation.plugin(ResponsiveToggle, 'ResponsiveToggle');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * Reveal module.\\n   * @module foundation.reveal\\n   * @requires foundation.util.keyboard\\n   * @requires foundation.util.box\\n   * @requires foundation.util.triggers\\n   * @requires foundation.util.mediaQuery\\n   * @requires foundation.util.motion if using animations\\n   */\\n\\n  var Reveal = function () {\\n    /**\\n     * Creates a new instance of Reveal.\\n     * @class\\n     * @param {jQuery} element - jQuery object to use for the modal.\\n     * @param {Object} options - optional parameters.\\n     */\\n\\n    function Reveal(element, options) {\\n      _classCallCheck(this, Reveal);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);\\n      this._init();\\n\\n      Foundation.registerPlugin(this, 'Reveal');\\n      Foundation.Keyboard.register('Reveal', {\\n        'ENTER': 'open',\\n        'SPACE': 'open',\\n        'ESCAPE': 'close',\\n        'TAB': 'tab_forward',\\n        'SHIFT_TAB': 'tab_backward'\\n      });\\n    }\\n\\n    /**\\n     * Initializes the modal by adding the overlay and close buttons, (if selected).\\n     * @private\\n     */\\n\\n\\n    _createClass(Reveal, [{\\n      key: '_init',\\n      value: function _init() {\\n        this.id = this.$element.attr('id');\\n        this.isActive = false;\\n        this.cached = { mq: Foundation.MediaQuery.current };\\n        this.isMobile = mobileSniff();\\n\\n        this.$anchor = $('[data-open=\\\"' + this.id + '\\\"]').length ? $('[data-open=\\\"' + this.id + '\\\"]') : $('[data-toggle=\\\"' + this.id + '\\\"]');\\n        this.$anchor.attr({\\n          'aria-controls': this.id,\\n          'aria-haspopup': true,\\n          'tabindex': 0\\n        });\\n\\n        if (this.options.fullScreen || this.$element.hasClass('full')) {\\n          this.options.fullScreen = true;\\n          this.options.overlay = false;\\n        }\\n        if (this.options.overlay && !this.$overlay) {\\n          this.$overlay = this._makeOverlay(this.id);\\n        }\\n\\n        this.$element.attr({\\n          'role': 'dialog',\\n          'aria-hidden': true,\\n          'data-yeti-box': this.id,\\n          'data-resize': this.id\\n        });\\n\\n        if (this.$overlay) {\\n          this.$element.detach().appendTo(this.$overlay);\\n        } else {\\n          this.$element.detach().appendTo($('body'));\\n          this.$element.addClass('without-overlay');\\n        }\\n        this._events();\\n        if (this.options.deepLink && window.location.hash === '#' + this.id) {\\n          $(window).one('load.zf.reveal', this.open.bind(this));\\n        }\\n      }\\n\\n      /**\\n       * Creates an overlay div to display behind the modal.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_makeOverlay',\\n      value: function _makeOverlay(id) {\\n        var $overlay = $('<div></div>').addClass('reveal-overlay').appendTo('body');\\n        return $overlay;\\n      }\\n\\n      /**\\n       * Updates position of modal\\n       * TODO:  Figure out if we actually need to cache these values or if it doesn't matter\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_updatePosition',\\n      value: function _updatePosition() {\\n        var width = this.$element.outerWidth();\\n        var outerWidth = $(window).width();\\n        var height = this.$element.outerHeight();\\n        var outerHeight = $(window).height();\\n        var left, top;\\n        if (this.options.hOffset === 'auto') {\\n          left = parseInt((outerWidth - width) / 2, 10);\\n        } else {\\n          left = parseInt(this.options.hOffset, 10);\\n        }\\n        if (this.options.vOffset === 'auto') {\\n          if (height > outerHeight) {\\n            top = parseInt(Math.min(100, outerHeight / 10), 10);\\n          } else {\\n            top = parseInt((outerHeight - height) / 4, 10);\\n          }\\n        } else {\\n          top = parseInt(this.options.vOffset, 10);\\n        }\\n        this.$element.css({ top: top + 'px' });\\n        // only worry about left if we don't have an overlay or we havea  horizontal offset,\\n        // otherwise we're perfectly in the middle\\n        if (!this.$overlay || this.options.hOffset !== 'auto') {\\n          this.$element.css({ left: left + 'px' });\\n          this.$element.css({ margin: '0px' });\\n        }\\n      }\\n\\n      /**\\n       * Adds event handlers for the modal.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events() {\\n        var _this2 = this;\\n\\n        var _this = this;\\n\\n        this.$element.on({\\n          'open.zf.trigger': this.open.bind(this),\\n          'close.zf.trigger': function (event, $element) {\\n            if (event.target === _this.$element[0] || $(event.target).parents('[data-closable]')[0] === $element) {\\n              // only close reveal when it's explicitly called\\n              return _this2.close.apply(_this2);\\n            }\\n          },\\n          'toggle.zf.trigger': this.toggle.bind(this),\\n          'resizeme.zf.trigger': function () {\\n            _this._updatePosition();\\n          }\\n        });\\n\\n        if (this.$anchor.length) {\\n          this.$anchor.on('keydown.zf.reveal', function (e) {\\n            if (e.which === 13 || e.which === 32) {\\n              e.stopPropagation();\\n              e.preventDefault();\\n              _this.open();\\n            }\\n          });\\n        }\\n\\n        if (this.options.closeOnClick && this.options.overlay) {\\n          this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {\\n            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {\\n              return;\\n            }\\n            _this.close();\\n          });\\n        }\\n        if (this.options.deepLink) {\\n          $(window).on('popstate.zf.reveal:' + this.id, this._handleState.bind(this));\\n        }\\n      }\\n\\n      /**\\n       * Handles modal methods on back/forward button clicks or any other event that triggers popstate.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_handleState',\\n      value: function _handleState(e) {\\n        if (window.location.hash === '#' + this.id && !this.isActive) {\\n          this.open();\\n        } else {\\n          this.close();\\n        }\\n      }\\n\\n      /**\\n       * Opens the modal controlled by `this.$anchor`, and closes all others by default.\\n       * @function\\n       * @fires Reveal#closeme\\n       * @fires Reveal#open\\n       */\\n\\n    }, {\\n      key: 'open',\\n      value: function open() {\\n        var _this3 = this;\\n\\n        if (this.options.deepLink) {\\n          var hash = '#' + this.id;\\n\\n          if (window.history.pushState) {\\n            window.history.pushState(null, null, hash);\\n          } else {\\n            window.location.hash = hash;\\n          }\\n        }\\n\\n        this.isActive = true;\\n\\n        // Make elements invisible, but remove display: none so we can get size and positioning\\n        this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);\\n        if (this.options.overlay) {\\n          this.$overlay.css({ 'visibility': 'hidden' }).show();\\n        }\\n\\n        this._updatePosition();\\n\\n        this.$element.hide().css({ 'visibility': '' });\\n\\n        if (this.$overlay) {\\n          this.$overlay.css({ 'visibility': '' }).hide();\\n          if (this.$element.hasClass('fast')) {\\n            this.$overlay.addClass('fast');\\n          } else if (this.$element.hasClass('slow')) {\\n            this.$overlay.addClass('slow');\\n          }\\n        }\\n\\n        if (!this.options.multipleOpened) {\\n          /**\\n           * Fires immediately before the modal opens.\\n           * Closes any other modals that are currently open\\n           * @event Reveal#closeme\\n           */\\n          this.$element.trigger('closeme.zf.reveal', this.id);\\n        }\\n        // Motion UI method of reveal\\n        if (this.options.animationIn) {\\n          var _this;\\n\\n          (function () {\\n            var afterAnimationFocus = function () {\\n              _this.$element.attr({\\n                'aria-hidden': false,\\n                'tabindex': -1\\n              }).focus();\\n              console.log('focus');\\n            };\\n\\n            _this = _this3;\\n\\n            if (_this3.options.overlay) {\\n              Foundation.Motion.animateIn(_this3.$overlay, 'fade-in');\\n            }\\n            Foundation.Motion.animateIn(_this3.$element, _this3.options.animationIn, function () {\\n              _this3.focusableElements = Foundation.Keyboard.findFocusable(_this3.$element);\\n              afterAnimationFocus();\\n            });\\n          })();\\n        }\\n        // jQuery method of reveal\\n        else {\\n            if (this.options.overlay) {\\n              this.$overlay.show(0);\\n            }\\n            this.$element.show(this.options.showDelay);\\n          }\\n\\n        // handle accessibility\\n        this.$element.attr({\\n          'aria-hidden': false,\\n          'tabindex': -1\\n        }).focus();\\n\\n        /**\\n         * Fires when the modal has successfully opened.\\n         * @event Reveal#open\\n         */\\n        this.$element.trigger('open.zf.reveal');\\n\\n        if (this.isMobile) {\\n          this.originalScrollPos = window.pageYOffset;\\n          $('html, body').addClass('is-reveal-open');\\n        } else {\\n          $('body').addClass('is-reveal-open');\\n        }\\n\\n        setTimeout(function () {\\n          _this3._extraHandlers();\\n        }, 0);\\n      }\\n\\n      /**\\n       * Adds extra event handlers for the body and window if necessary.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_extraHandlers',\\n      value: function _extraHandlers() {\\n        var _this = this;\\n        this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);\\n\\n        if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {\\n          $('body').on('click.zf.reveal', function (e) {\\n            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {\\n              return;\\n            }\\n            _this.close();\\n          });\\n        }\\n\\n        if (this.options.closeOnEsc) {\\n          $(window).on('keydown.zf.reveal', function (e) {\\n            Foundation.Keyboard.handleKey(e, 'Reveal', {\\n              close: function () {\\n                if (_this.options.closeOnEsc) {\\n                  _this.close();\\n                  _this.$anchor.focus();\\n                }\\n              }\\n            });\\n          });\\n        }\\n\\n        // lock focus within modal while tabbing\\n        this.$element.on('keydown.zf.reveal', function (e) {\\n          var $target = $(this);\\n          // handle keyboard event with keyboard util\\n          Foundation.Keyboard.handleKey(e, 'Reveal', {\\n            tab_forward: function () {\\n              if (_this.$element.find(':focus').is(_this.focusableElements.eq(-1))) {\\n                // left modal downwards, setting focus to first element\\n                _this.focusableElements.eq(0).focus();\\n                return true;\\n              }\\n              if (_this.focusableElements.length === 0) {\\n                // no focusable elements inside the modal at all, prevent tabbing in general\\n                return true;\\n              }\\n            },\\n            tab_backward: function () {\\n              if (_this.$element.find(':focus').is(_this.focusableElements.eq(0)) || _this.$element.is(':focus')) {\\n                // left modal upwards, setting focus to last element\\n                _this.focusableElements.eq(-1).focus();\\n                return true;\\n              }\\n              if (_this.focusableElements.length === 0) {\\n                // no focusable elements inside the modal at all, prevent tabbing in general\\n                return true;\\n              }\\n            },\\n            open: function () {\\n              if (_this.$element.find(':focus').is(_this.$element.find('[data-close]'))) {\\n                setTimeout(function () {\\n                  // set focus back to anchor if close button has been activated\\n                  _this.$anchor.focus();\\n                }, 1);\\n              } else if ($target.is(_this.focusableElements)) {\\n                // dont't trigger if acual element has focus (i.e. inputs, links, ...)\\n                _this.open();\\n              }\\n            },\\n            close: function () {\\n              if (_this.options.closeOnEsc) {\\n                _this.close();\\n                _this.$anchor.focus();\\n              }\\n            },\\n            handled: function (preventDefault) {\\n              if (preventDefault) {\\n                e.preventDefault();\\n              }\\n            }\\n          });\\n        });\\n      }\\n\\n      /**\\n       * Closes the modal.\\n       * @function\\n       * @fires Reveal#closed\\n       */\\n\\n    }, {\\n      key: 'close',\\n      value: function close() {\\n        if (!this.isActive || !this.$element.is(':visible')) {\\n          return false;\\n        }\\n        var _this = this;\\n\\n        // Motion UI method of hiding\\n        if (this.options.animationOut) {\\n          if (this.options.overlay) {\\n            Foundation.Motion.animateOut(this.$overlay, 'fade-out', finishUp);\\n          } else {\\n            finishUp();\\n          }\\n\\n          Foundation.Motion.animateOut(this.$element, this.options.animationOut);\\n        }\\n        // jQuery method of hiding\\n        else {\\n            if (this.options.overlay) {\\n              this.$overlay.hide(0, finishUp);\\n            } else {\\n              finishUp();\\n            }\\n\\n            this.$element.hide(this.options.hideDelay);\\n          }\\n\\n        // Conditionals to remove extra event listeners added on open\\n        if (this.options.closeOnEsc) {\\n          $(window).off('keydown.zf.reveal');\\n        }\\n\\n        if (!this.options.overlay && this.options.closeOnClick) {\\n          $('body').off('click.zf.reveal');\\n        }\\n\\n        this.$element.off('keydown.zf.reveal');\\n\\n        function finishUp() {\\n          if (_this.isMobile) {\\n            $('html, body').removeClass('is-reveal-open');\\n            if (_this.originalScrollPos) {\\n              $('body').scrollTop(_this.originalScrollPos);\\n              _this.originalScrollPos = null;\\n            }\\n          } else {\\n            $('body').removeClass('is-reveal-open');\\n          }\\n\\n          _this.$element.attr('aria-hidden', true);\\n\\n          /**\\n          * Fires when the modal is done closing.\\n          * @event Reveal#closed\\n          */\\n          _this.$element.trigger('closed.zf.reveal');\\n        }\\n\\n        /**\\n        * Resets the modal content\\n        * This prevents a running video to keep going in the background\\n        */\\n        if (this.options.resetOnClose) {\\n          this.$element.html(this.$element.html());\\n        }\\n\\n        this.isActive = false;\\n        if (_this.options.deepLink) {\\n          if (window.history.replaceState) {\\n            window.history.replaceState(\\\"\\\", document.title, window.location.pathname);\\n          } else {\\n            window.location.hash = '';\\n          }\\n        }\\n      }\\n\\n      /**\\n       * Toggles the open/closed state of a modal.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'toggle',\\n      value: function toggle() {\\n        if (this.isActive) {\\n          this.close();\\n        } else {\\n          this.open();\\n        }\\n      }\\n    }, {\\n      key: 'destroy',\\n\\n\\n      /**\\n       * Destroys an instance of a modal.\\n       * @function\\n       */\\n      value: function destroy() {\\n        if (this.options.overlay) {\\n          this.$element.appendTo($('body')); // move $element outside of $overlay to prevent error unregisterPlugin()\\n          this.$overlay.hide().off().remove();\\n        }\\n        this.$element.hide().off();\\n        this.$anchor.off('.zf');\\n        $(window).off('.zf.reveal:' + this.id);\\n\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return Reveal;\\n  }();\\n\\n  Reveal.defaults = {\\n    /**\\n     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\\n     * @option\\n     * @example 'slide-in-left'\\n     */\\n    animationIn: '',\\n    /**\\n     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\\n     * @option\\n     * @example 'slide-out-right'\\n     */\\n    animationOut: '',\\n    /**\\n     * Time, in ms, to delay the opening of a modal after a click if no animation used.\\n     * @option\\n     * @example 10\\n     */\\n    showDelay: 0,\\n    /**\\n     * Time, in ms, to delay the closing of a modal after a click if no animation used.\\n     * @option\\n     * @example 10\\n     */\\n    hideDelay: 0,\\n    /**\\n     * Allows a click on the body/overlay to close the modal.\\n     * @option\\n     * @example true\\n     */\\n    closeOnClick: true,\\n    /**\\n     * Allows the modal to close if the user presses the `ESCAPE` key.\\n     * @option\\n     * @example true\\n     */\\n    closeOnEsc: true,\\n    /**\\n     * If true, allows multiple modals to be displayed at once.\\n     * @option\\n     * @example false\\n     */\\n    multipleOpened: false,\\n    /**\\n     * Distance, in pixels, the modal should push down from the top of the screen.\\n     * @option\\n     * @example auto\\n     */\\n    vOffset: 'auto',\\n    /**\\n     * Distance, in pixels, the modal should push in from the side of the screen.\\n     * @option\\n     * @example auto\\n     */\\n    hOffset: 'auto',\\n    /**\\n     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.\\n     * @option\\n     * @example false\\n     */\\n    fullScreen: false,\\n    /**\\n     * Percentage of screen height the modal should push up from the bottom of the view.\\n     * @option\\n     * @example 10\\n     */\\n    btmOffsetPct: 10,\\n    /**\\n     * Allows the modal to generate an overlay div, which will cover the view when modal opens.\\n     * @option\\n     * @example true\\n     */\\n    overlay: true,\\n    /**\\n     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.\\n     * @option\\n     * @example false\\n     */\\n    resetOnClose: false,\\n    /**\\n     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.\\n     * @option\\n     * @example false\\n     */\\n    deepLink: false\\n  };\\n\\n  // Window exports\\n  Foundation.plugin(Reveal, 'Reveal');\\n\\n  function iPhoneSniff() {\\n    return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)\\n    );\\n  }\\n\\n  function androidSniff() {\\n    return (/Android/.test(window.navigator.userAgent)\\n    );\\n  }\\n\\n  function mobileSniff() {\\n    return iPhoneSniff() || androidSniff();\\n  }\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * Slider module.\\n   * @module foundation.slider\\n   * @requires foundation.util.motion\\n   * @requires foundation.util.triggers\\n   * @requires foundation.util.keyboard\\n   * @requires foundation.util.touch\\n   */\\n\\n  var Slider = function () {\\n    /**\\n     * Creates a new instance of a drilldown menu.\\n     * @class\\n     * @param {jQuery} element - jQuery object to make into an accordion menu.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n\\n    function Slider(element, options) {\\n      _classCallCheck(this, Slider);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, Slider.defaults, this.$element.data(), options);\\n\\n      this._init();\\n\\n      Foundation.registerPlugin(this, 'Slider');\\n      Foundation.Keyboard.register('Slider', {\\n        'ltr': {\\n          'ARROW_RIGHT': 'increase',\\n          'ARROW_UP': 'increase',\\n          'ARROW_DOWN': 'decrease',\\n          'ARROW_LEFT': 'decrease',\\n          'SHIFT_ARROW_RIGHT': 'increase_fast',\\n          'SHIFT_ARROW_UP': 'increase_fast',\\n          'SHIFT_ARROW_DOWN': 'decrease_fast',\\n          'SHIFT_ARROW_LEFT': 'decrease_fast'\\n        },\\n        'rtl': {\\n          'ARROW_LEFT': 'increase',\\n          'ARROW_RIGHT': 'decrease',\\n          'SHIFT_ARROW_LEFT': 'increase_fast',\\n          'SHIFT_ARROW_RIGHT': 'decrease_fast'\\n        }\\n      });\\n    }\\n\\n    /**\\n     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).\\n     * @function\\n     * @private\\n     */\\n\\n\\n    _createClass(Slider, [{\\n      key: '_init',\\n      value: function _init() {\\n        this.inputs = this.$element.find('input');\\n        this.handles = this.$element.find('[data-slider-handle]');\\n\\n        this.$handle = this.handles.eq(0);\\n        this.$input = this.inputs.length ? this.inputs.eq(0) : $('#' + this.$handle.attr('aria-controls'));\\n        this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);\\n\\n        var isDbl = false,\\n            _this = this;\\n        if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {\\n          this.options.disabled = true;\\n          this.$element.addClass(this.options.disabledClass);\\n        }\\n        if (!this.inputs.length) {\\n          this.inputs = $().add(this.$input);\\n          this.options.binding = true;\\n        }\\n        this._setInitAttr(0);\\n        this._events(this.$handle);\\n\\n        if (this.handles[1]) {\\n          this.options.doubleSided = true;\\n          this.$handle2 = this.handles.eq(1);\\n          this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : $('#' + this.$handle2.attr('aria-controls'));\\n\\n          if (!this.inputs[1]) {\\n            this.inputs = this.inputs.add(this.$input2);\\n          }\\n          isDbl = true;\\n\\n          this._setHandlePos(this.$handle, this.options.initialStart, true, function () {\\n\\n            _this._setHandlePos(_this.$handle2, _this.options.initialEnd, true);\\n          });\\n          // this.$handle.triggerHandler('click.zf.slider');\\n          this._setInitAttr(1);\\n          this._events(this.$handle2);\\n        }\\n\\n        if (!isDbl) {\\n          this._setHandlePos(this.$handle, this.options.initialStart, true);\\n        }\\n      }\\n\\n      /**\\n       * Sets the position of the selected handle and fill bar.\\n       * @function\\n       * @private\\n       * @param {jQuery} $hndl - the selected handle to move.\\n       * @param {Number} location - floating point between the start and end values of the slider bar.\\n       * @param {Function} cb - callback function to fire on completion.\\n       * @fires Slider#moved\\n       * @fires Slider#changed\\n       */\\n\\n    }, {\\n      key: '_setHandlePos',\\n      value: function _setHandlePos($hndl, location, noInvert, cb) {\\n        // don't move if the slider has been disabled since its initialization\\n        if (this.$element.hasClass(this.options.disabledClass)) {\\n          return;\\n        }\\n        //might need to alter that slightly for bars that will have odd number selections.\\n        location = parseFloat(location); //on input change events, convert string to number...grumble.\\n\\n        // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max\\n        if (location < this.options.start) {\\n          location = this.options.start;\\n        } else if (location > this.options.end) {\\n          location = this.options.end;\\n        }\\n\\n        var isDbl = this.options.doubleSided;\\n\\n        if (isDbl) {\\n          //this block is to prevent 2 handles from crossing eachother. Could/should be improved.\\n          if (this.handles.index($hndl) === 0) {\\n            var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));\\n            location = location >= h2Val ? h2Val - this.options.step : location;\\n          } else {\\n            var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));\\n            location = location <= h1Val ? h1Val + this.options.step : location;\\n          }\\n        }\\n\\n        //this is for single-handled vertical sliders, it adjusts the value to account for the slider being \\\"upside-down\\\"\\n        //for click and drag events, it's weird due to the scale(-1, 1) css property\\n        if (this.options.vertical && !noInvert) {\\n          location = this.options.end - location;\\n        }\\n\\n        var _this = this,\\n            vert = this.options.vertical,\\n            hOrW = vert ? 'height' : 'width',\\n            lOrT = vert ? 'top' : 'left',\\n            handleDim = $hndl[0].getBoundingClientRect()[hOrW],\\n            elemDim = this.$element[0].getBoundingClientRect()[hOrW],\\n\\n        //percentage of bar min/max value based on click or drag point\\n        pctOfBar = percent(location - this.options.start, this.options.end - this.options.start).toFixed(2),\\n\\n        //number of actual pixels to shift the handle, based on the percentage obtained above\\n        pxToMove = (elemDim - handleDim) * pctOfBar,\\n\\n        //percentage of bar to shift the handle\\n        movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal);\\n        //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value\\n        location = parseFloat(location.toFixed(this.options.decimal));\\n        // declare empty object for css adjustments, only used with 2 handled-sliders\\n        var css = {};\\n\\n        this._setValues($hndl, location);\\n\\n        // TODO update to calculate based on values set to respective inputs??\\n        if (isDbl) {\\n          var isLeftHndl = this.handles.index($hndl) === 0,\\n\\n          //empty variable, will be used for min-height/width for fill bar\\n          dim,\\n\\n          //percentage w/h of the handle compared to the slider bar\\n          handlePct = ~ ~(percent(handleDim, elemDim) * 100);\\n          //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar\\n          if (isLeftHndl) {\\n            //left or top percentage value to apply to the fill bar.\\n            css[lOrT] = movement + '%';\\n            //calculate the new min-height/width for the fill bar.\\n            dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct;\\n            //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider\\n            //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.\\n            if (cb && typeof cb === 'function') {\\n              cb();\\n            } //this is only needed for the initialization of 2 handled sliders\\n          } else {\\n              //just caching the value of the left/bottom handle's left/top property\\n              var handlePos = parseFloat(this.$handle[0].style[lOrT]);\\n              //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0\\n              //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself\\n              dim = movement - (isNaN(handlePos) ? this.options.initialStart / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;\\n            }\\n          // assign the min-height/width to our css object\\n          css['min-' + hOrW] = dim + '%';\\n        }\\n\\n        this.$element.one('finished.zf.animate', function () {\\n          /**\\n           * Fires when the handle is done moving.\\n           * @event Slider#moved\\n           */\\n          _this.$element.trigger('moved.zf.slider', [$hndl]);\\n        });\\n\\n        //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.\\n        var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;\\n\\n        Foundation.Move(moveTime, $hndl, function () {\\n          //adjusting the left/top property of the handle, based on the percentage calculated above\\n          $hndl.css(lOrT, movement + '%');\\n\\n          if (!_this.options.doubleSided) {\\n            //if single-handled, a simple method to expand the fill bar\\n            _this.$fill.css(hOrW, pctOfBar * 100 + '%');\\n          } else {\\n            //otherwise, use the css object we created above\\n            _this.$fill.css(css);\\n          }\\n        });\\n\\n        /**\\n         * Fires when the value has not been change for a given time.\\n         * @event Slider#changed\\n         */\\n        clearTimeout(_this.timeout);\\n        _this.timeout = setTimeout(function () {\\n          _this.$element.trigger('changed.zf.slider', [$hndl]);\\n        }, _this.options.changedDelay);\\n      }\\n\\n      /**\\n       * Sets the initial attribute for the slider element.\\n       * @function\\n       * @private\\n       * @param {Number} idx - index of the current handle/input to use.\\n       */\\n\\n    }, {\\n      key: '_setInitAttr',\\n      value: function _setInitAttr(idx) {\\n        var id = this.inputs.eq(idx).attr('id') || Foundation.GetYoDigits(6, 'slider');\\n        this.inputs.eq(idx).attr({\\n          'id': id,\\n          'max': this.options.end,\\n          'min': this.options.start,\\n          'step': this.options.step\\n        });\\n        this.handles.eq(idx).attr({\\n          'role': 'slider',\\n          'aria-controls': id,\\n          'aria-valuemax': this.options.end,\\n          'aria-valuemin': this.options.start,\\n          'aria-valuenow': idx === 0 ? this.options.initialStart : this.options.initialEnd,\\n          'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',\\n          'tabindex': 0\\n        });\\n      }\\n\\n      /**\\n       * Sets the input and `aria-valuenow` values for the slider element.\\n       * @function\\n       * @private\\n       * @param {jQuery} $handle - the currently selected handle.\\n       * @param {Number} val - floating point of the new value.\\n       */\\n\\n    }, {\\n      key: '_setValues',\\n      value: function _setValues($handle, val) {\\n        var idx = this.options.doubleSided ? this.handles.index($handle) : 0;\\n        this.inputs.eq(idx).val(val);\\n        $handle.attr('aria-valuenow', val);\\n      }\\n\\n      /**\\n       * Handles events on the slider element.\\n       * Calculates the new location of the current handle.\\n       * If there are two handles and the bar was clicked, it determines which handle to move.\\n       * @function\\n       * @private\\n       * @param {Object} e - the `event` object passed from the listener.\\n       * @param {jQuery} $handle - the current handle to calculate for, if selected.\\n       * @param {Number} val - floating point number for the new value of the slider.\\n       * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.\\n       */\\n\\n    }, {\\n      key: '_handleEvent',\\n      value: function _handleEvent(e, $handle, val) {\\n        var value, hasVal;\\n        if (!val) {\\n          //click or drag events\\n          e.preventDefault();\\n          var _this = this,\\n              vertical = this.options.vertical,\\n              param = vertical ? 'height' : 'width',\\n              direction = vertical ? 'top' : 'left',\\n              eventOffset = vertical ? e.pageY : e.pageX,\\n              halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,\\n              barDim = this.$element[0].getBoundingClientRect()[param],\\n              windowScroll = vertical ? $(window).scrollTop() : $(window).scrollLeft();\\n\\n          var elemOffset = this.$element.offset()[direction];\\n\\n          // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...\\n          // best way to guess this is simulated is if clientY == pageY\\n          if (e.clientY === e.pageY) {\\n            eventOffset = eventOffset + windowScroll;\\n          }\\n          var eventFromBar = eventOffset - elemOffset;\\n          var barXY;\\n          if (eventFromBar < 0) {\\n            barXY = 0;\\n          } else if (eventFromBar > barDim) {\\n            barXY = barDim;\\n          } else {\\n            barXY = eventFromBar;\\n          }\\n          offsetPct = percent(barXY, barDim);\\n\\n          value = (this.options.end - this.options.start) * offsetPct + this.options.start;\\n\\n          // turn everything around for RTL, yay math!\\n          if (Foundation.rtl() && !this.options.vertical) {\\n            value = this.options.end - value;\\n          }\\n\\n          value = _this._adjustValue(null, value);\\n          //boolean flag for the setHandlePos fn, specifically for vertical sliders\\n          hasVal = false;\\n\\n          if (!$handle) {\\n            //figure out which handle it is, pass it to the next function.\\n            var firstHndlPos = absPosition(this.$handle, direction, barXY, param),\\n                secndHndlPos = absPosition(this.$handle2, direction, barXY, param);\\n            $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;\\n          }\\n        } else {\\n          //change event on input\\n          value = this._adjustValue(null, val);\\n          hasVal = true;\\n        }\\n\\n        this._setHandlePos($handle, value, hasVal);\\n      }\\n\\n      /**\\n       * Adjustes value for handle in regard to step value. returns adjusted value\\n       * @function\\n       * @private\\n       * @param {jQuery} $handle - the selected handle.\\n       * @param {Number} value - value to adjust. used if $handle is falsy\\n       */\\n\\n    }, {\\n      key: '_adjustValue',\\n      value: function _adjustValue($handle, value) {\\n        var val,\\n            step = this.options.step,\\n            div = parseFloat(step / 2),\\n            left,\\n            prev_val,\\n            next_val;\\n        if (!!$handle) {\\n          val = parseFloat($handle.attr('aria-valuenow'));\\n        } else {\\n          val = value;\\n        }\\n        left = val % step;\\n        prev_val = val - left;\\n        next_val = prev_val + step;\\n        if (left === 0) {\\n          return val;\\n        }\\n        val = val >= prev_val + div ? next_val : prev_val;\\n        return val;\\n      }\\n\\n      /**\\n       * Adds event listeners to the slider elements.\\n       * @function\\n       * @private\\n       * @param {jQuery} $handle - the current handle to apply listeners to.\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events($handle) {\\n        var _this = this,\\n            curHandle,\\n            timer;\\n\\n        this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {\\n          var idx = _this.inputs.index($(this));\\n          _this._handleEvent(e, _this.handles.eq(idx), $(this).val());\\n        });\\n\\n        if (this.options.clickSelect) {\\n          this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {\\n            if (_this.$element.data('dragging')) {\\n              return false;\\n            }\\n\\n            if (!$(e.target).is('[data-slider-handle]')) {\\n              if (_this.options.doubleSided) {\\n                _this._handleEvent(e);\\n              } else {\\n                _this._handleEvent(e, _this.$handle);\\n              }\\n            }\\n          });\\n        }\\n\\n        if (this.options.draggable) {\\n          this.handles.addTouch();\\n\\n          var $body = $('body');\\n          $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {\\n            $handle.addClass('is-dragging');\\n            _this.$fill.addClass('is-dragging'); //\\n            _this.$element.data('dragging', true);\\n\\n            curHandle = $(e.currentTarget);\\n\\n            $body.on('mousemove.zf.slider', function (e) {\\n              e.preventDefault();\\n              _this._handleEvent(e, curHandle);\\n            }).on('mouseup.zf.slider', function (e) {\\n              _this._handleEvent(e, curHandle);\\n\\n              $handle.removeClass('is-dragging');\\n              _this.$fill.removeClass('is-dragging');\\n              _this.$element.data('dragging', false);\\n\\n              $body.off('mousemove.zf.slider mouseup.zf.slider');\\n            });\\n          })\\n          // prevent events triggered by touch\\n          .on('selectstart.zf.slider touchmove.zf.slider', function (e) {\\n            e.preventDefault();\\n          });\\n        }\\n\\n        $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {\\n          var _$handle = $(this),\\n              idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,\\n              oldValue = parseFloat(_this.inputs.eq(idx).val()),\\n              newValue;\\n\\n          // handle keyboard event with keyboard util\\n          Foundation.Keyboard.handleKey(e, 'Slider', {\\n            decrease: function () {\\n              newValue = oldValue - _this.options.step;\\n            },\\n            increase: function () {\\n              newValue = oldValue + _this.options.step;\\n            },\\n            decrease_fast: function () {\\n              newValue = oldValue - _this.options.step * 10;\\n            },\\n            increase_fast: function () {\\n              newValue = oldValue + _this.options.step * 10;\\n            },\\n            handled: function () {\\n              // only set handle pos when event was handled specially\\n              e.preventDefault();\\n              _this._setHandlePos(_$handle, newValue, true);\\n            }\\n          });\\n          /*if (newValue) { // if pressed key has special function, update value\\n            e.preventDefault();\\n            _this._setHandlePos(_$handle, newValue);\\n          }*/\\n        });\\n      }\\n\\n      /**\\n       * Destroys the slider plugin.\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this.handles.off('.zf.slider');\\n        this.inputs.off('.zf.slider');\\n        this.$element.off('.zf.slider');\\n\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return Slider;\\n  }();\\n\\n  Slider.defaults = {\\n    /**\\n     * Minimum value for the slider scale.\\n     * @option\\n     * @example 0\\n     */\\n    start: 0,\\n    /**\\n     * Maximum value for the slider scale.\\n     * @option\\n     * @example 100\\n     */\\n    end: 100,\\n    /**\\n     * Minimum value change per change event.\\n     * @option\\n     * @example 1\\n     */\\n    step: 1,\\n    /**\\n     * Value at which the handle/input *(left handle/first input)* should be set to on initialization.\\n     * @option\\n     * @example 0\\n     */\\n    initialStart: 0,\\n    /**\\n     * Value at which the right handle/second input should be set to on initialization.\\n     * @option\\n     * @example 100\\n     */\\n    initialEnd: 100,\\n    /**\\n     * Allows the input to be located outside the container and visible. Set to by the JS\\n     * @option\\n     * @example false\\n     */\\n    binding: false,\\n    /**\\n     * Allows the user to click/tap on the slider bar to select a value.\\n     * @option\\n     * @example true\\n     */\\n    clickSelect: true,\\n    /**\\n     * Set to true and use the `vertical` class to change alignment to vertical.\\n     * @option\\n     * @example false\\n     */\\n    vertical: false,\\n    /**\\n     * Allows the user to drag the slider handle(s) to select a value.\\n     * @option\\n     * @example true\\n     */\\n    draggable: true,\\n    /**\\n     * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.\\n     * @option\\n     * @example false\\n     */\\n    disabled: false,\\n    /**\\n     * Allows the use of two handles. Double checked by the JS. Changes some logic handling.\\n     * @option\\n     * @example false\\n     */\\n    doubleSided: false,\\n    /**\\n     * Potential future feature.\\n     */\\n    // steps: 100,\\n    /**\\n     * Number of decimal places the plugin should go to for floating point precision.\\n     * @option\\n     * @example 2\\n     */\\n    decimal: 2,\\n    /**\\n     * Time delay for dragged elements.\\n     */\\n    // dragDelay: 0,\\n    /**\\n     * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.\\n     * @option\\n     * @example 200\\n     */\\n    moveTime: 200, //update this if changing the transition time in the sass\\n    /**\\n     * Class applied to disabled sliders.\\n     * @option\\n     * @example 'disabled'\\n     */\\n    disabledClass: 'disabled',\\n    /**\\n     * Will invert the default layout for a vertical<span data-tooltip title=\\\"who would do this???\\\"> </span>slider.\\n     * @option\\n     * @example false\\n     */\\n    invertVertical: false,\\n    /**\\n     * Milliseconds before the `changed.zf-slider` event is triggered after value change.\\n     * @option\\n     * @example 500\\n     */\\n    changedDelay: 500\\n  };\\n\\n  function percent(frac, num) {\\n    return frac / num;\\n  }\\n  function absPosition($handle, dir, clickPos, param) {\\n    return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);\\n  }\\n\\n  // Window exports\\n  Foundation.plugin(Slider, 'Slider');\\n}(jQuery);\\n\\n//*********this is in case we go to static, absolute positions instead of dynamic positioning********\\n// this.setSteps(function() {\\n//   _this._events();\\n//   var initStart = _this.options.positions[_this.options.initialStart - 1] || null;\\n//   var initEnd = _this.options.initialEnd ? _this.options.position[_this.options.initialEnd - 1] : null;\\n//   if (initStart || initEnd) {\\n//     _this._handleEvent(initStart, initEnd);\\n//   }\\n// });\\n\\n//***********the other part of absolute positions*************\\n// Slider.prototype.setSteps = function(cb) {\\n//   var posChange = this.$element.outerWidth() / this.options.steps;\\n//   var counter = 0\\n//   while(counter < this.options.steps) {\\n//     if (counter) {\\n//       this.options.positions.push(this.options.positions[counter - 1] + posChange);\\n//     } else {\\n//       this.options.positions.push(posChange);\\n//     }\\n//     counter++;\\n//   }\\n//   cb();\\n// };\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * Sticky module.\\n   * @module foundation.sticky\\n   * @requires foundation.util.triggers\\n   * @requires foundation.util.mediaQuery\\n   */\\n\\n  var Sticky = function () {\\n    /**\\n     * Creates a new instance of a sticky thing.\\n     * @class\\n     * @param {jQuery} element - jQuery object to make sticky.\\n     * @param {Object} options - options object passed when creating the element programmatically.\\n     */\\n\\n    function Sticky(element, options) {\\n      _classCallCheck(this, Sticky);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);\\n\\n      this._init();\\n\\n      Foundation.registerPlugin(this, 'Sticky');\\n    }\\n\\n    /**\\n     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes\\n     * @function\\n     * @private\\n     */\\n\\n\\n    _createClass(Sticky, [{\\n      key: '_init',\\n      value: function _init() {\\n        var $parent = this.$element.parent('[data-sticky-container]'),\\n            id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),\\n            _this = this;\\n\\n        if (!$parent.length) {\\n          this.wasWrapped = true;\\n        }\\n        this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);\\n        this.$container.addClass(this.options.containerClass);\\n\\n        this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id });\\n\\n        this.scrollCount = this.options.checkEvery;\\n        this.isStuck = false;\\n        $(window).one('load.zf.sticky', function () {\\n          if (_this.options.anchor !== '') {\\n            _this.$anchor = $('#' + _this.options.anchor);\\n          } else {\\n            _this._parsePoints();\\n          }\\n\\n          _this._setSizes(function () {\\n            _this._calc(false);\\n          });\\n          _this._events(id.split('-').reverse().join('-'));\\n        });\\n      }\\n\\n      /**\\n       * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_parsePoints',\\n      value: function _parsePoints() {\\n        var top = this.options.topAnchor == \\\"\\\" ? 1 : this.options.topAnchor,\\n            btm = this.options.btmAnchor == \\\"\\\" ? document.documentElement.scrollHeight : this.options.btmAnchor,\\n            pts = [top, btm],\\n            breaks = {};\\n        for (var i = 0, len = pts.length; i < len && pts[i]; i++) {\\n          var pt;\\n          if (typeof pts[i] === 'number') {\\n            pt = pts[i];\\n          } else {\\n            var place = pts[i].split(':'),\\n                anchor = $('#' + place[0]);\\n\\n            pt = anchor.offset().top;\\n            if (place[1] && place[1].toLowerCase() === 'bottom') {\\n              pt += anchor[0].getBoundingClientRect().height;\\n            }\\n          }\\n          breaks[i] = pt;\\n        }\\n\\n        this.points = breaks;\\n        return;\\n      }\\n\\n      /**\\n       * Adds event handlers for the scrolling element.\\n       * @private\\n       * @param {String} id - psuedo-random id for unique scroll event listener.\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events(id) {\\n        var _this = this,\\n            scrollListener = this.scrollListener = 'scroll.zf.' + id;\\n        if (this.isOn) {\\n          return;\\n        }\\n        if (this.canStick) {\\n          this.isOn = true;\\n          $(window).off(scrollListener).on(scrollListener, function (e) {\\n            if (_this.scrollCount === 0) {\\n              _this.scrollCount = _this.options.checkEvery;\\n              _this._setSizes(function () {\\n                _this._calc(false, window.pageYOffset);\\n              });\\n            } else {\\n              _this.scrollCount--;\\n              _this._calc(false, window.pageYOffset);\\n            }\\n          });\\n        }\\n\\n        this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {\\n          _this._setSizes(function () {\\n            _this._calc(false);\\n            if (_this.canStick) {\\n              if (!_this.isOn) {\\n                _this._events(id);\\n              }\\n            } else if (_this.isOn) {\\n              _this._pauseListeners(scrollListener);\\n            }\\n          });\\n        });\\n      }\\n\\n      /**\\n       * Removes event handlers for scroll and change events on anchor.\\n       * @fires Sticky#pause\\n       * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`\\n       */\\n\\n    }, {\\n      key: '_pauseListeners',\\n      value: function _pauseListeners(scrollListener) {\\n        this.isOn = false;\\n        $(window).off(scrollListener);\\n\\n        /**\\n         * Fires when the plugin is paused due to resize event shrinking the view.\\n         * @event Sticky#pause\\n         * @private\\n         */\\n        this.$element.trigger('pause.zf.sticky');\\n      }\\n\\n      /**\\n       * Called on every `scroll` event and on `_init`\\n       * fires functions based on booleans and cached values\\n       * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.\\n       * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.\\n       */\\n\\n    }, {\\n      key: '_calc',\\n      value: function _calc(checkSizes, scroll) {\\n        if (checkSizes) {\\n          this._setSizes();\\n        }\\n\\n        if (!this.canStick) {\\n          if (this.isStuck) {\\n            this._removeSticky(true);\\n          }\\n          return false;\\n        }\\n\\n        if (!scroll) {\\n          scroll = window.pageYOffset;\\n        }\\n\\n        if (scroll >= this.topPoint) {\\n          if (scroll <= this.bottomPoint) {\\n            if (!this.isStuck) {\\n              this._setSticky();\\n            }\\n          } else {\\n            if (this.isStuck) {\\n              this._removeSticky(false);\\n            }\\n          }\\n        } else {\\n          if (this.isStuck) {\\n            this._removeSticky(true);\\n          }\\n        }\\n      }\\n\\n      /**\\n       * Causes the $element to become stuck.\\n       * Adds `position: fixed;`, and helper classes.\\n       * @fires Sticky#stuckto\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_setSticky',\\n      value: function _setSticky() {\\n        var _this = this,\\n            stickTo = this.options.stickTo,\\n            mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',\\n            notStuckTo = stickTo === 'top' ? 'bottom' : 'top',\\n            css = {};\\n\\n        css[mrgn] = this.options[mrgn] + 'em';\\n        css[stickTo] = 0;\\n        css[notStuckTo] = 'auto';\\n        css['left'] = this.$container.offset().left + parseInt(window.getComputedStyle(this.$container[0])[\\\"padding-left\\\"], 10);\\n        this.isStuck = true;\\n        this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css)\\n        /**\\n         * Fires when the $element has become `position: fixed;`\\n         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`\\n         * @event Sticky#stuckto\\n         */\\n        .trigger('sticky.zf.stuckto:' + stickTo);\\n        this.$element.on(\\\"transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd\\\", function () {\\n          _this._setSizes();\\n        });\\n      }\\n\\n      /**\\n       * Causes the $element to become unstuck.\\n       * Removes `position: fixed;`, and helper classes.\\n       * Adds other helper classes.\\n       * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.\\n       * @fires Sticky#unstuckfrom\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_removeSticky',\\n      value: function _removeSticky(isTop) {\\n        var stickTo = this.options.stickTo,\\n            stickToTop = stickTo === 'top',\\n            css = {},\\n            anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,\\n            mrgn = stickToTop ? 'marginTop' : 'marginBottom',\\n            notStuckTo = stickToTop ? 'bottom' : 'top',\\n            topOrBottom = isTop ? 'top' : 'bottom';\\n\\n        css[mrgn] = 0;\\n\\n        css['bottom'] = 'auto';\\n        if (isTop) {\\n          css['top'] = 0;\\n        } else {\\n          css['top'] = anchorPt;\\n        }\\n\\n        css['left'] = '';\\n        this.isStuck = false;\\n        this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css)\\n        /**\\n         * Fires when the $element has become anchored.\\n         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`\\n         * @event Sticky#unstuckfrom\\n         */\\n        .trigger('sticky.zf.unstuckfrom:' + topOrBottom);\\n      }\\n\\n      /**\\n       * Sets the $element and $container sizes for plugin.\\n       * Calls `_setBreakPoints`.\\n       * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_setSizes',\\n      value: function _setSizes(cb) {\\n        this.canStick = Foundation.MediaQuery.atLeast(this.options.stickyOn);\\n        if (!this.canStick) {\\n          cb();\\n        }\\n        var _this = this,\\n            newElemWidth = this.$container[0].getBoundingClientRect().width,\\n            comp = window.getComputedStyle(this.$container[0]),\\n            pdng = parseInt(comp['padding-right'], 10);\\n\\n        if (this.$anchor && this.$anchor.length) {\\n          this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;\\n        } else {\\n          this._parsePoints();\\n        }\\n\\n        this.$element.css({\\n          'max-width': newElemWidth - pdng + 'px'\\n        });\\n\\n        var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;\\n        if (this.$element.css(\\\"display\\\") == \\\"none\\\") {\\n          newContainerHeight = 0;\\n        }\\n        this.containerHeight = newContainerHeight;\\n        this.$container.css({\\n          height: newContainerHeight\\n        });\\n        this.elemHeight = newContainerHeight;\\n\\n        if (this.isStuck) {\\n          this.$element.css({ \\\"left\\\": this.$container.offset().left + parseInt(comp['padding-left'], 10) });\\n        }\\n\\n        this._setBreakPoints(newContainerHeight, function () {\\n          if (cb) {\\n            cb();\\n          }\\n        });\\n      }\\n\\n      /**\\n       * Sets the upper and lower breakpoints for the element to become sticky/unsticky.\\n       * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.\\n       * @param {Function} cb - optional callback function to be called on completion.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_setBreakPoints',\\n      value: function _setBreakPoints(elemHeight, cb) {\\n        if (!this.canStick) {\\n          if (cb) {\\n            cb();\\n          } else {\\n            return false;\\n          }\\n        }\\n        var mTop = emCalc(this.options.marginTop),\\n            mBtm = emCalc(this.options.marginBottom),\\n            topPoint = this.points ? this.points[0] : this.$anchor.offset().top,\\n            bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,\\n\\n        // topPoint = this.$anchor.offset().top || this.points[0],\\n        // bottomPoint = topPoint + this.anchorHeight || this.points[1],\\n        winHeight = window.innerHeight;\\n\\n        if (this.options.stickTo === 'top') {\\n          topPoint -= mTop;\\n          bottomPoint -= elemHeight + mTop;\\n        } else if (this.options.stickTo === 'bottom') {\\n          topPoint -= winHeight - (elemHeight + mBtm);\\n          bottomPoint -= winHeight - mBtm;\\n        } else {\\n          //this would be the stickTo: both option... tricky\\n        }\\n\\n        this.topPoint = topPoint;\\n        this.bottomPoint = bottomPoint;\\n\\n        if (cb) {\\n          cb();\\n        }\\n      }\\n\\n      /**\\n       * Destroys the current sticky element.\\n       * Resets the element to the top position first.\\n       * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this._removeSticky(true);\\n\\n        this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({\\n          height: '',\\n          top: '',\\n          bottom: '',\\n          'max-width': ''\\n        }).off('resizeme.zf.trigger');\\n        if (this.$anchor && this.$anchor.length) {\\n          this.$anchor.off('change.zf.sticky');\\n        }\\n        $(window).off(this.scrollListener);\\n\\n        if (this.wasWrapped) {\\n          this.$element.unwrap();\\n        } else {\\n          this.$container.removeClass(this.options.containerClass).css({\\n            height: ''\\n          });\\n        }\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return Sticky;\\n  }();\\n\\n  Sticky.defaults = {\\n    /**\\n     * Customizable container template. Add your own classes for styling and sizing.\\n     * @option\\n     * @example '&lt;div data-sticky-container class=\\\"small-6 columns\\\"&gt;&lt;/div&gt;'\\n     */\\n    container: '<div data-sticky-container></div>',\\n    /**\\n     * Location in the view the element sticks to.\\n     * @option\\n     * @example 'top'\\n     */\\n    stickTo: 'top',\\n    /**\\n     * If anchored to a single element, the id of that element.\\n     * @option\\n     * @example 'exampleId'\\n     */\\n    anchor: '',\\n    /**\\n     * If using more than one element as anchor points, the id of the top anchor.\\n     * @option\\n     * @example 'exampleId:top'\\n     */\\n    topAnchor: '',\\n    /**\\n     * If using more than one element as anchor points, the id of the bottom anchor.\\n     * @option\\n     * @example 'exampleId:bottom'\\n     */\\n    btmAnchor: '',\\n    /**\\n     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.\\n     * @option\\n     * @example 1\\n     */\\n    marginTop: 1,\\n    /**\\n     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.\\n     * @option\\n     * @example 1\\n     */\\n    marginBottom: 1,\\n    /**\\n     * Breakpoint string that is the minimum screen size an element should become sticky.\\n     * @option\\n     * @example 'medium'\\n     */\\n    stickyOn: 'medium',\\n    /**\\n     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.\\n     * @option\\n     * @example 'sticky'\\n     */\\n    stickyClass: 'sticky',\\n    /**\\n     * Class applied to sticky container. Foundation defaults to `sticky-container`.\\n     * @option\\n     * @example 'sticky-container'\\n     */\\n    containerClass: 'sticky-container',\\n    /**\\n     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.\\n     * @option\\n     * @example 50\\n     */\\n    checkEvery: -1\\n  };\\n\\n  /**\\n   * Helper function to calculate em values\\n   * @param Number {em} - number of em's to calculate into pixels\\n   */\\n  function emCalc(em) {\\n    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;\\n  }\\n\\n  // Window exports\\n  Foundation.plugin(Sticky, 'Sticky');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * Tabs module.\\n   * @module foundation.tabs\\n   * @requires foundation.util.keyboard\\n   * @requires foundation.util.timerAndImageLoader if tabs contain images\\n   */\\n\\n  var Tabs = function () {\\n    /**\\n     * Creates a new instance of tabs.\\n     * @class\\n     * @fires Tabs#init\\n     * @param {jQuery} element - jQuery object to make into tabs.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n\\n    function Tabs(element, options) {\\n      _classCallCheck(this, Tabs);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, Tabs.defaults, this.$element.data(), options);\\n\\n      this._init();\\n      Foundation.registerPlugin(this, 'Tabs');\\n      Foundation.Keyboard.register('Tabs', {\\n        'ENTER': 'open',\\n        'SPACE': 'open',\\n        'ARROW_RIGHT': 'next',\\n        'ARROW_UP': 'previous',\\n        'ARROW_DOWN': 'next',\\n        'ARROW_LEFT': 'previous'\\n        // 'TAB': 'next',\\n        // 'SHIFT_TAB': 'previous'\\n      });\\n    }\\n\\n    /**\\n     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.\\n     * @private\\n     */\\n\\n\\n    _createClass(Tabs, [{\\n      key: '_init',\\n      value: function _init() {\\n        var _this = this;\\n\\n        this.$tabTitles = this.$element.find('.' + this.options.linkClass);\\n        this.$tabContent = $('[data-tabs-content=\\\"' + this.$element[0].id + '\\\"]');\\n\\n        this.$tabTitles.each(function () {\\n          var $elem = $(this),\\n              $link = $elem.find('a'),\\n              isActive = $elem.hasClass('is-active'),\\n              hash = $link[0].hash.slice(1),\\n              linkId = $link[0].id ? $link[0].id : hash + '-label',\\n              $tabContent = $('#' + hash);\\n\\n          $elem.attr({ 'role': 'presentation' });\\n\\n          $link.attr({\\n            'role': 'tab',\\n            'aria-controls': hash,\\n            'aria-selected': isActive,\\n            'id': linkId\\n          });\\n\\n          $tabContent.attr({\\n            'role': 'tabpanel',\\n            'aria-hidden': !isActive,\\n            'aria-labelledby': linkId\\n          });\\n\\n          if (isActive && _this.options.autoFocus) {\\n            $link.focus();\\n          }\\n        });\\n\\n        if (this.options.matchHeight) {\\n          var $images = this.$tabContent.find('img');\\n\\n          if ($images.length) {\\n            Foundation.onImagesLoaded($images, this._setHeight.bind(this));\\n          } else {\\n            this._setHeight();\\n          }\\n        }\\n\\n        this._events();\\n      }\\n\\n      /**\\n       * Adds event handlers for items within the tabs.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events() {\\n        this._addKeyHandler();\\n        this._addClickHandler();\\n        this._setHeightMqHandler = null;\\n\\n        if (this.options.matchHeight) {\\n          this._setHeightMqHandler = this._setHeight.bind(this);\\n\\n          $(window).on('changed.zf.mediaquery', this._setHeightMqHandler);\\n        }\\n      }\\n\\n      /**\\n       * Adds click handlers for items within the tabs.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_addClickHandler',\\n      value: function _addClickHandler() {\\n        var _this = this;\\n\\n        this.$element.off('click.zf.tabs').on('click.zf.tabs', '.' + this.options.linkClass, function (e) {\\n          e.preventDefault();\\n          e.stopPropagation();\\n          if ($(this).hasClass('is-active')) {\\n            return;\\n          }\\n          _this._handleTabChange($(this));\\n        });\\n      }\\n\\n      /**\\n       * Adds keyboard event handlers for items within the tabs.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_addKeyHandler',\\n      value: function _addKeyHandler() {\\n        var _this = this;\\n        var $firstTab = _this.$element.find('li:first-of-type');\\n        var $lastTab = _this.$element.find('li:last-of-type');\\n\\n        this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {\\n          if (e.which === 9) return;\\n\\n          var $element = $(this),\\n              $elements = $element.parent('ul').children('li'),\\n              $prevElement,\\n              $nextElement;\\n\\n          $elements.each(function (i) {\\n            if ($(this).is($element)) {\\n              if (_this.options.wrapOnKeys) {\\n                $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);\\n                $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);\\n              } else {\\n                $prevElement = $elements.eq(Math.max(0, i - 1));\\n                $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));\\n              }\\n              return;\\n            }\\n          });\\n\\n          // handle keyboard event with keyboard util\\n          Foundation.Keyboard.handleKey(e, 'Tabs', {\\n            open: function () {\\n              $element.find('[role=\\\"tab\\\"]').focus();\\n              _this._handleTabChange($element);\\n            },\\n            previous: function () {\\n              $prevElement.find('[role=\\\"tab\\\"]').focus();\\n              _this._handleTabChange($prevElement);\\n            },\\n            next: function () {\\n              $nextElement.find('[role=\\\"tab\\\"]').focus();\\n              _this._handleTabChange($nextElement);\\n            },\\n            handled: function () {\\n              e.stopPropagation();\\n              e.preventDefault();\\n            }\\n          });\\n        });\\n      }\\n\\n      /**\\n       * Opens the tab `$targetContent` defined by `$target`.\\n       * @param {jQuery} $target - Tab to open.\\n       * @fires Tabs#change\\n       * @function\\n       */\\n\\n    }, {\\n      key: '_handleTabChange',\\n      value: function _handleTabChange($target) {\\n        var $tabLink = $target.find('[role=\\\"tab\\\"]'),\\n            hash = $tabLink[0].hash,\\n            $targetContent = this.$tabContent.find(hash),\\n            $oldTab = this.$element.find('.' + this.options.linkClass + '.is-active').removeClass('is-active').find('[role=\\\"tab\\\"]').attr({ 'aria-selected': 'false' });\\n\\n        $('#' + $oldTab.attr('aria-controls')).removeClass('is-active').attr({ 'aria-hidden': 'true' });\\n\\n        $target.addClass('is-active');\\n\\n        $tabLink.attr({ 'aria-selected': 'true' });\\n\\n        $targetContent.addClass('is-active').attr({ 'aria-hidden': 'false' });\\n\\n        /**\\n         * Fires when the plugin has successfully changed tabs.\\n         * @event Tabs#change\\n         */\\n        this.$element.trigger('change.zf.tabs', [$target]);\\n      }\\n\\n      /**\\n       * Public method for selecting a content pane to display.\\n       * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'selectTab',\\n      value: function selectTab(elem) {\\n        var idStr;\\n\\n        if (typeof elem === 'object') {\\n          idStr = elem[0].id;\\n        } else {\\n          idStr = elem;\\n        }\\n\\n        if (idStr.indexOf('#') < 0) {\\n          idStr = '#' + idStr;\\n        }\\n\\n        var $target = this.$tabTitles.find('[href=\\\"' + idStr + '\\\"]').parent('.' + this.options.linkClass);\\n\\n        this._handleTabChange($target);\\n      }\\n    }, {\\n      key: '_setHeight',\\n\\n      /**\\n       * Sets the height of each panel to the height of the tallest panel.\\n       * If enabled in options, gets called on media query change.\\n       * If loading content via external source, can be called directly or with _reflow.\\n       * @function\\n       * @private\\n       */\\n      value: function _setHeight() {\\n        var max = 0;\\n        this.$tabContent.find('.' + this.options.panelClass).css('height', '').each(function () {\\n          var panel = $(this),\\n              isActive = panel.hasClass('is-active');\\n\\n          if (!isActive) {\\n            panel.css({ 'visibility': 'hidden', 'display': 'block' });\\n          }\\n\\n          var temp = this.getBoundingClientRect().height;\\n\\n          if (!isActive) {\\n            panel.css({\\n              'visibility': '',\\n              'display': ''\\n            });\\n          }\\n\\n          max = temp > max ? temp : max;\\n        }).css('height', max + 'px');\\n      }\\n\\n      /**\\n       * Destroys an instance of an tabs.\\n       * @fires Tabs#destroyed\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this.$element.find('.' + this.options.linkClass).off('.zf.tabs').hide().end().find('.' + this.options.panelClass).hide();\\n\\n        if (this.options.matchHeight) {\\n          if (this._setHeightMqHandler != null) {\\n            $(window).off('changed.zf.mediaquery', this._setHeightMqHandler);\\n          }\\n        }\\n\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return Tabs;\\n  }();\\n\\n  Tabs.defaults = {\\n    /**\\n     * Allows the window to scroll to content of active pane on load if set to true.\\n     * @option\\n     * @example false\\n     */\\n    autoFocus: false,\\n\\n    /**\\n     * Allows keyboard input to 'wrap' around the tab links.\\n     * @option\\n     * @example true\\n     */\\n    wrapOnKeys: true,\\n\\n    /**\\n     * Allows the tab content panes to match heights if set to true.\\n     * @option\\n     * @example false\\n     */\\n    matchHeight: false,\\n\\n    /**\\n     * Class applied to `li`'s in tab link list.\\n     * @option\\n     * @example 'tabs-title'\\n     */\\n    linkClass: 'tabs-title',\\n\\n    /**\\n     * Class applied to the content containers.\\n     * @option\\n     * @example 'tabs-panel'\\n     */\\n    panelClass: 'tabs-panel'\\n  };\\n\\n  function checkClass($elem) {\\n    return $elem.hasClass('is-active');\\n  }\\n\\n  // Window exports\\n  Foundation.plugin(Tabs, 'Tabs');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * Toggler module.\\n   * @module foundation.toggler\\n   * @requires foundation.util.motion\\n   * @requires foundation.util.triggers\\n   */\\n\\n  var Toggler = function () {\\n    /**\\n     * Creates a new instance of Toggler.\\n     * @class\\n     * @fires Toggler#init\\n     * @param {Object} element - jQuery object to add the trigger to.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n\\n    function Toggler(element, options) {\\n      _classCallCheck(this, Toggler);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, Toggler.defaults, element.data(), options);\\n      this.className = '';\\n\\n      this._init();\\n      this._events();\\n\\n      Foundation.registerPlugin(this, 'Toggler');\\n    }\\n\\n    /**\\n     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.\\n     * @function\\n     * @private\\n     */\\n\\n\\n    _createClass(Toggler, [{\\n      key: '_init',\\n      value: function _init() {\\n        var input;\\n        // Parse animation classes if they were set\\n        if (this.options.animate) {\\n          input = this.options.animate.split(' ');\\n\\n          this.animationIn = input[0];\\n          this.animationOut = input[1] || null;\\n        }\\n        // Otherwise, parse toggle class\\n        else {\\n            input = this.$element.data('toggler');\\n            // Allow for a . at the beginning of the string\\n            this.className = input[0] === '.' ? input.slice(1) : input;\\n          }\\n\\n        // Add ARIA attributes to triggers\\n        var id = this.$element[0].id;\\n        $('[data-open=\\\"' + id + '\\\"], [data-close=\\\"' + id + '\\\"], [data-toggle=\\\"' + id + '\\\"]').attr('aria-controls', id);\\n        // If the target is hidden, add aria-hidden\\n        this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);\\n      }\\n\\n      /**\\n       * Initializes events for the toggle trigger.\\n       * @function\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events() {\\n        this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));\\n      }\\n\\n      /**\\n       * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was \\\"on\\\" or \\\"off\\\".\\n       * @function\\n       * @fires Toggler#on\\n       * @fires Toggler#off\\n       */\\n\\n    }, {\\n      key: 'toggle',\\n      value: function toggle() {\\n        this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();\\n      }\\n    }, {\\n      key: '_toggleClass',\\n      value: function _toggleClass() {\\n        this.$element.toggleClass(this.className);\\n\\n        var isOn = this.$element.hasClass(this.className);\\n        if (isOn) {\\n          /**\\n           * Fires if the target element has the class after a toggle.\\n           * @event Toggler#on\\n           */\\n          this.$element.trigger('on.zf.toggler');\\n        } else {\\n          /**\\n           * Fires if the target element does not have the class after a toggle.\\n           * @event Toggler#off\\n           */\\n          this.$element.trigger('off.zf.toggler');\\n        }\\n\\n        this._updateARIA(isOn);\\n      }\\n    }, {\\n      key: '_toggleAnimate',\\n      value: function _toggleAnimate() {\\n        var _this = this;\\n\\n        if (this.$element.is(':hidden')) {\\n          Foundation.Motion.animateIn(this.$element, this.animationIn, function () {\\n            _this._updateARIA(true);\\n            this.trigger('on.zf.toggler');\\n          });\\n        } else {\\n          Foundation.Motion.animateOut(this.$element, this.animationOut, function () {\\n            _this._updateARIA(false);\\n            this.trigger('off.zf.toggler');\\n          });\\n        }\\n      }\\n    }, {\\n      key: '_updateARIA',\\n      value: function _updateARIA(isOn) {\\n        this.$element.attr('aria-expanded', isOn ? true : false);\\n      }\\n\\n      /**\\n       * Destroys the instance of Toggler on the element.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this.$element.off('.zf.toggler');\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return Toggler;\\n  }();\\n\\n  Toggler.defaults = {\\n    /**\\n     * Tells the plugin if the element should animated when toggled.\\n     * @option\\n     * @example false\\n     */\\n    animate: false\\n  };\\n\\n  // Window exports\\n  Foundation.plugin(Toggler, 'Toggler');\\n}(jQuery);\\n'use strict';\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n!function ($) {\\n\\n  /**\\n   * Tooltip module.\\n   * @module foundation.tooltip\\n   * @requires foundation.util.box\\n   * @requires foundation.util.triggers\\n   */\\n\\n  var Tooltip = function () {\\n    /**\\n     * Creates a new instance of a Tooltip.\\n     * @class\\n     * @fires Tooltip#init\\n     * @param {jQuery} element - jQuery object to attach a tooltip to.\\n     * @param {Object} options - object to extend the default configuration.\\n     */\\n\\n    function Tooltip(element, options) {\\n      _classCallCheck(this, Tooltip);\\n\\n      this.$element = element;\\n      this.options = $.extend({}, Tooltip.defaults, this.$element.data(), options);\\n\\n      this.isActive = false;\\n      this.isClick = false;\\n      this._init();\\n\\n      Foundation.registerPlugin(this, 'Tooltip');\\n    }\\n\\n    /**\\n     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.\\n     * @private\\n     */\\n\\n\\n    _createClass(Tooltip, [{\\n      key: '_init',\\n      value: function _init() {\\n        var elemId = this.$element.attr('aria-describedby') || Foundation.GetYoDigits(6, 'tooltip');\\n\\n        this.options.positionClass = this.options.positionClass || this._getPositionClass(this.$element);\\n        this.options.tipText = this.options.tipText || this.$element.attr('title');\\n        this.template = this.options.template ? $(this.options.template) : this._buildTemplate(elemId);\\n\\n        this.template.appendTo(document.body).text(this.options.tipText).hide();\\n\\n        this.$element.attr({\\n          'title': '',\\n          'aria-describedby': elemId,\\n          'data-yeti-box': elemId,\\n          'data-toggle': elemId,\\n          'data-resize': elemId\\n        }).addClass(this.triggerClass);\\n\\n        //helper variables to track movement on collisions\\n        this.usedPositions = [];\\n        this.counter = 4;\\n        this.classChanged = false;\\n\\n        this._events();\\n      }\\n\\n      /**\\n       * Grabs the current positioning class, if present, and returns the value or an empty string.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_getPositionClass',\\n      value: function _getPositionClass(element) {\\n        if (!element) {\\n          return '';\\n        }\\n        // var position = element.attr('class').match(/top|left|right/g);\\n        var position = element[0].className.match(/\\\\b(top|left|right)\\\\b/g);\\n        position = position ? position[0] : '';\\n        return position;\\n      }\\n    }, {\\n      key: '_buildTemplate',\\n\\n      /**\\n       * builds the tooltip element, adds attributes, and returns the template.\\n       * @private\\n       */\\n      value: function _buildTemplate(id) {\\n        var templateClasses = (this.options.tooltipClass + ' ' + this.options.positionClass + ' ' + this.options.templateClasses).trim();\\n        var $template = $('<div></div>').addClass(templateClasses).attr({\\n          'role': 'tooltip',\\n          'aria-hidden': true,\\n          'data-is-active': false,\\n          'data-is-focus': false,\\n          'id': id\\n        });\\n        return $template;\\n      }\\n\\n      /**\\n       * Function that gets called if a collision event is detected.\\n       * @param {String} position - positioning class to try\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_reposition',\\n      value: function _reposition(position) {\\n        this.usedPositions.push(position ? position : 'bottom');\\n\\n        //default, try switching to opposite side\\n        if (!position && this.usedPositions.indexOf('top') < 0) {\\n          this.template.addClass('top');\\n        } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {\\n          this.template.removeClass(position);\\n        } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {\\n          this.template.removeClass(position).addClass('right');\\n        } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {\\n          this.template.removeClass(position).addClass('left');\\n        }\\n\\n        //if default change didn't work, try bottom or left first\\n        else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {\\n            this.template.addClass('left');\\n          } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {\\n            this.template.removeClass(position).addClass('left');\\n          } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {\\n            this.template.removeClass(position);\\n          } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {\\n            this.template.removeClass(position);\\n          }\\n          //if nothing cleared, set to bottom\\n          else {\\n              this.template.removeClass(position);\\n            }\\n        this.classChanged = true;\\n        this.counter--;\\n      }\\n\\n      /**\\n       * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.\\n       * if the tooltip is larger than the screen width, default to full width - any user selected margin\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_setPosition',\\n      value: function _setPosition() {\\n        var position = this._getPositionClass(this.template),\\n            $tipDims = Foundation.Box.GetDimensions(this.template),\\n            $anchorDims = Foundation.Box.GetDimensions(this.$element),\\n            direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',\\n            param = direction === 'top' ? 'height' : 'width',\\n            offset = param === 'height' ? this.options.vOffset : this.options.hOffset,\\n            _this = this;\\n\\n        if ($tipDims.width >= $tipDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.template)) {\\n          this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({\\n            // this.$element.offset(Foundation.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({\\n            'width': $anchorDims.windowDims.width - this.options.hOffset * 2,\\n            'height': 'auto'\\n          });\\n          return false;\\n        }\\n\\n        this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center ' + (position || 'bottom'), this.options.vOffset, this.options.hOffset));\\n\\n        while (!Foundation.Box.ImNotTouchingYou(this.template) && this.counter) {\\n          this._reposition(position);\\n          this._setPosition();\\n        }\\n      }\\n\\n      /**\\n       * reveals the tooltip, and fires an event to close any other open tooltips on the page\\n       * @fires Tooltip#closeme\\n       * @fires Tooltip#show\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'show',\\n      value: function show() {\\n        if (this.options.showOn !== 'all' && !Foundation.MediaQuery.atLeast(this.options.showOn)) {\\n          // console.error('The screen is too small to display this tooltip');\\n          return false;\\n        }\\n\\n        var _this = this;\\n        this.template.css('visibility', 'hidden').show();\\n        this._setPosition();\\n\\n        /**\\n         * Fires to close all other open tooltips on the page\\n         * @event Closeme#tooltip\\n         */\\n        this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));\\n\\n        this.template.attr({\\n          'data-is-active': true,\\n          'aria-hidden': false\\n        });\\n        _this.isActive = true;\\n        // console.log(this.template);\\n        this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {\\n          //maybe do stuff?\\n        });\\n        /**\\n         * Fires when the tooltip is shown\\n         * @event Tooltip#show\\n         */\\n        this.$element.trigger('show.zf.tooltip');\\n      }\\n\\n      /**\\n       * Hides the current tooltip, and resets the positioning class if it was changed due to collision\\n       * @fires Tooltip#hide\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'hide',\\n      value: function hide() {\\n        // console.log('hiding', this.$element.data('yeti-box'));\\n        var _this = this;\\n        this.template.stop().attr({\\n          'aria-hidden': true,\\n          'data-is-active': false\\n        }).fadeOut(this.options.fadeOutDuration, function () {\\n          _this.isActive = false;\\n          _this.isClick = false;\\n          if (_this.classChanged) {\\n            _this.template.removeClass(_this._getPositionClass(_this.template)).addClass(_this.options.positionClass);\\n\\n            _this.usedPositions = [];\\n            _this.counter = 4;\\n            _this.classChanged = false;\\n          }\\n        });\\n        /**\\n         * fires when the tooltip is hidden\\n         * @event Tooltip#hide\\n         */\\n        this.$element.trigger('hide.zf.tooltip');\\n      }\\n\\n      /**\\n       * adds event listeners for the tooltip and its anchor\\n       * TODO combine some of the listeners like focus and mouseenter, etc.\\n       * @private\\n       */\\n\\n    }, {\\n      key: '_events',\\n      value: function _events() {\\n        var _this = this;\\n        var $template = this.template;\\n        var isFocus = false;\\n\\n        if (!this.options.disableHover) {\\n\\n          this.$element.on('mouseenter.zf.tooltip', function (e) {\\n            if (!_this.isActive) {\\n              _this.timeout = setTimeout(function () {\\n                _this.show();\\n              }, _this.options.hoverDelay);\\n            }\\n          }).on('mouseleave.zf.tooltip', function (e) {\\n            clearTimeout(_this.timeout);\\n            if (!isFocus || _this.isClick && !_this.options.clickOpen) {\\n              _this.hide();\\n            }\\n          });\\n        }\\n\\n        if (this.options.clickOpen) {\\n          this.$element.on('mousedown.zf.tooltip', function (e) {\\n            e.stopImmediatePropagation();\\n            if (_this.isClick) {\\n              //_this.hide();\\n              // _this.isClick = false;\\n            } else {\\n                _this.isClick = true;\\n                if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {\\n                  _this.show();\\n                }\\n              }\\n          });\\n        } else {\\n          this.$element.on('mousedown.zf.tooltip', function (e) {\\n            e.stopImmediatePropagation();\\n            _this.isClick = true;\\n          });\\n        }\\n\\n        if (!this.options.disableForTouch) {\\n          this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {\\n            _this.isActive ? _this.hide() : _this.show();\\n          });\\n        }\\n\\n        this.$element.on({\\n          // 'toggle.zf.trigger': this.toggle.bind(this),\\n          // 'close.zf.trigger': this.hide.bind(this)\\n          'close.zf.trigger': this.hide.bind(this)\\n        });\\n\\n        this.$element.on('focus.zf.tooltip', function (e) {\\n          isFocus = true;\\n          if (_this.isClick) {\\n            // If we're not showing open on clicks, we need to pretend a click-launched focus isn't\\n            // a real focus, otherwise on hover and come back we get bad behavior\\n            if (!_this.options.clickOpen) {\\n              isFocus = false;\\n            }\\n            return false;\\n          } else {\\n            _this.show();\\n          }\\n        }).on('focusout.zf.tooltip', function (e) {\\n          isFocus = false;\\n          _this.isClick = false;\\n          _this.hide();\\n        }).on('resizeme.zf.trigger', function () {\\n          if (_this.isActive) {\\n            _this._setPosition();\\n          }\\n        });\\n      }\\n\\n      /**\\n       * adds a toggle method, in addition to the static show() & hide() functions\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'toggle',\\n      value: function toggle() {\\n        if (this.isActive) {\\n          this.hide();\\n        } else {\\n          this.show();\\n        }\\n      }\\n\\n      /**\\n       * Destroys an instance of tooltip, removes template element from the view.\\n       * @function\\n       */\\n\\n    }, {\\n      key: 'destroy',\\n      value: function destroy() {\\n        this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tootip')\\n        //  .removeClass('has-tip')\\n        .removeAttr('aria-describedby').removeAttr('data-yeti-box').removeAttr('data-toggle').removeAttr('data-resize');\\n\\n        this.template.remove();\\n\\n        Foundation.unregisterPlugin(this);\\n      }\\n    }]);\\n\\n    return Tooltip;\\n  }();\\n\\n  Tooltip.defaults = {\\n    disableForTouch: false,\\n    /**\\n     * Time, in ms, before a tooltip should open on hover.\\n     * @option\\n     * @example 200\\n     */\\n    hoverDelay: 200,\\n    /**\\n     * Time, in ms, a tooltip should take to fade into view.\\n     * @option\\n     * @example 150\\n     */\\n    fadeInDuration: 150,\\n    /**\\n     * Time, in ms, a tooltip should take to fade out of view.\\n     * @option\\n     * @example 150\\n     */\\n    fadeOutDuration: 150,\\n    /**\\n     * Disables hover events from opening the tooltip if set to true\\n     * @option\\n     * @example false\\n     */\\n    disableHover: false,\\n    /**\\n     * Optional addtional classes to apply to the tooltip template on init.\\n     * @option\\n     * @example 'my-cool-tip-class'\\n     */\\n    templateClasses: '',\\n    /**\\n     * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.\\n     * @option\\n     * @example 'tooltip'\\n     */\\n    tooltipClass: 'tooltip',\\n    /**\\n     * Class applied to the tooltip anchor element.\\n     * @option\\n     * @example 'has-tip'\\n     */\\n    triggerClass: 'has-tip',\\n    /**\\n     * Minimum breakpoint size at which to open the tooltip.\\n     * @option\\n     * @example 'small'\\n     */\\n    showOn: 'small',\\n    /**\\n     * Custom template to be used to generate markup for tooltip.\\n     * @option\\n     * @example '&lt;div class=\\\"tooltip\\\"&gt;&lt;/div&gt;'\\n     */\\n    template: '',\\n    /**\\n     * Text displayed in the tooltip template on open.\\n     * @option\\n     * @example 'Some cool space fact here.'\\n     */\\n    tipText: '',\\n    touchCloseText: 'Tap to close.',\\n    /**\\n     * Allows the tooltip to remain open if triggered with a click or touch event.\\n     * @option\\n     * @example true\\n     */\\n    clickOpen: true,\\n    /**\\n     * Additional positioning classes, set by the JS\\n     * @option\\n     * @example 'top'\\n     */\\n    positionClass: '',\\n    /**\\n     * Distance, in pixels, the template should push away from the anchor on the Y axis.\\n     * @option\\n     * @example 10\\n     */\\n    vOffset: 10,\\n    /**\\n     * Distance, in pixels, the template should push away from the anchor on the X axis, if aligned to a side.\\n     * @option\\n     * @example 12\\n     */\\n    hOffset: 12\\n  };\\n\\n  /**\\n   * TODO utilize resize event trigger\\n   */\\n\\n  // Window exports\\n  Foundation.plugin(Tooltip, 'Tooltip');\\n}(jQuery);\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 6 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n(function () {\n    // Overwriting the built in view.remove() function.\n    // Reasoning: I decided to do it this way because of the issues arising from\n    // the acutal destruction of my \"#container\" div\n    Backbone.View.prototype.remove = function () {\n        this.$el.empty().off();\n        this.stopListening();\n        return this;\n    };\n    // writing a custom close function for backbone views for the purpose of garbage collection\n    Backbone.View.prototype.close = function () {\n        this.remove();\n        this.unbind();\n        //prototype necessary to disconnect any model and collection events attached to a view.\n        if (this.onClose) {\n            this.onClose();\n        }\n    };\n    //A serialize object function that I saw no purpose in trying to rewrite\n    //Source: http://stackoverflow.com/questions/1184624/convert-form-data-to-javascript-object-with-jquery\n    $.fn.serializeObject = function () {\n        var o = {};\n        var a = this.serializeArray();\n        $.each(a, function () {\n            if (o[this.name] !== undefined) {\n                if (!o[this.name].push) {\n                    o[this.name] = [o[this.name]];\n                }\n                o[this.name].push(this.value || '');\n            } else {\n                o[this.name] = this.value || '';\n            }\n        });\n        return o;\n    };\n})();\n\nvar app = exports.app = app || function () {\n\n    var api = {\n        event_bus: _.extend({}, Backbone.Events),\n        views: {},\n        models: {},\n        collections: {},\n        templates: {},\n        content: null,\n        router: null,\n        init: function init() {\n            this.content = $('#container');\n\n            //Initialize Foundation\n            $(document).foundation();\n\n            window.session = new api.models.Session();\n\n            Backbone.history.start();\n            return this;\n        },\n        changeContent: function changeContent(el) {\n            this.content.empty().append(el);\n            return this;\n        },\n        //Global 'createTemplate' function\n        createTemplate: function createTemplate(templatePath, data) {\n            var templateString = window['JST'][templatePath](data);\n            return templateString;\n        },\n        //This is a helper function that will resize a parent div so that\n        //a child of the parent can be vertically aligned within\n        resizeFunction: function resizeFunction(elementArray) {\n            for (var i = 0; i < elementArray.length; i++) {\n                $('#' + elementArray[i] + '>.verticalParentHeight').each(function () {\n                    $(\".verticalParent\", this).css(\"height\", $(this).height());\n                });\n            }\n        }\n    };\n\n    //Notes on Factories:\n    // - Static views are attached the factory at initialization. Dynamic\n    //views are recreated and rereferenced to the factory object.\n    var ViewsFactory = {\n        createTemplate: function createTemplate(templatePath, data) {\n            var templateString = window['JST'][templatePath](data);\n            return templateString;\n        },\n        showView: function showView(view) {\n            if (this.currentView) {\n                this.currentView.close();\n            }\n\n            this.currentView = view;\n            this.currentView.render();\n        },\n        login: function login() {\n            if (!this.loginView) {\n                this.loginView = new api.views.login({\n                    el: $('#container'),\n                    template: this.createTemplate('templates/login.tpl'),\n                    model: new api.models.PersonLogin()\n                });\n            }\n            return this.loginView;\n        },\n        home: function home() {\n            if (!this.homeView) {\n                this.homeView = new api.views.home({\n                    el: $('#container'),\n                    template: this.createTemplate('templates/home.tpl')\n                });\n            }\n            return this.homeView;\n        },\n        loginCreation: function loginCreation() {\n            if (!this.loginCreationView) {\n                this.loginCreationView = new api.views.loginCreation({\n                    el: $('#container'),\n                    template: this.createTemplate('templates/loginCreation.tpl'),\n                    model: new api.models.PersonCreation()\n                });\n            }\n            return this.loginCreationView;\n        },\n        timeSheet: function timeSheet() {\n            this.timeSheetView = new api.views.timeSheet({\n                el: $('#container'),\n                template: this.createTemplate('templates/timeSheet.tpl')\n            });\n            return this.timeSheetView;\n        },\n        admin: function admin() {\n            this.AdminView = new api.views.admin({\n                el: $('#container'),\n                template: this.createTemplate('templates/AdminPanel.tpl'),\n                collection: new api.collections.Persons()\n            });\n            return this.AdminView;\n        }\n    };\n\n    var HeaderViewFactory = {\n        showView: function showView(view) {\n            if (this.currentView) {\n                this.currentView.close();\n            }\n\n            this.currentView = view;\n            this.currentView.render();\n        },\n        loggedInHeader: function loggedInHeader(data) {\n            this.loggedInHeaderView = new api.views.loggedInHeader({\n                el: $('#headerBar-view'),\n                model: new api.models.Logout(),\n                data: data\n            });\n            return this.loggedInHeaderView;\n        },\n        loggedOutHeader: function loggedOutHeader() {\n            if (!this.loggedOutHeaderView) {\n                this.loggedOutHeaderView = new api.views.loggedOutHeader({\n                    el: $('#headerBar-view'),\n                    template: api.createTemplate('templates/loggedOutHeader.tpl')\n                });\n            }\n            return this.loggedOutHeaderView;\n        }\n    };\n\n    var Router = Backbone.Router.extend({\n        routes: {\n            'AdminPanel': 'admin',\n            'timeSheet': 'timeSheet',\n            'CreateAccount': 'loginCreation',\n            'login': 'login',\n            '': 'home'\n        },\n        admin: function admin() {\n            app.event_bus.trigger('admin');\n        },\n        loginCreation: function loginCreation() {\n            app.event_bus.trigger('loginCreation');\n        },\n        login: function login() {\n            app.event_bus.trigger('login');\n        },\n        home: function home() {\n            app.event_bus.trigger('home');\n        },\n        timeSheet: function timeSheet() {\n            app.event_bus.trigger('timeSheet');\n        }\n    });\n    api.router = new Router();\n\n    //Route Watcher\n    // This is a replacement for the 'execute' function of the router.\n    // Was necessary as not all routes will now fire that execute function with\n    // the event driven nature of my navigation.\n    // NOTE: Using setTimeout in this function because I was getting some strange behavior in Chrome\n    // triggering an event within the 'fetch'. setTimeout ensures the call stack has been fully\n    // executed until it attempts to pass the message down the event_bus\n    var routeWatcher = {\n        inspect: function inspect(callback) {\n            //Using a cookie to handle whether or not the user has already been authenticated\n            var that = this;\n            window.session.fetch({\n                success: function success(model, response) {\n                    var route = Backbone.history.getFragment();\n                    if (response.isAuthenticated) {\n                        var data = { FirstName: response.FirstName, LastName: response.LastName };\n                        var view = HeaderViewFactory.loggedInHeader(data);\n                        HeaderViewFactory.showView(view);\n                        if (response.Role === 'ADMIN') {\n                            if (_.contains(that.requiresAuthAdmin, route)) {\n                                return callback(true);\n                            } else {\n                                window.setTimeout(function () {\n                                    app.event_bus.trigger('admin');\n                                }, 0);\n                                return callback(false);\n                            }\n                        } else {\n                            if (_.contains(that.requiresAuth, route)) {\n                                return callback(true);\n                            } else {\n                                window.setTimeout(function () {\n                                    app.event_bus.trigger('timeSheet');\n                                }, 0);\n                                return callback(false);\n                            }\n                        }\n                    } else {\n                        var view = HeaderViewFactory.loggedOutHeader();\n                        HeaderViewFactory.showView(view);\n                        if (_.contains(that.notRequireAuth, route)) {\n                            return callback(true);\n                        } else {\n                            window.setTimeout(function () {\n                                app.event_bus.trigger('login');\n                            }, 0);\n                            return callback(false);\n                        }\n                    }\n                },\n                error: function error(model, response) {\n                    console.log(\"There was an error with the server.\");\n                }\n            });\n        },\n        requiresAuthAdmin: ['AdminPanel'],\n        requiresAuth: ['timeSheet'],\n        notRequireAuth: ['CreateAccount', 'login', '']\n    };\n\n    // Tying navigation calls into an event driven architecture\n    api.event_bus.bind('home', function () {\n        api.router.navigate('');\n        routeWatcher.inspect(function (continueRouting) {\n            if (continueRouting) {\n                var view = ViewsFactory.home();\n                ViewsFactory.showView(view);\n            }\n        });\n    });\n    api.event_bus.bind('login', function () {\n        api.router.navigate('login');\n        routeWatcher.inspect(function (continueRouting) {\n            if (continueRouting) {\n                var view = ViewsFactory.login();\n                ViewsFactory.showView(view);\n            }\n        });\n    });\n    api.event_bus.bind('loginCreation', function () {\n        app.router.navigate('CreateAccount');\n        routeWatcher.inspect(function (continueRouting) {\n            if (continueRouting) {\n                var view = ViewsFactory.loginCreation();\n                ViewsFactory.showView(view);\n            }\n        });\n    });\n    api.event_bus.bind('admin', function () {\n        app.router.navigate('AdminPanel');\n        routeWatcher.inspect(function (continueRouting) {\n            if (continueRouting) {\n                var view = ViewsFactory.admin();\n                ViewsFactory.showView(view);\n            }\n        });\n    });\n    api.event_bus.bind('timeSheet', function () {\n        app.router.navigate('timeSheet');\n        routeWatcher.inspect(function (continueRouting) {\n            if (continueRouting) {\n                var view = ViewsFactory.timeSheet();\n                ViewsFactory.showView(view);\n            }\n        });\n    });\n\n    return api;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	eval("var map = {\n\t\"./Logout.js\": 8,\n\t\"./Person.js\": 9,\n\t\"./PersonCreation.js\": 10,\n\t\"./PersonLogin.js\": 11,\n\t\"./ResendSignupEmail.js\": 12,\n\t\"./Session.js\": 13,\n\t\"./TimeSheet.js\": 14,\n\t\"./TokenCreation.js\": 15\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 7;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvbW9kZWxzIF4oLipcXC4oanMkKSlbXi5dKiQvZ2k/ZWFkMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHVEQUF1RDtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG1hcCA9IHtcblx0XCIuL0xvZ291dC5qc1wiOiA4LFxuXHRcIi4vUGVyc29uLmpzXCI6IDksXG5cdFwiLi9QZXJzb25DcmVhdGlvbi5qc1wiOiAxMCxcblx0XCIuL1BlcnNvbkxvZ2luLmpzXCI6IDExLFxuXHRcIi4vUmVzZW5kU2lnbnVwRW1haWwuanNcIjogMTIsXG5cdFwiLi9TZXNzaW9uLmpzXCI6IDEzLFxuXHRcIi4vVGltZVNoZWV0LmpzXCI6IDE0LFxuXHRcIi4vVG9rZW5DcmVhdGlvbi5qc1wiOiAxNVxufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRyZXR1cm4gbWFwW3JlcV0gfHwgKGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKSB9KCkpO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA3O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9hcHAvY2xpZW50LWFwcC9tb2RlbHMgXiguKlxcLihqcyQpKVteLl0qJC9naVxuICoqIG1vZHVsZSBpZCA9IDdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.models.Logout = Backbone.Model.extend({\n  urlRoot: '/logout'\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvbW9kZWxzL0xvZ291dC5qcz8yZTU2Il0sIm5hbWVzIjpbIm1vZGVscyIsIkxvZ291dCIsIkJhY2tib25lIiwiTW9kZWwiLCJleHRlbmQiLCJ1cmxSb290Il0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLFNBQUlBLE1BQUosQ0FBV0MsTUFBWCxHQUFvQkMsU0FBU0MsS0FBVCxDQUFlQyxNQUFmLENBQXNCO0FBQ3hDQyxXQUFTO0FBRCtCLENBQXRCLENBQXBCIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9hcHAnO1xuXG5hcHAubW9kZWxzLkxvZ291dCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG4gIHVybFJvb3Q6ICcvbG9nb3V0J1xufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2NsaWVudC1hcHAvbW9kZWxzL0xvZ291dC5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.models.Person = Backbone.Model.extend({});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvbW9kZWxzL1BlcnNvbi5qcz9hMTBiIl0sIm5hbWVzIjpbIm1vZGVscyIsIlBlcnNvbiIsIkJhY2tib25lIiwiTW9kZWwiLCJleHRlbmQiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsU0FBSUEsTUFBSixDQUFXQyxNQUFYLEdBQW9CQyxTQUFTQyxLQUFULENBQWVDLE1BQWYsQ0FBc0IsRUFBdEIsQ0FBcEIiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwcCB9IGZyb20gJy4uL2FwcCc7XG5cbmFwcC5tb2RlbHMuUGVyc29uID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9jbGllbnQtYXBwL21vZGVscy9QZXJzb24uanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.models.PersonCreation = Backbone.Model.extend({\n  urlRoot: '/loginCreation',\n  defaults: {\n    AuthToken: '',\n    FirstName: '',\n    LastName: '',\n    Email: '',\n    ConfirmEmail: '',\n    Password: '',\n    ConfirmPassword: ''\n  },\n  validation: {\n    AuthToken: [{\n      required: true\n    }, {\n      length: 32,\n      pattern: /^[0-9a-fA-F]+$/,\n      msg: 'Invalid Authentication Token format'\n    }],\n    FirstName: [{\n      required: true\n    }, {\n      pattern: /^[a-zA-Z]+$/,\n      msg: 'Invalid First Name'\n    }],\n    LastName: [{\n      required: true\n    }, {\n      pattern: /^[a-zA-Z]+$/,\n      msg: 'Invalid Last Name'\n    }],\n    Email: [{\n      required: true\n    }, {\n      pattern: 'email',\n      msg: 'Invalid Email'\n    }],\n    ConfirmEmail: [{\n      required: true\n    }, {\n      equalTo: 'Email',\n      msg: 'Does not match Email'\n    }],\n    Password: [{\n      required: true\n    }, {\n      //One digit and one character minimum\n      pattern: /^(?=.*[\\d])(?=.*[A-Za-z])[\\w\\d!?@#$%_]{7,15}$/,\n      msg: 'Invalid Password. Must include a digit'\n    }],\n    ConfirmPassword: [{\n      required: true\n    }, {\n      equalTo: 'Password',\n      msg: 'Does not match Password'\n    }]\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvbW9kZWxzL1BlcnNvbkNyZWF0aW9uLmpzP2IzMjgiXSwibmFtZXMiOlsibW9kZWxzIiwiUGVyc29uQ3JlYXRpb24iLCJCYWNrYm9uZSIsIk1vZGVsIiwiZXh0ZW5kIiwidXJsUm9vdCIsImRlZmF1bHRzIiwiQXV0aFRva2VuIiwiRmlyc3ROYW1lIiwiTGFzdE5hbWUiLCJFbWFpbCIsIkNvbmZpcm1FbWFpbCIsIlBhc3N3b3JkIiwiQ29uZmlybVBhc3N3b3JkIiwidmFsaWRhdGlvbiIsInJlcXVpcmVkIiwibGVuZ3RoIiwicGF0dGVybiIsIm1zZyIsImVxdWFsVG8iXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsU0FBSUEsTUFBSixDQUFXQyxjQUFYLEdBQTRCQyxTQUFTQyxLQUFULENBQWVDLE1BQWYsQ0FBc0I7QUFDaERDLFdBQVMsZ0JBRHVDO0FBRWhEQyxZQUFVO0FBQ1JDLGVBQVcsRUFESDtBQUVSQyxlQUFXLEVBRkg7QUFHUkMsY0FBVSxFQUhGO0FBSVJDLFdBQU8sRUFKQztBQUtSQyxrQkFBYyxFQUxOO0FBTVJDLGNBQVUsRUFORjtBQU9SQyxxQkFBaUI7QUFQVCxHQUZzQztBQVdoREMsY0FBWTtBQUNWUCxlQUFXLENBQUM7QUFDVlEsZ0JBQVU7QUFEQSxLQUFELEVBRVI7QUFDREMsY0FBUSxFQURQO0FBRURDLGVBQVMsZ0JBRlI7QUFHREMsV0FBSztBQUhKLEtBRlEsQ0FERDtBQVFWVixlQUFXLENBQUM7QUFDVk8sZ0JBQVU7QUFEQSxLQUFELEVBRVI7QUFDREUsZUFBUyxhQURSO0FBRURDLFdBQUs7QUFGSixLQUZRLENBUkQ7QUFjVlQsY0FBVSxDQUFDO0FBQ1RNLGdCQUFVO0FBREQsS0FBRCxFQUVQO0FBQ0RFLGVBQVMsYUFEUjtBQUVEQyxXQUFLO0FBRkosS0FGTyxDQWRBO0FBb0JWUixXQUFPLENBQUM7QUFDTkssZ0JBQVU7QUFESixLQUFELEVBRUo7QUFDREUsZUFBUyxPQURSO0FBRURDLFdBQUs7QUFGSixLQUZJLENBcEJHO0FBMEJWUCxrQkFBYyxDQUFDO0FBQ2JJLGdCQUFVO0FBREcsS0FBRCxFQUVYO0FBQ0RJLGVBQVMsT0FEUjtBQUVERCxXQUFLO0FBRkosS0FGVyxDQTFCSjtBQWdDVk4sY0FBVSxDQUFDO0FBQ1RHLGdCQUFVO0FBREQsS0FBRCxFQUVQO0FBQ0Q7QUFDQUUsZUFBUywrQ0FGUjtBQUdEQyxXQUFLO0FBSEosS0FGTyxDQWhDQTtBQXVDVkwscUJBQWlCLENBQUM7QUFDaEJFLGdCQUFVO0FBRE0sS0FBRCxFQUVkO0FBQ0RJLGVBQVMsVUFEUjtBQUVERCxXQUFLO0FBRkosS0FGYztBQXZDUDtBQVhvQyxDQUF0QixDQUE1QiIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwcCB9IGZyb20gJy4uL2FwcCc7XG5cbmFwcC5tb2RlbHMuUGVyc29uQ3JlYXRpb24gPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICB1cmxSb290OiAnL2xvZ2luQ3JlYXRpb24nLFxuICBkZWZhdWx0czoge1xuICAgIEF1dGhUb2tlbjogJycsXG4gICAgRmlyc3ROYW1lOiAnJyxcbiAgICBMYXN0TmFtZTogJycsXG4gICAgRW1haWw6ICcnLFxuICAgIENvbmZpcm1FbWFpbDogJycsXG4gICAgUGFzc3dvcmQ6ICcnLFxuICAgIENvbmZpcm1QYXNzd29yZDogJydcbiAgfSxcbiAgdmFsaWRhdGlvbjoge1xuICAgIEF1dGhUb2tlbjogW3tcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSwge1xuICAgICAgbGVuZ3RoOiAzMixcbiAgICAgIHBhdHRlcm46IC9eWzAtOWEtZkEtRl0rJC8sXG4gICAgICBtc2c6ICdJbnZhbGlkIEF1dGhlbnRpY2F0aW9uIFRva2VuIGZvcm1hdCdcbiAgICB9XSxcbiAgICBGaXJzdE5hbWU6IFt7XG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sIHtcbiAgICAgIHBhdHRlcm46IC9eW2EtekEtWl0rJC8sXG4gICAgICBtc2c6ICdJbnZhbGlkIEZpcnN0IE5hbWUnXG4gICAgfV0sXG4gICAgTGFzdE5hbWU6IFt7XG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sIHtcbiAgICAgIHBhdHRlcm46IC9eW2EtekEtWl0rJC8sXG4gICAgICBtc2c6ICdJbnZhbGlkIExhc3QgTmFtZSdcbiAgICB9XSxcbiAgICBFbWFpbDogW3tcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSwge1xuICAgICAgcGF0dGVybjogJ2VtYWlsJyxcbiAgICAgIG1zZzogJ0ludmFsaWQgRW1haWwnXG4gICAgfV0sXG4gICAgQ29uZmlybUVtYWlsOiBbe1xuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LCB7XG4gICAgICBlcXVhbFRvOiAnRW1haWwnLFxuICAgICAgbXNnOiAnRG9lcyBub3QgbWF0Y2ggRW1haWwnXG4gICAgfV0sXG4gICAgUGFzc3dvcmQ6IFt7XG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sIHtcbiAgICAgIC8vT25lIGRpZ2l0IGFuZCBvbmUgY2hhcmFjdGVyIG1pbmltdW1cbiAgICAgIHBhdHRlcm46IC9eKD89LipbXFxkXSkoPz0uKltBLVphLXpdKVtcXHdcXGQhP0AjJCVfXXs3LDE1fSQvLFxuICAgICAgbXNnOiAnSW52YWxpZCBQYXNzd29yZC4gTXVzdCBpbmNsdWRlIGEgZGlnaXQnXG4gICAgfV0sXG4gICAgQ29uZmlybVBhc3N3b3JkOiBbe1xuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LCB7XG4gICAgICBlcXVhbFRvOiAnUGFzc3dvcmQnLFxuICAgICAgbXNnOiAnRG9lcyBub3QgbWF0Y2ggUGFzc3dvcmQnXG4gICAgfV1cbiAgfVxufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2NsaWVudC1hcHAvbW9kZWxzL1BlcnNvbkNyZWF0aW9uLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.models.PersonLogin = Backbone.Model.extend({\n  urlRoot: '/login',\n  defaults: {\n    Email: '',\n    Password: ''\n  },\n  validation: {\n    Email: [{\n      required: true\n    }, {\n      pattern: 'email',\n      msg: 'Invalid Email'\n    }],\n    Password: {\n      required: true\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvbW9kZWxzL1BlcnNvbkxvZ2luLmpzPzFlYmUiXSwibmFtZXMiOlsibW9kZWxzIiwiUGVyc29uTG9naW4iLCJCYWNrYm9uZSIsIk1vZGVsIiwiZXh0ZW5kIiwidXJsUm9vdCIsImRlZmF1bHRzIiwiRW1haWwiLCJQYXNzd29yZCIsInZhbGlkYXRpb24iLCJyZXF1aXJlZCIsInBhdHRlcm4iLCJtc2ciXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsU0FBSUEsTUFBSixDQUFXQyxXQUFYLEdBQXlCQyxTQUFTQyxLQUFULENBQWVDLE1BQWYsQ0FBc0I7QUFDN0NDLFdBQVMsUUFEb0M7QUFFN0NDLFlBQVU7QUFDUkMsV0FBTyxFQURDO0FBRVJDLGNBQVU7QUFGRixHQUZtQztBQU03Q0MsY0FBWTtBQUNWRixXQUFPLENBQUM7QUFDTkcsZ0JBQVU7QUFESixLQUFELEVBRUo7QUFDREMsZUFBUyxPQURSO0FBRURDLFdBQUs7QUFGSixLQUZJLENBREc7QUFPVkosY0FBVTtBQUNSRSxnQkFBVTtBQURGO0FBUEE7QUFOaUMsQ0FBdEIsQ0FBekIiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9hcHAnO1xuXG5hcHAubW9kZWxzLlBlcnNvbkxvZ2luID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgdXJsUm9vdDogJy9sb2dpbicsXG4gIGRlZmF1bHRzOiB7XG4gICAgRW1haWw6ICcnLFxuICAgIFBhc3N3b3JkOiAnJ1xuICB9LFxuICB2YWxpZGF0aW9uOiB7XG4gICAgRW1haWw6IFt7XG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sIHtcbiAgICAgIHBhdHRlcm46ICdlbWFpbCcsXG4gICAgICBtc2c6ICdJbnZhbGlkIEVtYWlsJ1xuICAgIH1dLFxuICAgIFBhc3N3b3JkOiB7XG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH1cbiAgfVxufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2NsaWVudC1hcHAvbW9kZWxzL1BlcnNvbkxvZ2luLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.models.ResendSignupEmail = Backbone.Model.extend({\n  urlRoot: '/resendSignupEmail'\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvbW9kZWxzL1Jlc2VuZFNpZ251cEVtYWlsLmpzPzY4MGMiXSwibmFtZXMiOlsibW9kZWxzIiwiUmVzZW5kU2lnbnVwRW1haWwiLCJCYWNrYm9uZSIsIk1vZGVsIiwiZXh0ZW5kIiwidXJsUm9vdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQSxTQUFJQSxNQUFKLENBQVdDLGlCQUFYLEdBQStCQyxTQUFTQyxLQUFULENBQWVDLE1BQWYsQ0FBc0I7QUFDbkRDLFdBQVM7QUFEMEMsQ0FBdEIsQ0FBL0IiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9hcHAnO1xuXG5hcHAubW9kZWxzLlJlc2VuZFNpZ251cEVtYWlsID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgdXJsUm9vdDogJy9yZXNlbmRTaWdudXBFbWFpbCdcbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9jbGllbnQtYXBwL21vZGVscy9SZXNlbmRTaWdudXBFbWFpbC5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.models.Session = Backbone.Model.extend({\n  urlRoot: '/session'\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvbW9kZWxzL1Nlc3Npb24uanM/NGM3MiJdLCJuYW1lcyI6WyJtb2RlbHMiLCJTZXNzaW9uIiwiQmFja2JvbmUiLCJNb2RlbCIsImV4dGVuZCIsInVybFJvb3QiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsU0FBSUEsTUFBSixDQUFXQyxPQUFYLEdBQXFCQyxTQUFTQyxLQUFULENBQWVDLE1BQWYsQ0FBc0I7QUFDekNDLFdBQVM7QUFEZ0MsQ0FBdEIsQ0FBckIiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9hcHAnO1xuXG5hcHAubW9kZWxzLlNlc3Npb24gPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICB1cmxSb290OiAnL3Nlc3Npb24nXG59KTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hcHAvY2xpZW50LWFwcC9tb2RlbHMvU2Vzc2lvbi5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.models.TimeSheet = Backbone.Model.extend({\n  idAttribute: 'weekStartDate'\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvbW9kZWxzL1RpbWVTaGVldC5qcz80M2MzIl0sIm5hbWVzIjpbIm1vZGVscyIsIlRpbWVTaGVldCIsIkJhY2tib25lIiwiTW9kZWwiLCJleHRlbmQiLCJpZEF0dHJpYnV0ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQSxTQUFJQSxNQUFKLENBQVdDLFNBQVgsR0FBdUJDLFNBQVNDLEtBQVQsQ0FBZUMsTUFBZixDQUFzQjtBQUMzQ0MsZUFBYTtBQUQ4QixDQUF0QixDQUF2QiIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwcCB9IGZyb20gJy4uL2FwcCc7XG5cbmFwcC5tb2RlbHMuVGltZVNoZWV0ID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgaWRBdHRyaWJ1dGU6ICd3ZWVrU3RhcnREYXRlJ1xufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2NsaWVudC1hcHAvbW9kZWxzL1RpbWVTaGVldC5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.models.TokenCreation = Backbone.Model.extend({\n  urlRoot: '/tokenCreation',\n  validation: {\n    Email: [{\n      required: true\n    }, {\n      pattern: 'email',\n      msg: 'Invalid Email'\n    }],\n    ConfirmEmail: [{\n      required: true\n    }, {\n      equalTo: 'Email',\n      msg: 'Does not match Email'\n    }]\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvbW9kZWxzL1Rva2VuQ3JlYXRpb24uanM/YmU4NiJdLCJuYW1lcyI6WyJtb2RlbHMiLCJUb2tlbkNyZWF0aW9uIiwiQmFja2JvbmUiLCJNb2RlbCIsImV4dGVuZCIsInVybFJvb3QiLCJ2YWxpZGF0aW9uIiwiRW1haWwiLCJyZXF1aXJlZCIsInBhdHRlcm4iLCJtc2ciLCJDb25maXJtRW1haWwiLCJlcXVhbFRvIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLFNBQUlBLE1BQUosQ0FBV0MsYUFBWCxHQUEyQkMsU0FBU0MsS0FBVCxDQUFlQyxNQUFmLENBQXNCO0FBQy9DQyxXQUFTLGdCQURzQztBQUUvQ0MsY0FBWTtBQUNWQyxXQUFPLENBQUM7QUFDTkMsZ0JBQVU7QUFESixLQUFELEVBRUo7QUFDREMsZUFBUyxPQURSO0FBRURDLFdBQUs7QUFGSixLQUZJLENBREc7QUFPVkMsa0JBQWMsQ0FBQztBQUNiSCxnQkFBVTtBQURHLEtBQUQsRUFFWDtBQUNESSxlQUFTLE9BRFI7QUFFREYsV0FBSztBQUZKLEtBRlc7QUFQSjtBQUZtQyxDQUF0QixDQUEzQiIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwcCB9IGZyb20gJy4uL2FwcCc7XG5cbmFwcC5tb2RlbHMuVG9rZW5DcmVhdGlvbiA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG4gIHVybFJvb3Q6ICcvdG9rZW5DcmVhdGlvbicsXG4gIHZhbGlkYXRpb246IHtcbiAgICBFbWFpbDogW3tcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSwge1xuICAgICAgcGF0dGVybjogJ2VtYWlsJyxcbiAgICAgIG1zZzogJ0ludmFsaWQgRW1haWwnXG4gICAgfV0sXG4gICAgQ29uZmlybUVtYWlsOiBbe1xuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LCB7XG4gICAgICBlcXVhbFRvOiAnRW1haWwnLFxuICAgICAgbXNnOiAnRG9lcyBub3QgbWF0Y2ggRW1haWwnXG4gICAgfV1cbiAgfVxufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2NsaWVudC1hcHAvbW9kZWxzL1Rva2VuQ3JlYXRpb24uanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	eval("var map = {\n\t\"./Persons.js\": 17,\n\t\"./TimeSheets.js\": 18\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 16;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvY29sbGVjdGlvbnMgXiguKlxcLihqcyQpKVteLl0qJC9naT9iZTNlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsdURBQXVEO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG1hcCA9IHtcblx0XCIuL1BlcnNvbnMuanNcIjogMTcsXG5cdFwiLi9UaW1lU2hlZXRzLmpzXCI6IDE4XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpKTtcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdHJldHVybiBtYXBbcmVxXSB8fCAoZnVuY3Rpb24oKSB7IHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpIH0oKSk7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDE2O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9hcHAvY2xpZW50LWFwcC9jb2xsZWN0aW9ucyBeKC4qXFwuKGpzJCkpW14uXSokL2dpXG4gKiogbW9kdWxlIGlkID0gMTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.collections.Persons = Backbone.Collection.extend({\n  url: '/persons',\n  model: _app.app.models.Person\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvY29sbGVjdGlvbnMvUGVyc29ucy5qcz9mNWJhIl0sIm5hbWVzIjpbImNvbGxlY3Rpb25zIiwiUGVyc29ucyIsIkJhY2tib25lIiwiQ29sbGVjdGlvbiIsImV4dGVuZCIsInVybCIsIm1vZGVsIiwibW9kZWxzIiwiUGVyc29uIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLFNBQUlBLFdBQUosQ0FBZ0JDLE9BQWhCLEdBQTBCQyxTQUFTQyxVQUFULENBQW9CQyxNQUFwQixDQUEyQjtBQUNuREMsT0FBSyxVQUQ4QztBQUVuREMsU0FBTyxTQUFJQyxNQUFKLENBQVdDO0FBRmlDLENBQTNCLENBQTFCIiwiZmlsZSI6IjE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vYXBwJztcblxuYXBwLmNvbGxlY3Rpb25zLlBlcnNvbnMgPSBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZCh7XG4gIHVybDogJy9wZXJzb25zJyxcbiAgbW9kZWw6IGFwcC5tb2RlbHMuUGVyc29uXG59KTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hcHAvY2xpZW50LWFwcC9jb2xsZWN0aW9ucy9QZXJzb25zLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.collections.TimeSheets = Backbone.Collection.extend({\n  url: '/timeSheets',\n  model: _app.app.models.TimeSheet,\n  parse: function parse(response) {\n    return response.results;\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvY29sbGVjdGlvbnMvVGltZVNoZWV0cy5qcz85OGY2Il0sIm5hbWVzIjpbImNvbGxlY3Rpb25zIiwiVGltZVNoZWV0cyIsIkJhY2tib25lIiwiQ29sbGVjdGlvbiIsImV4dGVuZCIsInVybCIsIm1vZGVsIiwibW9kZWxzIiwiVGltZVNoZWV0IiwicGFyc2UiLCJyZXNwb25zZSIsInJlc3VsdHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsU0FBSUEsV0FBSixDQUFnQkMsVUFBaEIsR0FBNkJDLFNBQVNDLFVBQVQsQ0FBb0JDLE1BQXBCLENBQTJCO0FBQ3REQyxPQUFLLGFBRGlEO0FBRXREQyxTQUFPLFNBQUlDLE1BQUosQ0FBV0MsU0FGb0M7QUFHdERDLFNBQU8sZUFBU0MsUUFBVCxFQUFtQjtBQUN4QixXQUFPQSxTQUFTQyxPQUFoQjtBQUNEO0FBTHFELENBQTNCLENBQTdCIiwiZmlsZSI6IjE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vYXBwJztcblxuYXBwLmNvbGxlY3Rpb25zLlRpbWVTaGVldHMgPSBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZCh7XG4gIHVybDogJy90aW1lU2hlZXRzJyxcbiAgbW9kZWw6IGFwcC5tb2RlbHMuVGltZVNoZWV0LFxuICBwYXJzZTogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gcmVzcG9uc2UucmVzdWx0cztcbiAgfVxufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2NsaWVudC1hcHAvY29sbGVjdGlvbnMvVGltZVNoZWV0cy5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	eval("var map = {\n\t\"./admin.js\": 20,\n\t\"./calendar.js\": 21,\n\t\"./home.js\": 22,\n\t\"./loggedInHeader.js\": 23,\n\t\"./loggedOutHeader.js\": 24,\n\t\"./login.js\": 25,\n\t\"./loginCreation.js\": 26,\n\t\"./personCollection.js\": 27,\n\t\"./timeSelector.js\": 29,\n\t\"./timeSelectorDay.js\": 30,\n\t\"./timeSheet.js\": 31,\n\t\"./unverifiedUser.js\": 32,\n\t\"./verifiedUser.js\": 33\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 19;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvdmlld3MgXiguKlxcLihqcyQpKVteLl0qJC9naT82N2NiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHVEQUF1RDtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi9hZG1pbi5qc1wiOiAyMCxcblx0XCIuL2NhbGVuZGFyLmpzXCI6IDIxLFxuXHRcIi4vaG9tZS5qc1wiOiAyMixcblx0XCIuL2xvZ2dlZEluSGVhZGVyLmpzXCI6IDIzLFxuXHRcIi4vbG9nZ2VkT3V0SGVhZGVyLmpzXCI6IDI0LFxuXHRcIi4vbG9naW4uanNcIjogMjUsXG5cdFwiLi9sb2dpbkNyZWF0aW9uLmpzXCI6IDI2LFxuXHRcIi4vcGVyc29uQ29sbGVjdGlvbi5qc1wiOiAyNyxcblx0XCIuL3RpbWVTZWxlY3Rvci5qc1wiOiAyOSxcblx0XCIuL3RpbWVTZWxlY3RvckRheS5qc1wiOiAzMCxcblx0XCIuL3RpbWVTaGVldC5qc1wiOiAzMSxcblx0XCIuL3VudmVyaWZpZWRVc2VyLmpzXCI6IDMyLFxuXHRcIi4vdmVyaWZpZWRVc2VyLmpzXCI6IDMzXG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpKTtcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdHJldHVybiBtYXBbcmVxXSB8fCAoZnVuY3Rpb24oKSB7IHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpIH0oKSk7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDE5O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9hcHAvY2xpZW50LWFwcC92aWV3cyBeKC4qXFwuKGpzJCkpW14uXSokL2dpXG4gKiogbW9kdWxlIGlkID0gMTlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.views.admin = Backbone.View.extend({\n  initialize: function initialize(data) {\n    this.options = data;\n\n    this.tokenCreationModel = new _app.app.models.TokenCreation();\n\n    this.template = _.template(this.options.template);\n\n    Backbone.Validation.bind(this, {\n      model: this.tokenCreationModel,\n      valid: function valid(view, attr) {\n        var element = view.$(\"[name=\" + attr + \"]\");\n        var parent = element.closest('.inputWrapper');\n        element.removeClass('error');\n        parent.find('small.error').html('').addClass('hidden');\n      },\n      invalid: function invalid(view, attr, error) {\n        //Hide server errors if input error arises\n        $('#serverError').html('').addClass('hidden');\n        var element = view.$(\"[name=\" + attr + \"]\");\n        var parent = element.closest('.inputWrapper');\n        element.addClass('error');\n        parent.find('small.error').html(error).removeClass('hidden');\n      }\n    });\n  },\n  render: function render() {\n    var that = this;\n\n    this.unverifiedPersons = new _app.app.collections.Persons();\n    this.verifiedPersons = new _app.app.collections.Persons();\n\n    //Render Parent\n    that.$el.html(that.template({}));\n\n    this.verifiedPersons.fetch({\n      data: { verified: true },\n      success: function success(collection, response, options) {\n        that.verifiedCollectionView = new _app.app.views.personCollectionView({\n          collection: that.verifiedPersons,\n          childView: _app.app.views.verifiedUser,\n          el: $('#verifiedUsers-view')\n        });\n\n        that.verifiedCollectionView.render();\n      }\n    });\n\n    this.unverifiedPersons.fetch({\n      data: { verified: false },\n      success: function success(collection, response, options) {\n        that.unverifiedCollectionView = new _app.app.views.personCollectionView({\n          collection: that.unverifiedPersons,\n          childView: _app.app.views.unverifiedUser,\n          el: $('#unverifiedUsers-view')\n        });\n\n        that.unverifiedCollectionView.render();\n      }\n    });\n\n    this.delegateEvents();\n  },\n  events: {\n    'click .verified.user': 'expandUserInfo',\n    'click .unverified.user': 'expandUserInfo',\n    'click #submitCreateUserButton': 'createToken'\n  },\n  expandUserInfo: function expandUserInfo(element) {\n    var toggleElement = $(element.currentTarget).next('.personInfo');\n    if ($(toggleElement).height() !== 0) {\n      $(toggleElement).height(\"0px\");\n    } else {\n      this.fetchUserInfo(toggleElement);\n    }\n  },\n  fetchUserInfo: function fetchUserInfo(toggleElement) {\n    var totalHeight = 0;\n    $(toggleElement).children().each(function () {\n      totalHeight += $(this).outerHeight(true);\n    });\n    $(toggleElement).height(totalHeight + \"px\");\n  },\n  createToken: function createToken() {\n    var that = this;\n    event.preventDefault();\n    var data = $('#createUserRequest').serializeObject();\n    this.tokenCreationModel.set(data);\n    if (this.tokenCreationModel.isValid(true)) {\n      this.tokenCreationModel.save({\n        Email: data.Email\n      }, {\n        success: function success(model, response) {\n          $('#signupEmailModal').foundation('reveal', 'open');\n          $('#serverError').html('').addClass('hidden');\n          $('#createUserRequest')[0].reset();\n          that.unverifiedCollectionView.collection.fetch({\n            data: { verified: false }\n          });\n        },\n        error: function error(model, response) {\n          $('#serverError').html(response.responseJSON.message).removeClass('hidden');\n        }\n      });\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.views.Calendar = Backbone.View.extend({\n  initialize: function initialize(data) {\n    this.options = data;\n    this.listenTo(_app.app.event_bus, 'inputChange', this.registerInputChange);\n    this.timeSelectorInputChanged = false;\n    this.selectedWeekId = '';\n  },\n  render: function render() {\n    this.setElement($(this.options.el));\n    var that = this;\n    $(this.options.el).clndr({\n      render: function render(data) {\n        this.template = _.template(_app.app.createTemplate('templates/clndr.tpl', data));\n        return this.template;\n      },\n      clickEvents: {\n        onMonthChange: function onMonthChange(month) {\n          that.fetchCollection(month, function (err) {\n            if (err) return console.log(err);\n            var weekSelectorDate = moment.utc(that.collection.at(0).get('weekStartDate')).format('YYYY-MM-DD');\n            that.renderNextPrevButtons();\n            that.renderDays(weekSelectorDate);\n          });\n        }\n      }\n    });\n\n    this.fetchCollection(this.options.renderWeekStartDate, function (err) {\n      that.renderDays(that.options.renderWeekStartDate);\n      that.renderNextPrevButtons();\n      that.delegateEvents();\n    });\n  },\n  events: {\n    'click .weekDiv': 'checkInputWeekSelected',\n    'click #changeTimeSheetNo': 'unregisterWeekSelected',\n    'click #changeTimeSheetYes': 'registerWeekSelected'\n  },\n  registerInputChange: function registerInputChange() {\n    this.timeSelectorInputChanged = true;\n  },\n  renderDays: function renderDays(weekSelectorDate) {\n    //render week divs on top of calendar\n    var daysContainer = document.getElementById('daysContainer');\n    var startWeekDate = moment.utc(this.collection.at(0).get('weekStartDate'));\n    var endWeekDate = moment.utc(this.collection.at(this.collection.length - 1).get('weekStartDate'));\n    for (startWeekDate; moment(startWeekDate).isSameOrBefore(endWeekDate); startWeekDate = moment(startWeekDate).add(1, 'w')) {\n      var weekDiv = document.createElement('div');\n      var weekDivSpan = document.createElement('span');\n      var formattedDate = moment(startWeekDate).format('YYYY-MM-DD');\n      var weekStartDayDiv = document.getElementById(formattedDate);\n      weekDiv.id = formattedDate + '-weekDiv';\n      weekDiv.className = 'weekDiv';\n\n      //complete || incomplete || empty\n      var model = this.collection.find(function (timeSheet) {\n        var modelStartDate = moment(timeSheet.get('weekStartDate'));\n        return moment(modelStartDate).isSame(startWeekDate);\n      });\n      if (model) {\n        if (model.get('totalTime') === null) {\n          weekDiv.className += ' incomplete';\n          weekDiv.dataset.date = formattedDate;\n          weekDivSpan.innerHTML = 'Incomplete';\n        } else {\n          weekDiv.className += ' complete';\n          weekDiv.dataset.date = formattedDate;\n          weekDivSpan.innerHTML = 'Complete';\n        }\n      }\n      weekDiv.appendChild(weekDivSpan);\n      daysContainer.appendChild(weekDiv);\n\n      //Shift to location\n\n      weekDiv.style.top = weekStartDayDiv.offsetTop + 'px';\n      weekDiv.style.left = weekStartDayDiv.offsetLeft + 'px';\n    }\n    this.shiftWeekSelector(weekSelectorDate);\n  },\n  checkInputWeekSelected: function checkInputWeekSelected(element) {\n    this.selectedWeekId = element.currentTarget.id;\n    if (this.timeSelectorInputChanged) {\n      //Temporarily shifting view element to global to catch modal events\n      this.setElement($('#changeTimeSheetModal').foundation('reveal', 'open'));\n    } else {\n      this.registerWeekSelected();\n    }\n  },\n  unregisterWeekSelected: function unregisterWeekSelected() {\n    $('#changeTimeSheetModal').foundation('reveal', 'close');\n    //switching back to proper view element\n    this.setElement($(this.options.el));\n  },\n  registerWeekSelected: function registerWeekSelected() {\n    $('#changeTimeSheetModal').foundation('reveal', 'close');\n    //switching back to proper view element\n    this.setElement($(this.options.el));\n    var weekDiv = document.getElementById(this.selectedWeekId);\n    $('.selected').removeClass('selected');\n    this.shiftWeekSelector(weekDiv.dataset.date);\n    weekDiv.className += ' selected';\n  },\n  shiftWeekSelector: function shiftWeekSelector(date) {\n    this.trigger('timeSelector', date);\n    this.timeSelectorInputChanged = false;\n    var weekStartDayDiv = document.getElementById(date);\n    var weekSelector = document.getElementById('weekSelector');\n    var weekDiv = document.getElementById(date + '-weekDiv');\n    weekDiv.className += ' selected';\n    weekSelector.style.top = weekStartDayDiv.offsetTop + 'px';\n    weekSelector.style.left = weekStartDayDiv.offsetLeft + 'px';\n  },\n  renderNextPrevButtons: function renderNextPrevButtons() {\n    if (this.options.next) {\n      $('.clndr-next-button').removeClass('inactive');\n    } else {\n      $('.clndr-next-button').addClass('inactive');\n    }\n    if (this.options.prev) {\n      $('.clndr-previous-button').removeClass('inactive');\n    } else {\n      $('.clndr-previous-button').addClass('inactive');\n    }\n  },\n  fetchCollection: function fetchCollection(date, done) {\n    var that = this;\n    var initializedSelectStartDate, initializedSelectEndDate;\n\n    //Check for prev/next month mondays viewable\n    var prevMonthMonday = document.getElementsByClassName('last-month monday');\n    if (prevMonthMonday.length) {\n      initializedSelectStartDate = prevMonthMonday[0].id;\n    } else {\n      initializedSelectStartDate = moment(date).startOf('month').format('YYYY-MM-DD');\n    }\n    var nextMonthMonday = document.getElementsByClassName('next-month monday');\n    if (nextMonthMonday.length) {\n      initializedSelectEndDate = nextMonthMonday[0].id;\n    } else {\n      initializedSelectEndDate = moment(date).endOf('month').format('YYYY-MM-DD');\n    }\n    this.collection.fetch({\n      reset: true,\n      data: {\n        timeSelectorWeekDate: moment(date).startOf('isoWeek').format('YYYY-MM-DD'),\n        selectStartDate: initializedSelectStartDate,\n        selectEndDate: initializedSelectEndDate\n      },\n      success: function success(collection, response, options) {\n        that.options.next = response.next;\n        that.options.prev = response.prev;\n        done(null);\n      },\n      error: function error(collection, response, options) {\n        //handle server error\n        done(err);\n      }\n    });\n  }\n}); //NOTES:\n// - Reading it sounds like innerHTML opens the possibility for XSS attacks\n// though only when you are using user input. Just something to keep in mind.\n// - Next/Prev month rerenders the 'days' subview of the calendar. With that,\n// I'm recreating the necessary DOM elements each time.\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.views.home = Backbone.View.extend({\n    template: null,\n    initialize: function initialize(data) {\n        var resizes = ['homeContent'];\n        $(window).resize(_.throttle(function () {\n            _app.app.resizeFunction(resizes);\n        }, 1000));\n\n        this.options = data;\n        this.template = _.template(this.options.template);\n        this.render();\n    },\n    events: {\n        'click #toLoginPageButton': 'toLogin',\n        'click #toAccountCreationButton': 'toLoginCreation'\n    },\n    render: function render() {\n        this.$el.html(this.template({}));\n        this.delegateEvents();\n        //Making it so the 'trigger' call is next in the event\n        //queue after the rendering\n        setTimeout(function () {\n            $(window).trigger('resize');\n        }, 0);\n    },\n    toLogin: function toLogin() {\n        _app.app.event_bus.trigger('login');\n    },\n    toLoginCreation: function toLoginCreation() {\n        _app.app.event_bus.trigger('loginCreation');\n    }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvdmlld3MvaG9tZS5qcz80YzQ1Il0sIm5hbWVzIjpbInZpZXdzIiwiaG9tZSIsIkJhY2tib25lIiwiVmlldyIsImV4dGVuZCIsInRlbXBsYXRlIiwiaW5pdGlhbGl6ZSIsImRhdGEiLCJyZXNpemVzIiwiJCIsIndpbmRvdyIsInJlc2l6ZSIsIl8iLCJ0aHJvdHRsZSIsInJlc2l6ZUZ1bmN0aW9uIiwib3B0aW9ucyIsInJlbmRlciIsImV2ZW50cyIsIiRlbCIsImh0bWwiLCJkZWxlZ2F0ZUV2ZW50cyIsInNldFRpbWVvdXQiLCJ0cmlnZ2VyIiwidG9Mb2dpbiIsImV2ZW50X2J1cyIsInRvTG9naW5DcmVhdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7O0FBRUEsU0FBSUEsS0FBSixDQUFVQyxJQUFWLEdBQWlCQyxTQUFTQyxJQUFULENBQWNDLE1BQWQsQ0FBcUI7QUFDbENDLGNBQVUsSUFEd0I7QUFFbENDLGdCQUFZLG9CQUFTQyxJQUFULEVBQWU7QUFDdkIsWUFBSUMsVUFBVSxDQUFDLGFBQUQsQ0FBZDtBQUNBQyxVQUFFQyxNQUFGLEVBQVVDLE1BQVYsQ0FBa0JDLEVBQUVDLFFBQUYsQ0FBWSxZQUFXO0FBQ3JDLHFCQUFJQyxjQUFKLENBQW1CTixPQUFuQjtBQUNILFNBRmlCLEVBRWYsSUFGZSxDQUFsQjs7QUFJQSxhQUFLTyxPQUFMLEdBQWVSLElBQWY7QUFDQSxhQUFLRixRQUFMLEdBQWdCTyxFQUFFUCxRQUFGLENBQVcsS0FBS1UsT0FBTCxDQUFhVixRQUF4QixDQUFoQjtBQUNBLGFBQUtXLE1BQUw7QUFDSCxLQVhpQztBQVlsQ0MsWUFBUTtBQUNKLG9DQUE2QixTQUR6QjtBQUVKLDBDQUFtQztBQUYvQixLQVowQjtBQWdCbENELFlBQVEsa0JBQVU7QUFDZCxhQUFLRSxHQUFMLENBQVNDLElBQVQsQ0FBYyxLQUFLZCxRQUFMLENBQWMsRUFBZCxDQUFkO0FBQ0EsYUFBS2UsY0FBTDtBQUNBO0FBQ0E7QUFDQUMsbUJBQVksWUFBVztBQUNuQlosY0FBRUMsTUFBRixFQUFVWSxPQUFWLENBQWtCLFFBQWxCO0FBQ0gsU0FGRCxFQUVHLENBRkg7QUFHSCxLQXhCaUM7QUF5QmxDQyxhQUFVLG1CQUFXO0FBQ2pCLGlCQUFJQyxTQUFKLENBQWNGLE9BQWQsQ0FBc0IsT0FBdEI7QUFDSCxLQTNCaUM7QUE0QmxDRyxxQkFBa0IsMkJBQVk7QUFDMUIsaUJBQUlELFNBQUosQ0FBY0YsT0FBZCxDQUFzQixlQUF0QjtBQUNIO0FBOUJpQyxDQUFyQixDQUFqQiIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL2FwcCc7XG5cbmFwcC52aWV3cy5ob21lID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgIHRlbXBsYXRlOiBudWxsLFxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgdmFyIHJlc2l6ZXMgPSBbJ2hvbWVDb250ZW50J107XG4gICAgICAgICQod2luZG93KS5yZXNpemUoIF8udGhyb3R0bGUoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYXBwLnJlc2l6ZUZ1bmN0aW9uKHJlc2l6ZXMpO1xuICAgICAgICB9LCAxMDAwICkgKTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBkYXRhO1xuICAgICAgICB0aGlzLnRlbXBsYXRlID0gXy50ZW1wbGF0ZSh0aGlzLm9wdGlvbnMudGVtcGxhdGUpO1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0sXG4gICAgZXZlbnRzOiB7XG4gICAgICAgICdjbGljayAjdG9Mb2dpblBhZ2VCdXR0b24nIDogJ3RvTG9naW4nLFxuICAgICAgICAnY2xpY2sgI3RvQWNjb3VudENyZWF0aW9uQnV0dG9uJyA6ICd0b0xvZ2luQ3JlYXRpb24nXG4gICAgfSxcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZSh7fSkpO1xuICAgICAgICB0aGlzLmRlbGVnYXRlRXZlbnRzKCk7XG4gICAgICAgIC8vTWFraW5nIGl0IHNvIHRoZSAndHJpZ2dlcicgY2FsbCBpcyBuZXh0IGluIHRoZSBldmVudFxuICAgICAgICAvL3F1ZXVlIGFmdGVyIHRoZSByZW5kZXJpbmdcbiAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKHdpbmRvdykudHJpZ2dlcigncmVzaXplJyk7XG4gICAgICAgIH0sIDApO1xuICAgIH0sXG4gICAgdG9Mb2dpbiA6IGZ1bmN0aW9uKCkge1xuICAgICAgICBhcHAuZXZlbnRfYnVzLnRyaWdnZXIoJ2xvZ2luJyk7XG4gICAgfSxcbiAgICB0b0xvZ2luQ3JlYXRpb24gOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFwcC5ldmVudF9idXMudHJpZ2dlcignbG9naW5DcmVhdGlvbicpO1xuICAgIH1cbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9jbGllbnQtYXBwL3ZpZXdzL2hvbWUuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.views.loggedInHeader = Backbone.View.extend({\n    initialize: function initialize(data) {\n        this.options = data;\n    },\n    render: function render() {\n        this.template = _.template(_app.app.createTemplate('templates/loggedInHeader.tpl', this.options.data));\n        this.$el.html(this.template({}));\n        this.delegateEvents();\n    },\n    events: {\n        'click #logoutButton': 'logout'\n    },\n    logout: function logout() {\n        this.model.fetch({\n            success: function success(model, response) {\n                _app.app.event_bus.trigger('login');\n            }\n        });\n    }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvdmlld3MvbG9nZ2VkSW5IZWFkZXIuanM/ZThiNiJdLCJuYW1lcyI6WyJ2aWV3cyIsImxvZ2dlZEluSGVhZGVyIiwiQmFja2JvbmUiLCJWaWV3IiwiZXh0ZW5kIiwiaW5pdGlhbGl6ZSIsImRhdGEiLCJvcHRpb25zIiwicmVuZGVyIiwidGVtcGxhdGUiLCJfIiwiY3JlYXRlVGVtcGxhdGUiLCIkZWwiLCJodG1sIiwiZGVsZWdhdGVFdmVudHMiLCJldmVudHMiLCJsb2dvdXQiLCJtb2RlbCIsImZldGNoIiwic3VjY2VzcyIsInJlc3BvbnNlIiwiZXZlbnRfYnVzIiwidHJpZ2dlciJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7O0FBRUEsU0FBSUEsS0FBSixDQUFVQyxjQUFWLEdBQTJCQyxTQUFTQyxJQUFULENBQWNDLE1BQWQsQ0FBcUI7QUFDNUNDLGdCQUFZLG9CQUFTQyxJQUFULEVBQWU7QUFDdkIsYUFBS0MsT0FBTCxHQUFlRCxJQUFmO0FBQ0gsS0FIMkM7QUFJNUNFLFlBQVEsa0JBQVU7QUFDZCxhQUFLQyxRQUFMLEdBQWdCQyxFQUFFRCxRQUFGLENBQVcsU0FBSUUsY0FBSixDQUFtQiw4QkFBbkIsRUFBbUQsS0FBS0osT0FBTCxDQUFhRCxJQUFoRSxDQUFYLENBQWhCO0FBQ0EsYUFBS00sR0FBTCxDQUFTQyxJQUFULENBQWMsS0FBS0osUUFBTCxDQUFjLEVBQWQsQ0FBZDtBQUNBLGFBQUtLLGNBQUw7QUFDSCxLQVIyQztBQVM1Q0MsWUFBUTtBQUNKLCtCQUF3QjtBQURwQixLQVRvQztBQVk1Q0MsWUFBUSxrQkFBVztBQUNmLGFBQUtDLEtBQUwsQ0FBV0MsS0FBWCxDQUFpQjtBQUNiQyxxQkFBUyxpQkFBU0YsS0FBVCxFQUFnQkcsUUFBaEIsRUFBMEI7QUFDL0IseUJBQUlDLFNBQUosQ0FBY0MsT0FBZCxDQUFzQixPQUF0QjtBQUNIO0FBSFksU0FBakI7QUFLSDtBQWxCMkMsQ0FBckIsQ0FBM0IiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9hcHAnO1xuXG5hcHAudmlld3MubG9nZ2VkSW5IZWFkZXIgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBkYXRhO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLnRlbXBsYXRlID0gXy50ZW1wbGF0ZShhcHAuY3JlYXRlVGVtcGxhdGUoJ3RlbXBsYXRlcy9sb2dnZWRJbkhlYWRlci50cGwnLCB0aGlzLm9wdGlvbnMuZGF0YSkpO1xuICAgICAgICB0aGlzLiRlbC5odG1sKHRoaXMudGVtcGxhdGUoe30pKTtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZUV2ZW50cygpO1xuICAgIH0sXG4gICAgZXZlbnRzOiB7XG4gICAgICAgICdjbGljayAjbG9nb3V0QnV0dG9uJyA6ICdsb2dvdXQnXG4gICAgfSxcbiAgICBsb2dvdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm1vZGVsLmZldGNoKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKG1vZGVsLCByZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGFwcC5ldmVudF9idXMudHJpZ2dlcignbG9naW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2NsaWVudC1hcHAvdmlld3MvbG9nZ2VkSW5IZWFkZXIuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.views.loggedOutHeader = Backbone.View.extend({\n    template: null,\n    initialize: function initialize(data) {\n        this.options = data;\n        this.template = _.template(this.options.template);\n    },\n    render: function render() {\n        this.$el.html(this.template({}));\n        this.delegateEvents();\n    }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvdmlld3MvbG9nZ2VkT3V0SGVhZGVyLmpzPzQyN2QiXSwibmFtZXMiOlsidmlld3MiLCJsb2dnZWRPdXRIZWFkZXIiLCJCYWNrYm9uZSIsIlZpZXciLCJleHRlbmQiLCJ0ZW1wbGF0ZSIsImluaXRpYWxpemUiLCJkYXRhIiwib3B0aW9ucyIsIl8iLCJyZW5kZXIiLCIkZWwiLCJodG1sIiwiZGVsZWdhdGVFdmVudHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBOztBQUVBLFNBQUlBLEtBQUosQ0FBVUMsZUFBVixHQUE0QkMsU0FBU0MsSUFBVCxDQUFjQyxNQUFkLENBQXFCO0FBQzdDQyxjQUFVLElBRG1DO0FBRTdDQyxnQkFBWSxvQkFBU0MsSUFBVCxFQUFlO0FBQ3ZCLGFBQUtDLE9BQUwsR0FBZUQsSUFBZjtBQUNBLGFBQUtGLFFBQUwsR0FBZ0JJLEVBQUVKLFFBQUYsQ0FBVyxLQUFLRyxPQUFMLENBQWFILFFBQXhCLENBQWhCO0FBQ0gsS0FMNEM7QUFNN0NLLFlBQVEsa0JBQVU7QUFDZCxhQUFLQyxHQUFMLENBQVNDLElBQVQsQ0FBYyxLQUFLUCxRQUFMLENBQWMsRUFBZCxDQUFkO0FBQ0EsYUFBS1EsY0FBTDtBQUNIO0FBVDRDLENBQXJCLENBQTVCIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vYXBwJztcblxuYXBwLnZpZXdzLmxvZ2dlZE91dEhlYWRlciA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICB0ZW1wbGF0ZTogbnVsbCxcbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGRhdGE7XG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSBfLnRlbXBsYXRlKHRoaXMub3B0aW9ucy50ZW1wbGF0ZSk7XG4gICAgfSxcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZSh7fSkpO1xuICAgICAgICB0aGlzLmRlbGVnYXRlRXZlbnRzKCk7XG4gICAgfVxufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2NsaWVudC1hcHAvdmlld3MvbG9nZ2VkT3V0SGVhZGVyLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.views.login = Backbone.View.extend({\n    template: null,\n    initialize: function initialize(data) {\n        this.options = data;\n        this.template = _.template(this.options.template);\n        this.render();\n\n        Backbone.Validation.bind(this, {\n            valid: function valid(view, attr) {\n                var element = view.$(\"[name=\" + attr + \"]\");\n                var parent = element.closest('.inputWrapper');\n                element.removeClass('error');\n                parent.find('small.error').html('').addClass('hidden');\n            },\n            invalid: function invalid(view, attr, error) {\n                //Hide server errors if input error arises\n                $('#serverError').html('').addClass('hidden');\n                var element = view.$(\"[name=\" + attr + \"]\");\n                var parent = element.closest('.inputWrapper');\n                element.addClass('error');\n                parent.find('small.error').html(error).removeClass('hidden');\n            }\n        });\n    },\n    events: {\n        'click #loginButton': 'login',\n        'click #homeButton': 'home'\n    },\n    render: function render() {\n        this.$el.html(this.template({}));\n        this.delegateEvents();\n    },\n    login: function login() {\n        event.preventDefault();\n        var data = $('#loginRequest').serializeObject();\n        this.model.set(data);\n        if (this.model.isValid(true)) {\n            this.model.save({\n                Email: data.Email,\n                Password: data.Password\n            }, {\n                success: function success(model, response) {\n                    _app.app.event_bus.trigger('timeSheet');\n                },\n                error: function error(model, response) {\n                    $('#serverError').html(response.responseJSON.message).removeClass('hidden');\n                }\n            });\n        }\n    },\n    home: function home() {\n        _app.app.event_bus.trigger('home');\n    }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvdmlld3MvbG9naW4uanM/ZjQwNiJdLCJuYW1lcyI6WyJ2aWV3cyIsImxvZ2luIiwiQmFja2JvbmUiLCJWaWV3IiwiZXh0ZW5kIiwidGVtcGxhdGUiLCJpbml0aWFsaXplIiwiZGF0YSIsIm9wdGlvbnMiLCJfIiwicmVuZGVyIiwiVmFsaWRhdGlvbiIsImJpbmQiLCJ2YWxpZCIsInZpZXciLCJhdHRyIiwiZWxlbWVudCIsIiQiLCJwYXJlbnQiLCJjbG9zZXN0IiwicmVtb3ZlQ2xhc3MiLCJmaW5kIiwiaHRtbCIsImFkZENsYXNzIiwiaW52YWxpZCIsImVycm9yIiwiZXZlbnRzIiwiJGVsIiwiZGVsZWdhdGVFdmVudHMiLCJldmVudCIsInByZXZlbnREZWZhdWx0Iiwic2VyaWFsaXplT2JqZWN0IiwibW9kZWwiLCJzZXQiLCJpc1ZhbGlkIiwic2F2ZSIsIkVtYWlsIiwiUGFzc3dvcmQiLCJzdWNjZXNzIiwicmVzcG9uc2UiLCJldmVudF9idXMiLCJ0cmlnZ2VyIiwicmVzcG9uc2VKU09OIiwibWVzc2FnZSIsImhvbWUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBOztBQUVBLFNBQUlBLEtBQUosQ0FBVUMsS0FBVixHQUFrQkMsU0FBU0MsSUFBVCxDQUFjQyxNQUFkLENBQXFCO0FBQ25DQyxjQUFVLElBRHlCO0FBRW5DQyxnQkFBWSxvQkFBU0MsSUFBVCxFQUFlO0FBQ3ZCLGFBQUtDLE9BQUwsR0FBZUQsSUFBZjtBQUNBLGFBQUtGLFFBQUwsR0FBZ0JJLEVBQUVKLFFBQUYsQ0FBVyxLQUFLRyxPQUFMLENBQWFILFFBQXhCLENBQWhCO0FBQ0EsYUFBS0ssTUFBTDs7QUFFQVIsaUJBQVNTLFVBQVQsQ0FBb0JDLElBQXBCLENBQXlCLElBQXpCLEVBQStCO0FBQzdCQyxtQkFBTyxlQUFTQyxJQUFULEVBQWVDLElBQWYsRUFBcUI7QUFDMUIsb0JBQUlDLFVBQVVGLEtBQUtHLENBQUwsQ0FBTyxXQUFTRixJQUFULEdBQWMsR0FBckIsQ0FBZDtBQUNBLG9CQUFJRyxTQUFTRixRQUFRRyxPQUFSLENBQWdCLGVBQWhCLENBQWI7QUFDQUgsd0JBQVFJLFdBQVIsQ0FBb0IsT0FBcEI7QUFDQUYsdUJBQU9HLElBQVAsQ0FBWSxhQUFaLEVBQTJCQyxJQUEzQixDQUFnQyxFQUFoQyxFQUFvQ0MsUUFBcEMsQ0FBNkMsUUFBN0M7QUFDRCxhQU40QjtBQU83QkMscUJBQVMsaUJBQVNWLElBQVQsRUFBZUMsSUFBZixFQUFxQlUsS0FBckIsRUFBNEI7QUFDbkM7QUFDQVIsa0JBQUUsY0FBRixFQUFrQkssSUFBbEIsQ0FBdUIsRUFBdkIsRUFBMkJDLFFBQTNCLENBQW9DLFFBQXBDO0FBQ0Esb0JBQUlQLFVBQVVGLEtBQUtHLENBQUwsQ0FBTyxXQUFTRixJQUFULEdBQWMsR0FBckIsQ0FBZDtBQUNBLG9CQUFJRyxTQUFTRixRQUFRRyxPQUFSLENBQWdCLGVBQWhCLENBQWI7QUFDQUgsd0JBQVFPLFFBQVIsQ0FBaUIsT0FBakI7QUFDQUwsdUJBQU9HLElBQVAsQ0FBWSxhQUFaLEVBQTJCQyxJQUEzQixDQUFnQ0csS0FBaEMsRUFBdUNMLFdBQXZDLENBQW1ELFFBQW5EO0FBQ0Q7QUFkNEIsU0FBL0I7QUFnQkgsS0F2QmtDO0FBd0JuQ00sWUFBUTtBQUNOLDhCQUF1QixPQURqQjtBQUVOLDZCQUFzQjtBQUZoQixLQXhCMkI7QUE0Qm5DaEIsWUFBUSxrQkFBVTtBQUNkLGFBQUtpQixHQUFMLENBQVNMLElBQVQsQ0FBYyxLQUFLakIsUUFBTCxDQUFjLEVBQWQsQ0FBZDtBQUNBLGFBQUt1QixjQUFMO0FBQ0gsS0EvQmtDO0FBZ0NuQzNCLFdBQU8saUJBQVc7QUFDZDRCLGNBQU1DLGNBQU47QUFDQSxZQUFJdkIsT0FBT1UsRUFBRSxlQUFGLEVBQW1CYyxlQUFuQixFQUFYO0FBQ0EsYUFBS0MsS0FBTCxDQUFXQyxHQUFYLENBQWUxQixJQUFmO0FBQ0EsWUFBSSxLQUFLeUIsS0FBTCxDQUFXRSxPQUFYLENBQW1CLElBQW5CLENBQUosRUFBOEI7QUFDMUIsaUJBQUtGLEtBQUwsQ0FBV0csSUFBWCxDQUFnQjtBQUNaQyx1QkFBTzdCLEtBQUs2QixLQURBO0FBRVpDLDBCQUFVOUIsS0FBSzhCO0FBRkgsYUFBaEIsRUFHRztBQUNDQyx5QkFBUyxpQkFBU04sS0FBVCxFQUFnQk8sUUFBaEIsRUFBMEI7QUFDL0IsNkJBQUlDLFNBQUosQ0FBY0MsT0FBZCxDQUFzQixXQUF0QjtBQUNILGlCQUhGO0FBSUNoQix1QkFBTyxlQUFTTyxLQUFULEVBQWdCTyxRQUFoQixFQUEwQjtBQUM3QnRCLHNCQUFFLGNBQUYsRUFBa0JLLElBQWxCLENBQXVCaUIsU0FBU0csWUFBVCxDQUFzQkMsT0FBN0MsRUFBc0R2QixXQUF0RCxDQUFrRSxRQUFsRTtBQUNIO0FBTkYsYUFISDtBQVdIO0FBQ0osS0FqRGtDO0FBa0RuQ3dCLFVBQU0sZ0JBQVc7QUFDYixpQkFBSUosU0FBSixDQUFjQyxPQUFkLENBQXNCLE1BQXRCO0FBQ0g7QUFwRGtDLENBQXJCLENBQWxCIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vYXBwJztcblxuYXBwLnZpZXdzLmxvZ2luID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgIHRlbXBsYXRlOiBudWxsLFxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gZGF0YTtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IF8udGVtcGxhdGUodGhpcy5vcHRpb25zLnRlbXBsYXRlKTtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcblxuICAgICAgICBCYWNrYm9uZS5WYWxpZGF0aW9uLmJpbmQodGhpcywge1xuICAgICAgICAgIHZhbGlkOiBmdW5jdGlvbih2aWV3LCBhdHRyKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHZpZXcuJChcIltuYW1lPVwiK2F0dHIrXCJdXCIpO1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IGVsZW1lbnQuY2xvc2VzdCgnLmlucHV0V3JhcHBlcicpO1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZXJyb3InKTtcbiAgICAgICAgICAgIHBhcmVudC5maW5kKCdzbWFsbC5lcnJvcicpLmh0bWwoJycpLmFkZENsYXNzKCdoaWRkZW4nKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGludmFsaWQ6IGZ1bmN0aW9uKHZpZXcsIGF0dHIsIGVycm9yKSB7XG4gICAgICAgICAgICAvL0hpZGUgc2VydmVyIGVycm9ycyBpZiBpbnB1dCBlcnJvciBhcmlzZXNcbiAgICAgICAgICAgICQoJyNzZXJ2ZXJFcnJvcicpLmh0bWwoJycpLmFkZENsYXNzKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdmlldy4kKFwiW25hbWU9XCIrYXR0citcIl1cIik7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5jbG9zZXN0KCcuaW5wdXRXcmFwcGVyJyk7XG4gICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdlcnJvcicpO1xuICAgICAgICAgICAgcGFyZW50LmZpbmQoJ3NtYWxsLmVycm9yJykuaHRtbChlcnJvcikucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBldmVudHM6IHtcbiAgICAgICdjbGljayAjbG9naW5CdXR0b24nIDogJ2xvZ2luJyxcbiAgICAgICdjbGljayAjaG9tZUJ1dHRvbicgOiAnaG9tZSdcbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy4kZWwuaHRtbCh0aGlzLnRlbXBsYXRlKHt9KSk7XG4gICAgICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoKTtcbiAgICB9LFxuICAgIGxvZ2luOiBmdW5jdGlvbigpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkKCcjbG9naW5SZXF1ZXN0Jykuc2VyaWFsaXplT2JqZWN0KCk7XG4gICAgICAgIHRoaXMubW9kZWwuc2V0KGRhdGEpO1xuICAgICAgICBpZiAodGhpcy5tb2RlbC5pc1ZhbGlkKHRydWUpKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGVsLnNhdmUoe1xuICAgICAgICAgICAgICAgIEVtYWlsOiBkYXRhLkVtYWlsLFxuICAgICAgICAgICAgICAgIFBhc3N3b3JkOiBkYXRhLlBhc3N3b3JkXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24obW9kZWwsIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcC5ldmVudF9idXMudHJpZ2dlcigndGltZVNoZWV0Jyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24obW9kZWwsIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJyNzZXJ2ZXJFcnJvcicpLmh0bWwocmVzcG9uc2UucmVzcG9uc2VKU09OLm1lc3NhZ2UpLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgaG9tZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGFwcC5ldmVudF9idXMudHJpZ2dlcignaG9tZScpO1xuICAgIH1cbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9jbGllbnQtYXBwL3ZpZXdzL2xvZ2luLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	eval("//Validation Source: http://jsfiddle.net/thedersen/udXL5/\n\n'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.views.loginCreation = Backbone.View.extend({\n    template: null,\n    initialize: function initialize(data) {\n        this.options = data;\n        this.template = _.template(this.options.template);\n        this.render();\n\n        Backbone.Validation.bind(this, {\n            valid: function valid(view, attr) {\n                var element = view.$(\"[name=\" + attr + \"]\");\n                var parent = element.closest('.inputWrapper');\n                element.removeClass('error');\n                parent.find('small.error').html('').addClass('hidden');\n            },\n            invalid: function invalid(view, attr, error) {\n                //Hide server errors if input error arises\n                $('#serverError').html('').addClass('hidden');\n                var element = view.$(\"[name=\" + attr + \"]\");\n                var parent = element.closest('.inputWrapper');\n                element.addClass('error');\n                parent.find('small.error').html(error).removeClass('hidden');\n            }\n        });\n    },\n    events: {\n        \"click #submitButton\": \"loginCreation\",\n        \"click #homeButton\": \"home\"\n    },\n    render: function render() {\n        this.$el.html(this.template({}));\n        this.delegateEvents();\n    },\n    loginCreation: function loginCreation() {\n        event.preventDefault();\n        var data = $('#loginCreation').serializeObject();\n        this.model.set(data);\n        if (this.model.isValid(true)) {\n            this.model.save({\n                FirstName: data.FirstName,\n                LastName: data.LastName,\n                Email: data.Email,\n                Password: data.Password,\n                AuthToken: data.AuthToken\n            }, {\n                success: function success(model, response) {\n                    _app.app.event_bus.trigger('timeSheet');\n                },\n                error: function error(model, response) {\n                    $('#serverError').html(response.responseJSON.message).removeClass('hidden');\n                }\n            });\n        }\n    },\n    home: function home() {\n        _app.app.event_bus.trigger('home');\n    }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvdmlld3MvbG9naW5DcmVhdGlvbi5qcz83MzhjIl0sIm5hbWVzIjpbInZpZXdzIiwibG9naW5DcmVhdGlvbiIsIkJhY2tib25lIiwiVmlldyIsImV4dGVuZCIsInRlbXBsYXRlIiwiaW5pdGlhbGl6ZSIsImRhdGEiLCJvcHRpb25zIiwiXyIsInJlbmRlciIsIlZhbGlkYXRpb24iLCJiaW5kIiwidmFsaWQiLCJ2aWV3IiwiYXR0ciIsImVsZW1lbnQiLCIkIiwicGFyZW50IiwiY2xvc2VzdCIsInJlbW92ZUNsYXNzIiwiZmluZCIsImh0bWwiLCJhZGRDbGFzcyIsImludmFsaWQiLCJlcnJvciIsImV2ZW50cyIsIiRlbCIsImRlbGVnYXRlRXZlbnRzIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInNlcmlhbGl6ZU9iamVjdCIsIm1vZGVsIiwic2V0IiwiaXNWYWxpZCIsInNhdmUiLCJGaXJzdE5hbWUiLCJMYXN0TmFtZSIsIkVtYWlsIiwiUGFzc3dvcmQiLCJBdXRoVG9rZW4iLCJzdWNjZXNzIiwicmVzcG9uc2UiLCJldmVudF9idXMiLCJ0cmlnZ2VyIiwicmVzcG9uc2VKU09OIiwibWVzc2FnZSIsImhvbWUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUNBOztBQUVBLFNBQUlBLEtBQUosQ0FBVUMsYUFBVixHQUEwQkMsU0FBU0MsSUFBVCxDQUFjQyxNQUFkLENBQXFCO0FBQzNDQyxjQUFVLElBRGlDO0FBRTNDQyxnQkFBWSxvQkFBU0MsSUFBVCxFQUFlO0FBQ3ZCLGFBQUtDLE9BQUwsR0FBZUQsSUFBZjtBQUNBLGFBQUtGLFFBQUwsR0FBZ0JJLEVBQUVKLFFBQUYsQ0FBVyxLQUFLRyxPQUFMLENBQWFILFFBQXhCLENBQWhCO0FBQ0EsYUFBS0ssTUFBTDs7QUFFQVIsaUJBQVNTLFVBQVQsQ0FBb0JDLElBQXBCLENBQXlCLElBQXpCLEVBQStCO0FBQzdCQyxtQkFBTyxlQUFTQyxJQUFULEVBQWVDLElBQWYsRUFBcUI7QUFDMUIsb0JBQUlDLFVBQVVGLEtBQUtHLENBQUwsQ0FBTyxXQUFTRixJQUFULEdBQWMsR0FBckIsQ0FBZDtBQUNBLG9CQUFJRyxTQUFTRixRQUFRRyxPQUFSLENBQWdCLGVBQWhCLENBQWI7QUFDQUgsd0JBQVFJLFdBQVIsQ0FBb0IsT0FBcEI7QUFDQUYsdUJBQU9HLElBQVAsQ0FBWSxhQUFaLEVBQTJCQyxJQUEzQixDQUFnQyxFQUFoQyxFQUFvQ0MsUUFBcEMsQ0FBNkMsUUFBN0M7QUFDRCxhQU40QjtBQU83QkMscUJBQVMsaUJBQVNWLElBQVQsRUFBZUMsSUFBZixFQUFxQlUsS0FBckIsRUFBNEI7QUFDbkM7QUFDQVIsa0JBQUUsY0FBRixFQUFrQkssSUFBbEIsQ0FBdUIsRUFBdkIsRUFBMkJDLFFBQTNCLENBQW9DLFFBQXBDO0FBQ0Esb0JBQUlQLFVBQVVGLEtBQUtHLENBQUwsQ0FBTyxXQUFTRixJQUFULEdBQWMsR0FBckIsQ0FBZDtBQUNBLG9CQUFJRyxTQUFTRixRQUFRRyxPQUFSLENBQWdCLGVBQWhCLENBQWI7QUFDQUgsd0JBQVFPLFFBQVIsQ0FBaUIsT0FBakI7QUFDQUwsdUJBQU9HLElBQVAsQ0FBWSxhQUFaLEVBQTJCQyxJQUEzQixDQUFnQ0csS0FBaEMsRUFBdUNMLFdBQXZDLENBQW1ELFFBQW5EO0FBQ0Q7QUFkNEIsU0FBL0I7QUFnQkgsS0F2QjBDO0FBd0IzQ00sWUFBUTtBQUNOLCtCQUF3QixlQURsQjtBQUVOLDZCQUFzQjtBQUZoQixLQXhCbUM7QUE0QjNDaEIsWUFBUSxrQkFBVTtBQUNkLGFBQUtpQixHQUFMLENBQVNMLElBQVQsQ0FBYyxLQUFLakIsUUFBTCxDQUFjLEVBQWQsQ0FBZDtBQUNBLGFBQUt1QixjQUFMO0FBQ0gsS0EvQjBDO0FBZ0MzQzNCLG1CQUFlLHlCQUFVO0FBQ3JCNEIsY0FBTUMsY0FBTjtBQUNBLFlBQUl2QixPQUFPVSxFQUFFLGdCQUFGLEVBQW9CYyxlQUFwQixFQUFYO0FBQ0EsYUFBS0MsS0FBTCxDQUFXQyxHQUFYLENBQWUxQixJQUFmO0FBQ0EsWUFBSSxLQUFLeUIsS0FBTCxDQUFXRSxPQUFYLENBQW1CLElBQW5CLENBQUosRUFBOEI7QUFDMUIsaUJBQUtGLEtBQUwsQ0FBV0csSUFBWCxDQUFnQjtBQUNaQywyQkFBVzdCLEtBQUs2QixTQURKO0FBRVpDLDBCQUFVOUIsS0FBSzhCLFFBRkg7QUFHWkMsdUJBQU8vQixLQUFLK0IsS0FIQTtBQUlaQywwQkFBVWhDLEtBQUtnQyxRQUpIO0FBS1pDLDJCQUFXakMsS0FBS2lDO0FBTEosYUFBaEIsRUFNRztBQUNDQyx5QkFBUyxpQkFBU1QsS0FBVCxFQUFnQlUsUUFBaEIsRUFBMEI7QUFDL0IsNkJBQUlDLFNBQUosQ0FBY0MsT0FBZCxDQUFzQixXQUF0QjtBQUNILGlCQUhGO0FBSUNuQix1QkFBTyxlQUFTTyxLQUFULEVBQWdCVSxRQUFoQixFQUEwQjtBQUM3QnpCLHNCQUFFLGNBQUYsRUFBa0JLLElBQWxCLENBQXVCb0IsU0FBU0csWUFBVCxDQUFzQkMsT0FBN0MsRUFBc0QxQixXQUF0RCxDQUFrRSxRQUFsRTtBQUNIO0FBTkYsYUFOSDtBQWNIO0FBQ0osS0FwRDBDO0FBcUQzQzJCLFVBQU0sZ0JBQVc7QUFDYixpQkFBSUosU0FBSixDQUFjQyxPQUFkLENBQXNCLE1BQXRCO0FBQ0g7QUF2RDBDLENBQXJCLENBQTFCIiwiZmlsZSI6IjI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9WYWxpZGF0aW9uIFNvdXJjZTogaHR0cDovL2pzZmlkZGxlLm5ldC90aGVkZXJzZW4vdWRYTDUvXG5cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL2FwcCc7XG5cbmFwcC52aWV3cy5sb2dpbkNyZWF0aW9uID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgIHRlbXBsYXRlOiBudWxsLFxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gZGF0YTtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IF8udGVtcGxhdGUodGhpcy5vcHRpb25zLnRlbXBsYXRlKTtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcblxuICAgICAgICBCYWNrYm9uZS5WYWxpZGF0aW9uLmJpbmQodGhpcywge1xuICAgICAgICAgIHZhbGlkOiBmdW5jdGlvbih2aWV3LCBhdHRyKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHZpZXcuJChcIltuYW1lPVwiK2F0dHIrXCJdXCIpO1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IGVsZW1lbnQuY2xvc2VzdCgnLmlucHV0V3JhcHBlcicpO1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZXJyb3InKTtcbiAgICAgICAgICAgIHBhcmVudC5maW5kKCdzbWFsbC5lcnJvcicpLmh0bWwoJycpLmFkZENsYXNzKCdoaWRkZW4nKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGludmFsaWQ6IGZ1bmN0aW9uKHZpZXcsIGF0dHIsIGVycm9yKSB7XG4gICAgICAgICAgICAvL0hpZGUgc2VydmVyIGVycm9ycyBpZiBpbnB1dCBlcnJvciBhcmlzZXNcbiAgICAgICAgICAgICQoJyNzZXJ2ZXJFcnJvcicpLmh0bWwoJycpLmFkZENsYXNzKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdmlldy4kKFwiW25hbWU9XCIrYXR0citcIl1cIik7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5jbG9zZXN0KCcuaW5wdXRXcmFwcGVyJyk7XG4gICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdlcnJvcicpO1xuICAgICAgICAgICAgcGFyZW50LmZpbmQoJ3NtYWxsLmVycm9yJykuaHRtbChlcnJvcikucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBldmVudHM6IHtcbiAgICAgIFwiY2xpY2sgI3N1Ym1pdEJ1dHRvblwiIDogXCJsb2dpbkNyZWF0aW9uXCIsXG4gICAgICBcImNsaWNrICNob21lQnV0dG9uXCIgOiBcImhvbWVcIlxuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLiRlbC5odG1sKHRoaXMudGVtcGxhdGUoe30pKTtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZUV2ZW50cygpO1xuICAgIH0sXG4gICAgbG9naW5DcmVhdGlvbjogZnVuY3Rpb24oKXtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkKCcjbG9naW5DcmVhdGlvbicpLnNlcmlhbGl6ZU9iamVjdCgpO1xuICAgICAgICB0aGlzLm1vZGVsLnNldChkYXRhKTtcbiAgICAgICAgaWYgKHRoaXMubW9kZWwuaXNWYWxpZCh0cnVlKSkge1xuICAgICAgICAgICAgdGhpcy5tb2RlbC5zYXZlKHtcbiAgICAgICAgICAgICAgICBGaXJzdE5hbWU6IGRhdGEuRmlyc3ROYW1lLFxuICAgICAgICAgICAgICAgIExhc3ROYW1lOiBkYXRhLkxhc3ROYW1lLFxuICAgICAgICAgICAgICAgIEVtYWlsOiBkYXRhLkVtYWlsLFxuICAgICAgICAgICAgICAgIFBhc3N3b3JkOiBkYXRhLlBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIEF1dGhUb2tlbjogZGF0YS5BdXRoVG9rZW5cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihtb2RlbCwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwLmV2ZW50X2J1cy50cmlnZ2VyKCd0aW1lU2hlZXQnKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihtb2RlbCwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnI3NlcnZlckVycm9yJykuaHRtbChyZXNwb25zZS5yZXNwb25zZUpTT04ubWVzc2FnZSkucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBob21lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgYXBwLmV2ZW50X2J1cy50cmlnZ2VyKCdob21lJyk7XG4gICAgfVxufSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2NsaWVudC1hcHAvdmlld3MvbG9naW5DcmVhdGlvbi5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.views.personCollectionView = Backbone.View.extend({\n  initialize: function initialize(options) {\n    this.personView = options.childView;\n\n    this.personViews = {};\n\n    this.collection.each(this.add, this);\n    this.listenTo(this.collection, 'add', this.add);\n    this.listenTo(this.collection, 'remove', this.removePerson);\n  },\n  add: function add(person) {\n    var personView = this.personViews[person.id] || new this.personView({\n      model: person\n    });\n    this.listenTo(personView, 'remove', this.removePerson);\n    this.personViews[person.id] = personView;\n\n    if (this.rendered) {\n      $(this.el).append(personView.render().el);\n    }\n  },\n  removePerson: function removePerson(person) {\n    var viewToRemove = this.personViews[person.id];\n    viewToRemove.close();\n  },\n  render: function render() {\n    this.rendered = true;\n    this.collection.each(function (person) {\n      this.$el.append(this.personViews[person.id].render().el);\n    }, this);\n  }\n}); //Help: http://liquidmedia.org/blog/2011/02/backbone-js-part-3/\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvdmlld3MvcGVyc29uQ29sbGVjdGlvbi5qcz8xMzg1Il0sIm5hbWVzIjpbInZpZXdzIiwicGVyc29uQ29sbGVjdGlvblZpZXciLCJCYWNrYm9uZSIsIlZpZXciLCJleHRlbmQiLCJpbml0aWFsaXplIiwib3B0aW9ucyIsInBlcnNvblZpZXciLCJjaGlsZFZpZXciLCJwZXJzb25WaWV3cyIsImNvbGxlY3Rpb24iLCJlYWNoIiwiYWRkIiwibGlzdGVuVG8iLCJyZW1vdmVQZXJzb24iLCJwZXJzb24iLCJpZCIsIm1vZGVsIiwicmVuZGVyZWQiLCIkIiwiZWwiLCJhcHBlbmQiLCJyZW5kZXIiLCJ2aWV3VG9SZW1vdmUiLCJjbG9zZSIsIiRlbCJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7QUFFQSxTQUFJQSxLQUFKLENBQVVDLG9CQUFWLEdBQWlDQyxTQUFTQyxJQUFULENBQWNDLE1BQWQsQ0FBcUI7QUFDcERDLGNBQWEsb0JBQVNDLE9BQVQsRUFBa0I7QUFDN0IsU0FBS0MsVUFBTCxHQUFrQkQsUUFBUUUsU0FBMUI7O0FBRUEsU0FBS0MsV0FBTCxHQUFtQixFQUFuQjs7QUFFQSxTQUFLQyxVQUFMLENBQWdCQyxJQUFoQixDQUFxQixLQUFLQyxHQUExQixFQUErQixJQUEvQjtBQUNBLFNBQUtDLFFBQUwsQ0FBYyxLQUFLSCxVQUFuQixFQUErQixLQUEvQixFQUFzQyxLQUFLRSxHQUEzQztBQUNBLFNBQUtDLFFBQUwsQ0FBYyxLQUFLSCxVQUFuQixFQUErQixRQUEvQixFQUF5QyxLQUFLSSxZQUE5QztBQUNELEdBVG1EO0FBVXBERixPQUFLLGFBQVNHLE1BQVQsRUFBaUI7QUFDcEIsUUFBSVIsYUFBYSxLQUFLRSxXQUFMLENBQWlCTSxPQUFPQyxFQUF4QixLQUErQixJQUFJLEtBQUtULFVBQVQsQ0FBb0I7QUFDbEVVLGFBQU9GO0FBRDJELEtBQXBCLENBQWhEO0FBR0EsU0FBS0YsUUFBTCxDQUFjTixVQUFkLEVBQTBCLFFBQTFCLEVBQW9DLEtBQUtPLFlBQXpDO0FBQ0EsU0FBS0wsV0FBTCxDQUFpQk0sT0FBT0MsRUFBeEIsSUFBOEJULFVBQTlCOztBQUVBLFFBQUksS0FBS1csUUFBVCxFQUFtQjtBQUNqQkMsUUFBRSxLQUFLQyxFQUFQLEVBQVdDLE1BQVgsQ0FBa0JkLFdBQVdlLE1BQVgsR0FBb0JGLEVBQXRDO0FBQ0Q7QUFDRixHQXBCbUQ7QUFxQnBETixnQkFBYyxzQkFBU0MsTUFBVCxFQUFpQjtBQUM3QixRQUFJUSxlQUFlLEtBQUtkLFdBQUwsQ0FBaUJNLE9BQU9DLEVBQXhCLENBQW5CO0FBQ0FPLGlCQUFhQyxLQUFiO0FBQ0QsR0F4Qm1EO0FBeUJwREYsVUFBUSxrQkFBVztBQUNqQixTQUFLSixRQUFMLEdBQWdCLElBQWhCO0FBQ0EsU0FBS1IsVUFBTCxDQUFnQkMsSUFBaEIsQ0FBc0IsVUFBU0ksTUFBVCxFQUFpQjtBQUNyQyxXQUFLVSxHQUFMLENBQVNKLE1BQVQsQ0FBZ0IsS0FBS1osV0FBTCxDQUFpQk0sT0FBT0MsRUFBeEIsRUFBNEJNLE1BQTVCLEdBQXFDRixFQUFyRDtBQUNELEtBRkQsRUFFRyxJQUZIO0FBR0Q7QUE5Qm1ELENBQXJCLENBQWpDLEMsQ0FIQSIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vSGVscDogaHR0cDovL2xpcXVpZG1lZGlhLm9yZy9ibG9nLzIwMTEvMDIvYmFja2JvbmUtanMtcGFydC0zL1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vYXBwJztcblxuYXBwLnZpZXdzLnBlcnNvbkNvbGxlY3Rpb25WaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICBpbml0aWFsaXplIDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMucGVyc29uVmlldyA9IG9wdGlvbnMuY2hpbGRWaWV3O1xuXG4gICAgdGhpcy5wZXJzb25WaWV3cyA9IHt9O1xuXG4gICAgdGhpcy5jb2xsZWN0aW9uLmVhY2godGhpcy5hZGQsIHRoaXMpO1xuICAgIHRoaXMubGlzdGVuVG8odGhpcy5jb2xsZWN0aW9uLCAnYWRkJywgdGhpcy5hZGQpO1xuICAgIHRoaXMubGlzdGVuVG8odGhpcy5jb2xsZWN0aW9uLCAncmVtb3ZlJywgdGhpcy5yZW1vdmVQZXJzb24pO1xuICB9LFxuICBhZGQ6IGZ1bmN0aW9uKHBlcnNvbikge1xuICAgIHZhciBwZXJzb25WaWV3ID0gdGhpcy5wZXJzb25WaWV3c1twZXJzb24uaWRdIHx8IG5ldyB0aGlzLnBlcnNvblZpZXcoe1xuICAgICAgbW9kZWw6IHBlcnNvblxuICAgIH0pO1xuICAgIHRoaXMubGlzdGVuVG8ocGVyc29uVmlldywgJ3JlbW92ZScsIHRoaXMucmVtb3ZlUGVyc29uKTtcbiAgICB0aGlzLnBlcnNvblZpZXdzW3BlcnNvbi5pZF0gPSBwZXJzb25WaWV3O1xuXG4gICAgaWYgKHRoaXMucmVuZGVyZWQpIHtcbiAgICAgICQodGhpcy5lbCkuYXBwZW5kKHBlcnNvblZpZXcucmVuZGVyKCkuZWwpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlUGVyc29uOiBmdW5jdGlvbihwZXJzb24pIHtcbiAgICB2YXIgdmlld1RvUmVtb3ZlID0gdGhpcy5wZXJzb25WaWV3c1twZXJzb24uaWRdO1xuICAgIHZpZXdUb1JlbW92ZS5jbG9zZSgpO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVuZGVyZWQgPSB0cnVlO1xuICAgIHRoaXMuY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbihwZXJzb24pIHtcbiAgICAgIHRoaXMuJGVsLmFwcGVuZCh0aGlzLnBlcnNvblZpZXdzW3BlcnNvbi5pZF0ucmVuZGVyKCkuZWwpO1xuICAgIH0sIHRoaXMpO1xuICB9XG59KTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hcHAvY2xpZW50LWFwcC92aWV3cy9wZXJzb25Db2xsZWN0aW9uLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 28 */,
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	eval("//Not particularly pleased with the nongeneric way I'm implementing this at the moment.\n//Possible alternative is to use actual dates instead of mondayTime, tuesdayTime, etc.\n// Ex: 2016-05-07-Time\n\n'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.views.TimeSelector = Backbone.View.extend({\n  initialize: function initialize(data) {\n    this.options = data;\n    this.dayIds = ['mondayTime', 'tuesdayTime', 'wednesdayTime', 'thursdayTime', 'fridayTime'];\n    this.listenTo(_app.app.event_bus, 'totalTime', this.computeTotalTime);\n    this.timeSelectorDayViews = {};\n  },\n  render: function render() {\n    this.template = _.template(_app.app.createTemplate('templates/timeSelector.tpl', { weekStartDate: this.model.get('weekStartDate'), totalTime: this.model.get('totalTime') }));\n    $(this.options.el).html(this.template({}));\n\n    for (var i = 0; i < this.dayIds.length; i++) {\n      this.timeSelectorDayViews[i] = new _app.app.views.TimeSelectorDay({\n        el: '#timePickersWrapper',\n        data: {\n          time: this.model.get(this.dayIds[i]),\n          date: moment(this.model.get('weekStartDate')).add(i, 'd')\n        }\n      }).render();\n    }\n    $('input').timepicker({\n      noneOption: true,\n      step: 15,\n      disableTouchKeyboard: true,\n      disableTextInput: true\n    });\n    if (this.checkTotalTime() > 0) {\n      this.handlePreviouslySubmitted();\n    }\n    this.delegateEvents();\n  },\n  checkTotalTime: function checkTotalTime() {\n    var totalTimeDiv = document.getElementById('totalTime');\n    var totalTime = parseFloat(totalTimeDiv.innerHTML);\n    if (totalTime > 0) {\n      totalTimeDiv.style.backgroundColor = '#69a776';\n    } else {\n      totalTimeDiv.style.backgroundColor = '#dd3c3c';\n    }\n    return totalTime;\n  },\n  computeTotalTime: function computeTotalTime() {\n    var totalTime = 0;\n    for (var i = 0; i < this.dayIds.length; i++) {\n      totalTime += this.timeSelectorDayViews[i].totalHours;\n    }\n    document.getElementById('totalTime').innerHTML = totalTime;\n    this.checkTotalTime();\n  },\n  handlePreviouslySubmitted: function handlePreviouslySubmitted() {\n    var coverDiv = document.getElementById('timePickersCover');\n    var coverInnerDiv = document.createElement('div');\n    var coverInnerDivSpan = document.createElement('div');\n    var resubmissionButton = document.createElement('button');\n    coverDiv.className = 'active';\n    resubmissionButton.innerHTML = 'Request Review';\n    resubmissionButton.className = 'expand';\n    coverInnerDivSpan.innerHTML = alreadySubmittedInfo;\n    coverInnerDiv.appendChild(coverInnerDivSpan);\n    coverInnerDiv.appendChild(resubmissionButton);\n    coverDiv.appendChild(coverInnerDiv);\n  }\n});\n\nvar alreadySubmittedInfo = 'This timesheet has already been submitted. If you would like \\\nto resubmit please request a review.';\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.views.TimeSelectorDay = Backbone.View.extend({\n  initialize: function initialize(data) {\n    this.options = data;\n    this.options.data.formattedDate = moment(this.options.data.date).format('YYYY-MM-DD');\n    this.events = this.events || {};\n    var inputEventKey = 'change' + ' .input-' + this.options.data.formattedDate;\n    this.events[inputEventKey] = 'inputCheck';\n    this.totalHours = 0;\n  },\n  render: function render() {\n    this.template = _.template(_app.app.createTemplate('templates/timeSelectorDay.tpl', this.options.data));\n    $(this.options.el).append(this.template({}));\n    this.delegateEvents();\n    this.checkTotalTime();\n    return this;\n  },\n  inputCheck: function inputCheck() {\n    var totalTimeDiv = document.getElementById('totalHours-' + this.options.data.formattedDate);\n    var totalTime = 0;\n    //compute total hours\n    var morningLoginHour = $('#timeselectors-' + this.options.data.formattedDate + ' #morning-login').val();\n    var morningLogoutHourElement = $('#timeselectors-' + this.options.data.formattedDate + ' #morning-logout');\n    if (morningLoginHour) {\n      morningLogoutHourElement.timepicker('option', { 'minTime': morningLoginHour });\n    }\n    var morningLogoutHour = morningLogoutHourElement.val();\n    var morningHours = moment(morningLogoutHour, 'LT').diff(moment(morningLoginHour, 'LT'), 'h', true);\n    if (morningHours >= 0) {\n      totalTime += morningHours;\n    }\n    var afternoonLoginHour = $('#timeselectors-' + this.options.data.formattedDate + ' #afternoon-login').val();\n    var afternoonLogoutHourElement = $('#timeselectors-' + this.options.data.formattedDate + ' #afternoon-logout');\n    if (afternoonLoginHour) {\n      afternoonLogoutHourElement.timepicker('option', { 'minTime': afternoonLoginHour });\n    }\n    var afternoonLogoutHour = afternoonLogoutHourElement.val();\n    var afternoonHours = moment(afternoonLogoutHour, 'LT').diff(moment(afternoonLoginHour, 'LT'), 'h', true);\n    if (afternoonHours >= 0) {\n      totalTime += afternoonHours;\n    }\n    totalTimeDiv.innerHTML = totalTime;\n    this.checkTotalTime();\n    _app.app.event_bus.trigger('totalTime');\n    _app.app.event_bus.trigger('inputChange');\n  },\n  checkTotalTime: function checkTotalTime() {\n    var totalTimeDiv = document.getElementById('totalHours-' + this.options.data.formattedDate);\n    var totalTime = parseFloat(totalTimeDiv.innerHTML);\n    if (totalTime > 0) {\n      totalTimeDiv.style.backgroundColor = '#69a776';\n    } else {\n      totalTimeDiv.style.backgroundColor = '#dd3c3c';\n    }\n    this.totalHours = totalTime;\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvdmlld3MvdGltZVNlbGVjdG9yRGF5LmpzPzdjMTUiXSwibmFtZXMiOlsidmlld3MiLCJUaW1lU2VsZWN0b3JEYXkiLCJCYWNrYm9uZSIsIlZpZXciLCJleHRlbmQiLCJpbml0aWFsaXplIiwiZGF0YSIsIm9wdGlvbnMiLCJmb3JtYXR0ZWREYXRlIiwibW9tZW50IiwiZGF0ZSIsImZvcm1hdCIsImV2ZW50cyIsImlucHV0RXZlbnRLZXkiLCJ0b3RhbEhvdXJzIiwicmVuZGVyIiwidGVtcGxhdGUiLCJfIiwiY3JlYXRlVGVtcGxhdGUiLCIkIiwiZWwiLCJhcHBlbmQiLCJkZWxlZ2F0ZUV2ZW50cyIsImNoZWNrVG90YWxUaW1lIiwiaW5wdXRDaGVjayIsInRvdGFsVGltZURpdiIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ0b3RhbFRpbWUiLCJtb3JuaW5nTG9naW5Ib3VyIiwidmFsIiwibW9ybmluZ0xvZ291dEhvdXJFbGVtZW50IiwidGltZXBpY2tlciIsIm1vcm5pbmdMb2dvdXRIb3VyIiwibW9ybmluZ0hvdXJzIiwiZGlmZiIsImFmdGVybm9vbkxvZ2luSG91ciIsImFmdGVybm9vbkxvZ291dEhvdXJFbGVtZW50IiwiYWZ0ZXJub29uTG9nb3V0SG91ciIsImFmdGVybm9vbkhvdXJzIiwiaW5uZXJIVE1MIiwiZXZlbnRfYnVzIiwidHJpZ2dlciIsInBhcnNlRmxvYXQiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7O0FBRUEsU0FBSUEsS0FBSixDQUFVQyxlQUFWLEdBQTRCQyxTQUFTQyxJQUFULENBQWNDLE1BQWQsQ0FBcUI7QUFDN0NDLGNBQVksb0JBQVNDLElBQVQsRUFBZTtBQUN6QixTQUFLQyxPQUFMLEdBQWVELElBQWY7QUFDQSxTQUFLQyxPQUFMLENBQWFELElBQWIsQ0FBa0JFLGFBQWxCLEdBQWtDQyxPQUFPLEtBQUtGLE9BQUwsQ0FBYUQsSUFBYixDQUFrQkksSUFBekIsRUFBK0JDLE1BQS9CLENBQXNDLFlBQXRDLENBQWxDO0FBQ0EsU0FBS0MsTUFBTCxHQUFjLEtBQUtBLE1BQUwsSUFBZSxFQUE3QjtBQUNBLFFBQUlDLGdCQUFnQixXQUFXLFVBQVgsR0FBd0IsS0FBS04sT0FBTCxDQUFhRCxJQUFiLENBQWtCRSxhQUE5RDtBQUNBLFNBQUtJLE1BQUwsQ0FBWUMsYUFBWixJQUE2QixZQUE3QjtBQUNBLFNBQUtDLFVBQUwsR0FBa0IsQ0FBbEI7QUFDRCxHQVI0QztBQVM3Q0MsVUFBUSxrQkFBVTtBQUNoQixTQUFLQyxRQUFMLEdBQWdCQyxFQUFFRCxRQUFGLENBQVcsU0FBSUUsY0FBSixDQUFtQiwrQkFBbkIsRUFBb0QsS0FBS1gsT0FBTCxDQUFhRCxJQUFqRSxDQUFYLENBQWhCO0FBQ0FhLE1BQUUsS0FBS1osT0FBTCxDQUFhYSxFQUFmLEVBQW1CQyxNQUFuQixDQUEwQixLQUFLTCxRQUFMLENBQWMsRUFBZCxDQUExQjtBQUNBLFNBQUtNLGNBQUw7QUFDQSxTQUFLQyxjQUFMO0FBQ0EsV0FBTyxJQUFQO0FBQ0QsR0FmNEM7QUFnQjdDQyxjQUFZLHNCQUFXO0FBQ3JCLFFBQUlDLGVBQWVDLFNBQVNDLGNBQVQsQ0FBd0IsZ0JBQWMsS0FBS3BCLE9BQUwsQ0FBYUQsSUFBYixDQUFrQkUsYUFBeEQsQ0FBbkI7QUFDQSxRQUFJb0IsWUFBWSxDQUFoQjtBQUNBO0FBQ0EsUUFBSUMsbUJBQW1CVixFQUFFLG9CQUFrQixLQUFLWixPQUFMLENBQWFELElBQWIsQ0FBa0JFLGFBQXBDLEdBQWtELGlCQUFwRCxFQUF1RXNCLEdBQXZFLEVBQXZCO0FBQ0EsUUFBSUMsMkJBQTJCWixFQUFFLG9CQUFrQixLQUFLWixPQUFMLENBQWFELElBQWIsQ0FBa0JFLGFBQXBDLEdBQWtELGtCQUFwRCxDQUEvQjtBQUNBLFFBQUlxQixnQkFBSixFQUFzQjtBQUNwQkUsK0JBQXlCQyxVQUF6QixDQUFvQyxRQUFwQyxFQUE4QyxFQUFDLFdBQVlILGdCQUFiLEVBQTlDO0FBQ0Q7QUFDRCxRQUFJSSxvQkFBb0JGLHlCQUF5QkQsR0FBekIsRUFBeEI7QUFDQSxRQUFJSSxlQUFlekIsT0FBT3dCLGlCQUFQLEVBQTBCLElBQTFCLEVBQWdDRSxJQUFoQyxDQUFxQzFCLE9BQU9vQixnQkFBUCxFQUF5QixJQUF6QixDQUFyQyxFQUFxRSxHQUFyRSxFQUEwRSxJQUExRSxDQUFuQjtBQUNBLFFBQUlLLGdCQUFjLENBQWxCLEVBQXFCO0FBQ25CTixtQkFBYU0sWUFBYjtBQUNEO0FBQ0QsUUFBSUUscUJBQXFCakIsRUFBRSxvQkFBa0IsS0FBS1osT0FBTCxDQUFhRCxJQUFiLENBQWtCRSxhQUFwQyxHQUFrRCxtQkFBcEQsRUFBeUVzQixHQUF6RSxFQUF6QjtBQUNBLFFBQUlPLDZCQUE2QmxCLEVBQUUsb0JBQWtCLEtBQUtaLE9BQUwsQ0FBYUQsSUFBYixDQUFrQkUsYUFBcEMsR0FBa0Qsb0JBQXBELENBQWpDO0FBQ0EsUUFBSTRCLGtCQUFKLEVBQXdCO0FBQ3RCQyxpQ0FBMkJMLFVBQTNCLENBQXNDLFFBQXRDLEVBQWdELEVBQUMsV0FBWUksa0JBQWIsRUFBaEQ7QUFDRDtBQUNELFFBQUlFLHNCQUFzQkQsMkJBQTJCUCxHQUEzQixFQUExQjtBQUNBLFFBQUlTLGlCQUFpQjlCLE9BQU82QixtQkFBUCxFQUE0QixJQUE1QixFQUFrQ0gsSUFBbEMsQ0FBdUMxQixPQUFPMkIsa0JBQVAsRUFBMkIsSUFBM0IsQ0FBdkMsRUFBeUUsR0FBekUsRUFBOEUsSUFBOUUsQ0FBckI7QUFDQSxRQUFJRyxrQkFBZ0IsQ0FBcEIsRUFBdUI7QUFDckJYLG1CQUFhVyxjQUFiO0FBQ0Q7QUFDRGQsaUJBQWFlLFNBQWIsR0FBeUJaLFNBQXpCO0FBQ0EsU0FBS0wsY0FBTDtBQUNBLGFBQUlrQixTQUFKLENBQWNDLE9BQWQsQ0FBc0IsV0FBdEI7QUFDQSxhQUFJRCxTQUFKLENBQWNDLE9BQWQsQ0FBc0IsYUFBdEI7QUFDRCxHQTVDNEM7QUE2QzdDbkIsa0JBQWdCLDBCQUFVO0FBQ3hCLFFBQUlFLGVBQWVDLFNBQVNDLGNBQVQsQ0FBd0IsZ0JBQWMsS0FBS3BCLE9BQUwsQ0FBYUQsSUFBYixDQUFrQkUsYUFBeEQsQ0FBbkI7QUFDQSxRQUFJb0IsWUFBWWUsV0FBV2xCLGFBQWFlLFNBQXhCLENBQWhCO0FBQ0EsUUFBSVosWUFBVSxDQUFkLEVBQWlCO0FBQ2ZILG1CQUFhbUIsS0FBYixDQUFtQkMsZUFBbkIsR0FBcUMsU0FBckM7QUFDRCxLQUZELE1BRU87QUFDTHBCLG1CQUFhbUIsS0FBYixDQUFtQkMsZUFBbkIsR0FBcUMsU0FBckM7QUFDRDtBQUNELFNBQUsvQixVQUFMLEdBQWtCYyxTQUFsQjtBQUNEO0FBdEQ0QyxDQUFyQixDQUE1QiIsImZpbGUiOiIzMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL2FwcCc7XG5cbmFwcC52aWV3cy5UaW1lU2VsZWN0b3JEYXkgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdGhpcy5vcHRpb25zID0gZGF0YTtcbiAgICAgIHRoaXMub3B0aW9ucy5kYXRhLmZvcm1hdHRlZERhdGUgPSBtb21lbnQodGhpcy5vcHRpb25zLmRhdGEuZGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG4gICAgICB0aGlzLmV2ZW50cyA9IHRoaXMuZXZlbnRzIHx8IHt9O1xuICAgICAgdmFyIGlucHV0RXZlbnRLZXkgPSAnY2hhbmdlJyArICcgLmlucHV0LScgKyB0aGlzLm9wdGlvbnMuZGF0YS5mb3JtYXR0ZWREYXRlO1xuICAgICAgdGhpcy5ldmVudHNbaW5wdXRFdmVudEtleV0gPSAnaW5wdXRDaGVjayc7XG4gICAgICB0aGlzLnRvdGFsSG91cnMgPSAwO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpe1xuICAgICAgdGhpcy50ZW1wbGF0ZSA9IF8udGVtcGxhdGUoYXBwLmNyZWF0ZVRlbXBsYXRlKCd0ZW1wbGF0ZXMvdGltZVNlbGVjdG9yRGF5LnRwbCcsIHRoaXMub3B0aW9ucy5kYXRhKSk7XG4gICAgICAkKHRoaXMub3B0aW9ucy5lbCkuYXBwZW5kKHRoaXMudGVtcGxhdGUoe30pKTtcbiAgICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoKTtcbiAgICAgIHRoaXMuY2hlY2tUb3RhbFRpbWUoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgaW5wdXRDaGVjazogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdG90YWxUaW1lRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvdGFsSG91cnMtJyt0aGlzLm9wdGlvbnMuZGF0YS5mb3JtYXR0ZWREYXRlKTtcbiAgICAgIHZhciB0b3RhbFRpbWUgPSAwO1xuICAgICAgLy9jb21wdXRlIHRvdGFsIGhvdXJzXG4gICAgICB2YXIgbW9ybmluZ0xvZ2luSG91ciA9ICQoJyN0aW1lc2VsZWN0b3JzLScrdGhpcy5vcHRpb25zLmRhdGEuZm9ybWF0dGVkRGF0ZSsnICNtb3JuaW5nLWxvZ2luJykudmFsKCk7XG4gICAgICB2YXIgbW9ybmluZ0xvZ291dEhvdXJFbGVtZW50ID0gJCgnI3RpbWVzZWxlY3RvcnMtJyt0aGlzLm9wdGlvbnMuZGF0YS5mb3JtYXR0ZWREYXRlKycgI21vcm5pbmctbG9nb3V0Jyk7XG4gICAgICBpZiAobW9ybmluZ0xvZ2luSG91cikge1xuICAgICAgICBtb3JuaW5nTG9nb3V0SG91ckVsZW1lbnQudGltZXBpY2tlcignb3B0aW9uJywgeydtaW5UaW1lJyA6IG1vcm5pbmdMb2dpbkhvdXJ9ICk7XG4gICAgICB9XG4gICAgICB2YXIgbW9ybmluZ0xvZ291dEhvdXIgPSBtb3JuaW5nTG9nb3V0SG91ckVsZW1lbnQudmFsKCk7XG4gICAgICB2YXIgbW9ybmluZ0hvdXJzID0gbW9tZW50KG1vcm5pbmdMb2dvdXRIb3VyLCAnTFQnKS5kaWZmKG1vbWVudChtb3JuaW5nTG9naW5Ib3VyLCAnTFQnKSwgJ2gnLCB0cnVlKTtcbiAgICAgIGlmIChtb3JuaW5nSG91cnM+PTApIHtcbiAgICAgICAgdG90YWxUaW1lICs9IG1vcm5pbmdIb3VycztcbiAgICAgIH1cbiAgICAgIHZhciBhZnRlcm5vb25Mb2dpbkhvdXIgPSAkKCcjdGltZXNlbGVjdG9ycy0nK3RoaXMub3B0aW9ucy5kYXRhLmZvcm1hdHRlZERhdGUrJyAjYWZ0ZXJub29uLWxvZ2luJykudmFsKCk7XG4gICAgICB2YXIgYWZ0ZXJub29uTG9nb3V0SG91ckVsZW1lbnQgPSAkKCcjdGltZXNlbGVjdG9ycy0nK3RoaXMub3B0aW9ucy5kYXRhLmZvcm1hdHRlZERhdGUrJyAjYWZ0ZXJub29uLWxvZ291dCcpO1xuICAgICAgaWYgKGFmdGVybm9vbkxvZ2luSG91cikge1xuICAgICAgICBhZnRlcm5vb25Mb2dvdXRIb3VyRWxlbWVudC50aW1lcGlja2VyKCdvcHRpb24nLCB7J21pblRpbWUnIDogYWZ0ZXJub29uTG9naW5Ib3VyfSApO1xuICAgICAgfVxuICAgICAgdmFyIGFmdGVybm9vbkxvZ291dEhvdXIgPSBhZnRlcm5vb25Mb2dvdXRIb3VyRWxlbWVudC52YWwoKTtcbiAgICAgIHZhciBhZnRlcm5vb25Ib3VycyA9IG1vbWVudChhZnRlcm5vb25Mb2dvdXRIb3VyLCAnTFQnKS5kaWZmKG1vbWVudChhZnRlcm5vb25Mb2dpbkhvdXIsICdMVCcpLCAnaCcsIHRydWUpO1xuICAgICAgaWYgKGFmdGVybm9vbkhvdXJzPj0wKSB7XG4gICAgICAgIHRvdGFsVGltZSArPSBhZnRlcm5vb25Ib3VycztcbiAgICAgIH1cbiAgICAgIHRvdGFsVGltZURpdi5pbm5lckhUTUwgPSB0b3RhbFRpbWU7XG4gICAgICB0aGlzLmNoZWNrVG90YWxUaW1lKCk7XG4gICAgICBhcHAuZXZlbnRfYnVzLnRyaWdnZXIoJ3RvdGFsVGltZScpO1xuICAgICAgYXBwLmV2ZW50X2J1cy50cmlnZ2VyKCdpbnB1dENoYW5nZScpO1xuICAgIH0sXG4gICAgY2hlY2tUb3RhbFRpbWU6IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgdG90YWxUaW1lRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvdGFsSG91cnMtJyt0aGlzLm9wdGlvbnMuZGF0YS5mb3JtYXR0ZWREYXRlKTtcbiAgICAgIHZhciB0b3RhbFRpbWUgPSBwYXJzZUZsb2F0KHRvdGFsVGltZURpdi5pbm5lckhUTUwpO1xuICAgICAgaWYgKHRvdGFsVGltZT4wKSB7XG4gICAgICAgIHRvdGFsVGltZURpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzY5YTc3Nic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b3RhbFRpbWVEaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyNkZDNjM2MnO1xuICAgICAgfVxuICAgICAgdGhpcy50b3RhbEhvdXJzID0gdG90YWxUaW1lO1xuICAgIH1cbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9jbGllbnQtYXBwL3ZpZXdzL3RpbWVTZWxlY3RvckRheS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.views.timeSheet = Backbone.View.extend({\n    template: null,\n    initialize: function initialize(data) {\n        var initializedWeekStartDate = moment().startOf('isoWeek').format('YYYY-MM-DD');\n\n        this.options = data;\n        this.template = _.template(this.options.template);\n        this.timeSheets = new _app.app.collections.TimeSheets();\n        this.calendarView = new _app.app.views.Calendar({\n            el: '#clndr-view',\n            renderWeekStartDate: initializedWeekStartDate,\n            collection: this.timeSheets\n        });\n\n        this.listenTo(this.calendarView, 'timeSelector', this.renderTimeSelector);\n    },\n    render: function render() {\n        var initializedWeekStartDate = moment().startOf('isoWeek').format('YYYY-MM-DD');\n        //Render Parent\n        this.$el.html(this.template({}));\n\n        //Render Calendar\n        this.calendarView.render();\n        this.delegateEvents();\n    },\n    renderTimeSelector: function renderTimeSelector(date) {\n        var model = this.timeSheets.find(function (timeSheet) {\n            var modelStartDate = moment.utc(timeSheet.get('weekStartDate')).format('YYYY-MM-DD');\n            return moment(modelStartDate).isSame(date);\n        });\n        if (this.timeSelectorView) {\n            this.timeSelectorView.close();\n        }\n        this.timeSelectorView = new _app.app.views.TimeSelector({\n            el: '#timeSelector-view',\n            model: model\n        });\n        this.timeSelectorView.render();\n    }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvdmlld3MvdGltZVNoZWV0LmpzPzEwYjIiXSwibmFtZXMiOlsidmlld3MiLCJ0aW1lU2hlZXQiLCJCYWNrYm9uZSIsIlZpZXciLCJleHRlbmQiLCJ0ZW1wbGF0ZSIsImluaXRpYWxpemUiLCJkYXRhIiwiaW5pdGlhbGl6ZWRXZWVrU3RhcnREYXRlIiwibW9tZW50Iiwic3RhcnRPZiIsImZvcm1hdCIsIm9wdGlvbnMiLCJfIiwidGltZVNoZWV0cyIsImNvbGxlY3Rpb25zIiwiVGltZVNoZWV0cyIsImNhbGVuZGFyVmlldyIsIkNhbGVuZGFyIiwiZWwiLCJyZW5kZXJXZWVrU3RhcnREYXRlIiwiY29sbGVjdGlvbiIsImxpc3RlblRvIiwicmVuZGVyVGltZVNlbGVjdG9yIiwicmVuZGVyIiwiJGVsIiwiaHRtbCIsImRlbGVnYXRlRXZlbnRzIiwiZGF0ZSIsIm1vZGVsIiwiZmluZCIsIm1vZGVsU3RhcnREYXRlIiwidXRjIiwiZ2V0IiwiaXNTYW1lIiwidGltZVNlbGVjdG9yVmlldyIsImNsb3NlIiwiVGltZVNlbGVjdG9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTs7QUFFQSxTQUFJQSxLQUFKLENBQVVDLFNBQVYsR0FBc0JDLFNBQVNDLElBQVQsQ0FBY0MsTUFBZCxDQUFxQjtBQUN2Q0MsY0FBVSxJQUQ2QjtBQUV2Q0MsZ0JBQVksb0JBQVNDLElBQVQsRUFBZTtBQUN2QixZQUFJQywyQkFBMkJDLFNBQVNDLE9BQVQsQ0FBaUIsU0FBakIsRUFBNEJDLE1BQTVCLENBQW1DLFlBQW5DLENBQS9COztBQUVBLGFBQUtDLE9BQUwsR0FBZUwsSUFBZjtBQUNBLGFBQUtGLFFBQUwsR0FBZ0JRLEVBQUVSLFFBQUYsQ0FBVyxLQUFLTyxPQUFMLENBQWFQLFFBQXhCLENBQWhCO0FBQ0EsYUFBS1MsVUFBTCxHQUFrQixJQUFJLFNBQUlDLFdBQUosQ0FBZ0JDLFVBQXBCLEVBQWxCO0FBQ0EsYUFBS0MsWUFBTCxHQUFvQixJQUFJLFNBQUlqQixLQUFKLENBQVVrQixRQUFkLENBQXVCO0FBQ3ZDQyxnQkFBSSxhQURtQztBQUV2Q0MsaUNBQXFCWix3QkFGa0I7QUFHdkNhLHdCQUFZLEtBQUtQO0FBSHNCLFNBQXZCLENBQXBCOztBQU1BLGFBQUtRLFFBQUwsQ0FBYyxLQUFLTCxZQUFuQixFQUFpQyxjQUFqQyxFQUFpRCxLQUFLTSxrQkFBdEQ7QUFDSCxLQWZzQztBQWdCdkNDLFlBQVEsa0JBQVc7QUFDZixZQUFJaEIsMkJBQTJCQyxTQUFTQyxPQUFULENBQWlCLFNBQWpCLEVBQTRCQyxNQUE1QixDQUFtQyxZQUFuQyxDQUEvQjtBQUNBO0FBQ0EsYUFBS2MsR0FBTCxDQUFTQyxJQUFULENBQWMsS0FBS3JCLFFBQUwsQ0FBYyxFQUFkLENBQWQ7O0FBRUE7QUFDQSxhQUFLWSxZQUFMLENBQWtCTyxNQUFsQjtBQUNBLGFBQUtHLGNBQUw7QUFDSCxLQXhCc0M7QUF5QnZDSix3QkFBb0IsNEJBQVNLLElBQVQsRUFBZTtBQUMvQixZQUFJQyxRQUFRLEtBQUtmLFVBQUwsQ0FBZ0JnQixJQUFoQixDQUFxQixVQUFTN0IsU0FBVCxFQUFvQjtBQUNqRCxnQkFBSThCLGlCQUFpQnRCLE9BQU91QixHQUFQLENBQVcvQixVQUFVZ0MsR0FBVixDQUFjLGVBQWQsQ0FBWCxFQUEyQ3RCLE1BQTNDLENBQWtELFlBQWxELENBQXJCO0FBQ0EsbUJBQU9GLE9BQU9zQixjQUFQLEVBQXVCRyxNQUF2QixDQUE4Qk4sSUFBOUIsQ0FBUDtBQUNILFNBSFcsQ0FBWjtBQUlBLFlBQUksS0FBS08sZ0JBQVQsRUFBMkI7QUFDdkIsaUJBQUtBLGdCQUFMLENBQXNCQyxLQUF0QjtBQUNIO0FBQ0QsYUFBS0QsZ0JBQUwsR0FBd0IsSUFBSSxTQUFJbkMsS0FBSixDQUFVcUMsWUFBZCxDQUEyQjtBQUMvQ2xCLGdCQUFJLG9CQUQyQztBQUUvQ1UsbUJBQU9BO0FBRndDLFNBQTNCLENBQXhCO0FBSUEsYUFBS00sZ0JBQUwsQ0FBc0JYLE1BQXRCO0FBQ0g7QUF0Q3NDLENBQXJCLENBQXRCIiwiZmlsZSI6IjMxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vYXBwJztcblxuYXBwLnZpZXdzLnRpbWVTaGVldCA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICB0ZW1wbGF0ZTogbnVsbCxcbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIHZhciBpbml0aWFsaXplZFdlZWtTdGFydERhdGUgPSBtb21lbnQoKS5zdGFydE9mKCdpc29XZWVrJykuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gZGF0YTtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IF8udGVtcGxhdGUodGhpcy5vcHRpb25zLnRlbXBsYXRlKTtcbiAgICAgICAgdGhpcy50aW1lU2hlZXRzID0gbmV3IGFwcC5jb2xsZWN0aW9ucy5UaW1lU2hlZXRzKCk7XG4gICAgICAgIHRoaXMuY2FsZW5kYXJWaWV3ID0gbmV3IGFwcC52aWV3cy5DYWxlbmRhcih7XG4gICAgICAgICAgICBlbDogJyNjbG5kci12aWV3JyxcbiAgICAgICAgICAgIHJlbmRlcldlZWtTdGFydERhdGU6IGluaXRpYWxpemVkV2Vla1N0YXJ0RGF0ZSxcbiAgICAgICAgICAgIGNvbGxlY3Rpb246IHRoaXMudGltZVNoZWV0c1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMuY2FsZW5kYXJWaWV3LCAndGltZVNlbGVjdG9yJywgdGhpcy5yZW5kZXJUaW1lU2VsZWN0b3IpO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGluaXRpYWxpemVkV2Vla1N0YXJ0RGF0ZSA9IG1vbWVudCgpLnN0YXJ0T2YoJ2lzb1dlZWsnKS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcbiAgICAgICAgLy9SZW5kZXIgUGFyZW50XG4gICAgICAgIHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZSh7fSkpO1xuXG4gICAgICAgIC8vUmVuZGVyIENhbGVuZGFyXG4gICAgICAgIHRoaXMuY2FsZW5kYXJWaWV3LnJlbmRlcigpO1xuICAgICAgICB0aGlzLmRlbGVnYXRlRXZlbnRzKCk7XG4gICAgfSxcbiAgICByZW5kZXJUaW1lU2VsZWN0b3I6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgdmFyIG1vZGVsID0gdGhpcy50aW1lU2hlZXRzLmZpbmQoZnVuY3Rpb24odGltZVNoZWV0KSB7XG4gICAgICAgICAgICB2YXIgbW9kZWxTdGFydERhdGUgPSBtb21lbnQudXRjKHRpbWVTaGVldC5nZXQoJ3dlZWtTdGFydERhdGUnKSkuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG4gICAgICAgICAgICByZXR1cm4gbW9tZW50KG1vZGVsU3RhcnREYXRlKS5pc1NhbWUoZGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy50aW1lU2VsZWN0b3JWaWV3KSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVTZWxlY3RvclZpZXcuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRpbWVTZWxlY3RvclZpZXcgPSBuZXcgYXBwLnZpZXdzLlRpbWVTZWxlY3Rvcih7XG4gICAgICAgICAgICBlbDogJyN0aW1lU2VsZWN0b3ItdmlldycsXG4gICAgICAgICAgICBtb2RlbDogbW9kZWxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudGltZVNlbGVjdG9yVmlldy5yZW5kZXIoKTtcbiAgICB9XG59KTtcblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2NsaWVudC1hcHAvdmlld3MvdGltZVNoZWV0LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.views.unverifiedUser = Backbone.View.extend({\n    initialize: function initialize(data) {\n        this.options = data;\n        this.resendSignupEmailModel = new _app.app.models.ResendSignupEmail();\n    },\n    render: function render() {\n        this.template = _.template(_app.app.createTemplate('templates/unverifiedUser.tpl', { person: this.model.attributes }));\n        this.$el.html(this.template({}));\n        this.delegateEvents();\n        return this;\n    },\n    events: {\n        'click .deleteButton': 'delete',\n        'click .resendButton': 'resendSignupEmail'\n    },\n    delete: function _delete() {\n        var that = this;\n        $('#deleteModal').foundation('reveal', 'open');\n        $(document).on('opened.fndtn.reveal', '#deleteModal[data-reveal]', function () {\n            $('#deleteYes').click(function () {\n                that.model.destroy();\n                $('#deleteModal[data-reveal]').foundation('reveal', 'close');\n                modalListenerCleanup();\n            });\n            $('#deleteNo').click(function (event) {\n                $('#deleteModal[data-reveal]').foundation('reveal', 'close');\n                modalListenerCleanup();\n            });\n        });\n\n        function modalListenerCleanup() {\n            $(document).off('opened.fndtn.reveal');\n            $('#deleteYes').off('click');\n            $('#deleteNo').off('click');\n        }\n    },\n    resendSignupEmail: function resendSignupEmail() {\n        var that = this;\n        this.resendSignupEmailModel.save({\n            Email: this.model.get('Email'),\n            Token: this.model.get('id')\n        }, {\n            success: function success(model, response) {\n                $('#resendSignupEmailModal').foundation('reveal', 'open');\n            },\n            error: function error(model, response) {\n                //Some sort of error handling here\n            }\n        });\n        console.log();\n    }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvdmlld3MvdW52ZXJpZmllZFVzZXIuanM/YTQ1ZiJdLCJuYW1lcyI6WyJ2aWV3cyIsInVudmVyaWZpZWRVc2VyIiwiQmFja2JvbmUiLCJWaWV3IiwiZXh0ZW5kIiwiaW5pdGlhbGl6ZSIsImRhdGEiLCJvcHRpb25zIiwicmVzZW5kU2lnbnVwRW1haWxNb2RlbCIsIm1vZGVscyIsIlJlc2VuZFNpZ251cEVtYWlsIiwicmVuZGVyIiwidGVtcGxhdGUiLCJfIiwiY3JlYXRlVGVtcGxhdGUiLCJwZXJzb24iLCJtb2RlbCIsImF0dHJpYnV0ZXMiLCIkZWwiLCJodG1sIiwiZGVsZWdhdGVFdmVudHMiLCJldmVudHMiLCJkZWxldGUiLCJ0aGF0IiwiJCIsImZvdW5kYXRpb24iLCJkb2N1bWVudCIsIm9uIiwiY2xpY2siLCJkZXN0cm95IiwibW9kYWxMaXN0ZW5lckNsZWFudXAiLCJldmVudCIsIm9mZiIsInJlc2VuZFNpZ251cEVtYWlsIiwic2F2ZSIsIkVtYWlsIiwiZ2V0IiwiVG9rZW4iLCJzdWNjZXNzIiwicmVzcG9uc2UiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBOztBQUVBLFNBQUlBLEtBQUosQ0FBVUMsY0FBVixHQUEyQkMsU0FBU0MsSUFBVCxDQUFjQyxNQUFkLENBQXFCO0FBQzVDQyxnQkFBWSxvQkFBU0MsSUFBVCxFQUFlO0FBQ3ZCLGFBQUtDLE9BQUwsR0FBZUQsSUFBZjtBQUNBLGFBQUtFLHNCQUFMLEdBQThCLElBQUksU0FBSUMsTUFBSixDQUFXQyxpQkFBZixFQUE5QjtBQUNILEtBSjJDO0FBSzVDQyxZQUFRLGtCQUFVO0FBQ2QsYUFBS0MsUUFBTCxHQUFnQkMsRUFBRUQsUUFBRixDQUFXLFNBQUlFLGNBQUosQ0FBbUIsOEJBQW5CLEVBQW1ELEVBQUVDLFFBQVEsS0FBS0MsS0FBTCxDQUFXQyxVQUFyQixFQUFuRCxDQUFYLENBQWhCO0FBQ0EsYUFBS0MsR0FBTCxDQUFTQyxJQUFULENBQWMsS0FBS1AsUUFBTCxDQUFjLEVBQWQsQ0FBZDtBQUNBLGFBQUtRLGNBQUw7QUFDQSxlQUFPLElBQVA7QUFDSCxLQVYyQztBQVc1Q0MsWUFBUTtBQUNOLCtCQUF3QixRQURsQjtBQUVOLCtCQUF3QjtBQUZsQixLQVhvQztBQWU1Q0MsWUFBUSxtQkFBVztBQUNqQixZQUFJQyxPQUFPLElBQVg7QUFDQUMsVUFBRSxjQUFGLEVBQWtCQyxVQUFsQixDQUE2QixRQUE3QixFQUF1QyxNQUF2QztBQUNBRCxVQUFFRSxRQUFGLEVBQVlDLEVBQVosQ0FBZSxxQkFBZixFQUFzQywyQkFBdEMsRUFBbUUsWUFBWTtBQUMzRUgsY0FBRSxZQUFGLEVBQWdCSSxLQUFoQixDQUFzQixZQUFZO0FBQzlCTCxxQkFBS1AsS0FBTCxDQUFXYSxPQUFYO0FBQ0FMLGtCQUFFLDJCQUFGLEVBQStCQyxVQUEvQixDQUEwQyxRQUExQyxFQUFvRCxPQUFwRDtBQUNBSztBQUNILGFBSkQ7QUFLQU4sY0FBRSxXQUFGLEVBQWVJLEtBQWYsQ0FBcUIsVUFBVUcsS0FBVixFQUFpQjtBQUNsQ1Asa0JBQUUsMkJBQUYsRUFBK0JDLFVBQS9CLENBQTBDLFFBQTFDLEVBQW9ELE9BQXBEO0FBQ0FLO0FBQ0gsYUFIRDtBQUlILFNBVkQ7O0FBWUEsaUJBQVNBLG9CQUFULEdBQWdDO0FBQzlCTixjQUFFRSxRQUFGLEVBQVlNLEdBQVosQ0FBZ0IscUJBQWhCO0FBQ0FSLGNBQUUsWUFBRixFQUFnQlEsR0FBaEIsQ0FBb0IsT0FBcEI7QUFDQVIsY0FBRSxXQUFGLEVBQWVRLEdBQWYsQ0FBbUIsT0FBbkI7QUFDRDtBQUNGLEtBbkMyQztBQW9DNUNDLHVCQUFtQiw2QkFBVztBQUM1QixZQUFJVixPQUFPLElBQVg7QUFDQSxhQUFLZixzQkFBTCxDQUE0QjBCLElBQTVCLENBQWlDO0FBQzdCQyxtQkFBTyxLQUFLbkIsS0FBTCxDQUFXb0IsR0FBWCxDQUFlLE9BQWYsQ0FEc0I7QUFFN0JDLG1CQUFPLEtBQUtyQixLQUFMLENBQVdvQixHQUFYLENBQWUsSUFBZjtBQUZzQixTQUFqQyxFQUdHO0FBQ0NFLHFCQUFTLGlCQUFTdEIsS0FBVCxFQUFnQnVCLFFBQWhCLEVBQTBCO0FBQ2pDZixrQkFBRSx5QkFBRixFQUE2QkMsVUFBN0IsQ0FBd0MsUUFBeEMsRUFBa0QsTUFBbEQ7QUFDRCxhQUhGO0FBSUNlLG1CQUFPLGVBQVN4QixLQUFULEVBQWdCdUIsUUFBaEIsRUFBMEI7QUFDN0I7QUFDSDtBQU5GLFNBSEg7QUFXQUUsZ0JBQVFDLEdBQVI7QUFDRDtBQWxEMkMsQ0FBckIsQ0FBM0IiLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9hcHAnO1xuXG5hcHAudmlld3MudW52ZXJpZmllZFVzZXIgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBkYXRhO1xuICAgICAgICB0aGlzLnJlc2VuZFNpZ251cEVtYWlsTW9kZWwgPSBuZXcgYXBwLm1vZGVscy5SZXNlbmRTaWdudXBFbWFpbCgpO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLnRlbXBsYXRlID0gXy50ZW1wbGF0ZShhcHAuY3JlYXRlVGVtcGxhdGUoJ3RlbXBsYXRlcy91bnZlcmlmaWVkVXNlci50cGwnLCB7IHBlcnNvbjogdGhpcy5tb2RlbC5hdHRyaWJ1dGVzIH0pKTtcbiAgICAgICAgdGhpcy4kZWwuaHRtbCh0aGlzLnRlbXBsYXRlKHt9KSk7XG4gICAgICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBldmVudHM6IHtcbiAgICAgICdjbGljayAuZGVsZXRlQnV0dG9uJyA6ICdkZWxldGUnLFxuICAgICAgJ2NsaWNrIC5yZXNlbmRCdXR0b24nIDogJ3Jlc2VuZFNpZ251cEVtYWlsJ1xuICAgIH0sXG4gICAgZGVsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICQoJyNkZWxldGVNb2RhbCcpLmZvdW5kYXRpb24oJ3JldmVhbCcsICdvcGVuJyk7XG4gICAgICAkKGRvY3VtZW50KS5vbignb3BlbmVkLmZuZHRuLnJldmVhbCcsICcjZGVsZXRlTW9kYWxbZGF0YS1yZXZlYWxdJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICQoJyNkZWxldGVZZXMnKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRoYXQubW9kZWwuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAkKCcjZGVsZXRlTW9kYWxbZGF0YS1yZXZlYWxdJykuZm91bmRhdGlvbigncmV2ZWFsJywgJ2Nsb3NlJyk7XG4gICAgICAgICAgICAgIG1vZGFsTGlzdGVuZXJDbGVhbnVwKCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAkKCcjZGVsZXRlTm8nKS5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgJCgnI2RlbGV0ZU1vZGFsW2RhdGEtcmV2ZWFsXScpLmZvdW5kYXRpb24oJ3JldmVhbCcsICdjbG9zZScpO1xuICAgICAgICAgICAgICBtb2RhbExpc3RlbmVyQ2xlYW51cCgpO1xuICAgICAgICAgIH0pXG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gbW9kYWxMaXN0ZW5lckNsZWFudXAoKSB7XG4gICAgICAgICQoZG9jdW1lbnQpLm9mZignb3BlbmVkLmZuZHRuLnJldmVhbCcpO1xuICAgICAgICAkKCcjZGVsZXRlWWVzJykub2ZmKCdjbGljaycpO1xuICAgICAgICAkKCcjZGVsZXRlTm8nKS5vZmYoJ2NsaWNrJyk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXNlbmRTaWdudXBFbWFpbDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB0aGlzLnJlc2VuZFNpZ251cEVtYWlsTW9kZWwuc2F2ZSh7XG4gICAgICAgICAgRW1haWw6IHRoaXMubW9kZWwuZ2V0KCdFbWFpbCcpLFxuICAgICAgICAgIFRva2VuOiB0aGlzLm1vZGVsLmdldCgnaWQnKVxuICAgICAgfSwge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKG1vZGVsLCByZXNwb25zZSkge1xuICAgICAgICAgICAgJCgnI3Jlc2VuZFNpZ251cEVtYWlsTW9kYWwnKS5mb3VuZGF0aW9uKCdyZXZlYWwnLCAnb3BlbicpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKG1vZGVsLCByZXNwb25zZSkge1xuICAgICAgICAgICAgICAvL1NvbWUgc29ydCBvZiBlcnJvciBoYW5kbGluZyBoZXJlXG4gICAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb25zb2xlLmxvZygpO1xuICAgIH1cbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9jbGllbnQtYXBwL3ZpZXdzL3VudmVyaWZpZWRVc2VyLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	eval("// NOTES:\n// - I seperated this and unverified user as I intend on putting a large amount more\n// logic in the 'verified user' view.\n\n'use strict';\n\nvar _app = __webpack_require__(6);\n\n_app.app.views.verifiedUser = Backbone.View.extend({\n    initialize: function initialize(data) {\n        this.options = data;\n    },\n    render: function render() {\n        this.template = _.template(_app.app.createTemplate('templates/verifiedUser.tpl', { person: this.model.attributes }));\n        this.$el.html(this.template({}));\n        this.delegateEvents();\n        return this;\n    },\n    events: {\n        'click .deleteButton': 'delete'\n    },\n    delete: function _delete() {\n        var that = this;\n        $('#deleteModal').foundation('reveal', 'open');\n        $(document).on('opened.fndtn.reveal', '#deleteModal[data-reveal]', function () {\n            $('#deleteYes').click(function () {\n                that.model.destroy();\n                $('#deleteModal[data-reveal]').foundation('reveal', 'close');\n                modalListenerCleanup();\n            });\n            $('#deleteNo').click(function (event) {\n                $('#deleteModal[data-reveal]').foundation('reveal', 'close');\n                modalListenerCleanup();\n            });\n        });\n\n        function modalListenerCleanup() {\n            $(document).off('opened.fndtn.reveal');\n            $('#deleteYes').off('click');\n            $('#deleteNo').off('click');\n        }\n    }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NsaWVudC1hcHAvdmlld3MvdmVyaWZpZWRVc2VyLmpzP2NhZWEiXSwibmFtZXMiOlsidmlld3MiLCJ2ZXJpZmllZFVzZXIiLCJCYWNrYm9uZSIsIlZpZXciLCJleHRlbmQiLCJpbml0aWFsaXplIiwiZGF0YSIsIm9wdGlvbnMiLCJyZW5kZXIiLCJ0ZW1wbGF0ZSIsIl8iLCJjcmVhdGVUZW1wbGF0ZSIsInBlcnNvbiIsIm1vZGVsIiwiYXR0cmlidXRlcyIsIiRlbCIsImh0bWwiLCJkZWxlZ2F0ZUV2ZW50cyIsImV2ZW50cyIsImRlbGV0ZSIsInRoYXQiLCIkIiwiZm91bmRhdGlvbiIsImRvY3VtZW50Iiwib24iLCJjbGljayIsImRlc3Ryb3kiLCJtb2RhbExpc3RlbmVyQ2xlYW51cCIsImV2ZW50Iiwib2ZmIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7O0FBQ0E7O0FBRUEsU0FBSUEsS0FBSixDQUFVQyxZQUFWLEdBQXlCQyxTQUFTQyxJQUFULENBQWNDLE1BQWQsQ0FBcUI7QUFDMUNDLGdCQUFZLG9CQUFTQyxJQUFULEVBQWU7QUFDdkIsYUFBS0MsT0FBTCxHQUFlRCxJQUFmO0FBQ0gsS0FIeUM7QUFJMUNFLFlBQVEsa0JBQVU7QUFDZCxhQUFLQyxRQUFMLEdBQWdCQyxFQUFFRCxRQUFGLENBQVcsU0FBSUUsY0FBSixDQUFtQiw0QkFBbkIsRUFBaUQsRUFBRUMsUUFBUSxLQUFLQyxLQUFMLENBQVdDLFVBQXJCLEVBQWpELENBQVgsQ0FBaEI7QUFDQSxhQUFLQyxHQUFMLENBQVNDLElBQVQsQ0FBYyxLQUFLUCxRQUFMLENBQWMsRUFBZCxDQUFkO0FBQ0EsYUFBS1EsY0FBTDtBQUNBLGVBQU8sSUFBUDtBQUNILEtBVHlDO0FBVTFDQyxZQUFRO0FBQ04sK0JBQXdCO0FBRGxCLEtBVmtDO0FBYTFDQyxZQUFRLG1CQUFXO0FBQ2pCLFlBQUlDLE9BQU8sSUFBWDtBQUNBQyxVQUFFLGNBQUYsRUFBa0JDLFVBQWxCLENBQTZCLFFBQTdCLEVBQXVDLE1BQXZDO0FBQ0FELFVBQUVFLFFBQUYsRUFBWUMsRUFBWixDQUFlLHFCQUFmLEVBQXNDLDJCQUF0QyxFQUFtRSxZQUFZO0FBQzNFSCxjQUFFLFlBQUYsRUFBZ0JJLEtBQWhCLENBQXNCLFlBQVk7QUFDOUJMLHFCQUFLUCxLQUFMLENBQVdhLE9BQVg7QUFDQUwsa0JBQUUsMkJBQUYsRUFBK0JDLFVBQS9CLENBQTBDLFFBQTFDLEVBQW9ELE9BQXBEO0FBQ0FLO0FBQ0gsYUFKRDtBQUtBTixjQUFFLFdBQUYsRUFBZUksS0FBZixDQUFxQixVQUFVRyxLQUFWLEVBQWlCO0FBQ2xDUCxrQkFBRSwyQkFBRixFQUErQkMsVUFBL0IsQ0FBMEMsUUFBMUMsRUFBb0QsT0FBcEQ7QUFDQUs7QUFDSCxhQUhEO0FBSUgsU0FWRDs7QUFZQSxpQkFBU0Esb0JBQVQsR0FBZ0M7QUFDOUJOLGNBQUVFLFFBQUYsRUFBWU0sR0FBWixDQUFnQixxQkFBaEI7QUFDQVIsY0FBRSxZQUFGLEVBQWdCUSxHQUFoQixDQUFvQixPQUFwQjtBQUNBUixjQUFFLFdBQUYsRUFBZVEsR0FBZixDQUFtQixPQUFuQjtBQUNEO0FBQ0Y7QUFqQ3lDLENBQXJCLENBQXpCIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTk9URVM6XG4vLyAtIEkgc2VwZXJhdGVkIHRoaXMgYW5kIHVudmVyaWZpZWQgdXNlciBhcyBJIGludGVuZCBvbiBwdXR0aW5nIGEgbGFyZ2UgYW1vdW50IG1vcmVcbi8vIGxvZ2ljIGluIHRoZSAndmVyaWZpZWQgdXNlcicgdmlldy5cblxuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vYXBwJztcblxuYXBwLnZpZXdzLnZlcmlmaWVkVXNlciA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGRhdGE7XG4gICAgfSxcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSBfLnRlbXBsYXRlKGFwcC5jcmVhdGVUZW1wbGF0ZSgndGVtcGxhdGVzL3ZlcmlmaWVkVXNlci50cGwnLCB7IHBlcnNvbjogdGhpcy5tb2RlbC5hdHRyaWJ1dGVzIH0pKTtcbiAgICAgICAgdGhpcy4kZWwuaHRtbCh0aGlzLnRlbXBsYXRlKHt9KSk7XG4gICAgICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBldmVudHM6IHtcbiAgICAgICdjbGljayAuZGVsZXRlQnV0dG9uJyA6ICdkZWxldGUnXG4gICAgfSxcbiAgICBkZWxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgJCgnI2RlbGV0ZU1vZGFsJykuZm91bmRhdGlvbigncmV2ZWFsJywgJ29wZW4nKTtcbiAgICAgICQoZG9jdW1lbnQpLm9uKCdvcGVuZWQuZm5kdG4ucmV2ZWFsJywgJyNkZWxldGVNb2RhbFtkYXRhLXJldmVhbF0nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJCgnI2RlbGV0ZVllcycpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGhhdC5tb2RlbC5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICQoJyNkZWxldGVNb2RhbFtkYXRhLXJldmVhbF0nKS5mb3VuZGF0aW9uKCdyZXZlYWwnLCAnY2xvc2UnKTtcbiAgICAgICAgICAgICAgbW9kYWxMaXN0ZW5lckNsZWFudXAoKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgICQoJyNkZWxldGVObycpLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAkKCcjZGVsZXRlTW9kYWxbZGF0YS1yZXZlYWxdJykuZm91bmRhdGlvbigncmV2ZWFsJywgJ2Nsb3NlJyk7XG4gICAgICAgICAgICAgIG1vZGFsTGlzdGVuZXJDbGVhbnVwKCk7XG4gICAgICAgICAgfSlcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBtb2RhbExpc3RlbmVyQ2xlYW51cCgpIHtcbiAgICAgICAgJChkb2N1bWVudCkub2ZmKCdvcGVuZWQuZm5kdG4ucmV2ZWFsJyk7XG4gICAgICAgICQoJyNkZWxldGVZZXMnKS5vZmYoJ2NsaWNrJyk7XG4gICAgICAgICQoJyNkZWxldGVObycpLm9mZignY2xpY2snKTtcbiAgICAgIH1cbiAgICB9XG59KTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hcHAvY2xpZW50LWFwcC92aWV3cy92ZXJpZmllZFVzZXIuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ }
/******/ ]);